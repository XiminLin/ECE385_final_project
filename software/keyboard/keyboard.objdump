
keyboard.elf:     file format elf32-littlenios2
keyboard.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000401bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00011ea4 memsz 0x00011ea4 flags r-x
    LOAD off    0x00012ec4 vaddr 0x00051ec4 paddr 0x000539b0 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x0001549c vaddr 0x0005549c paddr 0x0005549c align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011270  000401bc  000401bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a98  0005142c  0005142c  0001242c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00051ec4  000539b0  00012ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  0005549c  0005549c  0001549c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000555fc  000555fc  000149b0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000149b0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d28  00000000  00000000  000149d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023641  00000000  00000000  00015700  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008f37  00000000  00000000  00038d41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b16a  00000000  00000000  00041c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000022cc  00000000  00000000  0004cde4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003320  00000000  00000000  0004f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016d4c  00000000  00000000  000523d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0006911c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001370  00000000  00000000  00069160  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006d808  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006d80b  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006d817  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006d818  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006d819  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006d81d  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006d821  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0006d825  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0006d830  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0006d83b  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0006d846  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000029  00000000  00000000  0006d849  2**0
                  CONTENTS, READONLY
 29 .jdi          00003c00  00000000  00000000  0006d872  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007ac9a  00000000  00000000  00071472  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
000401bc l    d  .text	00000000 .text
0005142c l    d  .rodata	00000000 .rodata
00051ec4 l    d  .rwdata	00000000 .rwdata
0005549c l    d  .bss	00000000 .bss
000555fc l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../keyboard_bsp//obj/HAL/src/crt0.o
000401f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00040094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
0005549c l     O .bss	00000002 ctl_reg.3318
0005549e l     O .bss	00000002 no_device.3319
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00051c0a l     O .rodata	00000010 zeroes.4181
00051c1a l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000446a0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00046248 l     F .text	00000008 __fp_lock
00046250 l     F .text	00000008 __fp_unlock
00046264 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00051ec4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00052308 l     O .rwdata	00000020 lc_ctype_charset
000522e8 l     O .rwdata	00000020 lc_message_charset
00052328 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00051c4c l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00049794 l     F .text	000000fc __sprint_r.part.0
00051d80 l     O .rodata	00000010 blanks.4125
00051d70 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0004c298 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0004ebe8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0004ed10 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004ed3c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004ee44 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0004ef40 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0004f024 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0004f208 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000539a0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0004f4bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004f60c l     F .text	00000038 alt_dev_reg
00052910 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0004f8e8 l     F .text	00000204 altera_avalon_jtag_uart_irq
0004faec l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000503c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00050858 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000509b0 l     F .text	00000050 alt_get_errno
00050a00 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00048dd4 g     F .text	00000074 _mprec_log10
00048ec0 g     F .text	0000008c __any_on
0004b1c0 g     F .text	00000054 _isatty_r
00051c58 g     O .rodata	00000028 __mprec_tinytens
0004f150 g     F .text	00000078 alt_main
000422ec g     F .text	000000b8 _puts_r
000554fc g     O .bss	00000100 alt_irq
0004b214 g     F .text	0000005c _lseek_r
000539b0 g       *ABS*	00000000 __flash_rwdata_start
0004d608 g     F .text	00000084 .hidden __eqdf2
000555fc g       *ABS*	00000000 __alt_heap_start
000422b0 g     F .text	0000003c printf
0004b43c g     F .text	0000009c _wcrtomb_r
0004968c g     F .text	0000005c __sseek
000465ac g     F .text	00000010 __sinit
0004b2cc g     F .text	00000154 __swbuf_r
00047024 g     F .text	0000007c _setlocale_r
00046404 g     F .text	00000078 __sfmoreglue
0004f1e8 g     F .text	00000020 __malloc_unlock
00042188 g     F .text	00000080 UsbGetRetryCnt
00047c84 g     F .text	0000015c memmove
000401f8 g     F .text	00000064 IO_init
00046594 g     F .text	00000018 _cleanup
00047f04 g     F .text	000000a8 _Balloc
0004d68c g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004b168 g     F .text	00000058 _fstat_r
000554b8 g     O .bss	00000004 errno
00049608 g     F .text	00000008 __seofread
000554c0 g     O .bss	00000004 alt_argv
0005b970 g       *ABS*	00000000 _gp
0004f48c g     F .text	00000030 usleep
00052790 g     O .rwdata	00000180 alt_fd_list
00050e10 g     F .text	00000090 alt_find_dev
00047b4c g     F .text	00000138 memcpy
00046258 g     F .text	0000000c _cleanup_r
0004ea10 g     F .text	000000d0 .hidden __floatsidf
00050938 g     F .text	00000078 alt_io_redirect
0004d76c g     F .text	000000e0 .hidden __ltdf2
0005142c g       *ABS*	00000000 __DTOR_END__
000423a4 g     F .text	00000014 puts
000494ec g     F .text	00000074 __fpclassifyd
00048d30 g     F .text	000000a4 __ratio
0004accc g     F .text	00000024 __vfiprintf_internal
0004fce8 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00042284 g     F .text	0000002c _printf_r
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0004c3b4 g     F .text	00000008 .hidden __udivsi3
0004ee94 g     F .text	000000ac isatty
00051ca8 g     O .rodata	000000c8 __mprec_tens
000470a0 g     F .text	0000000c __locale_charset
000554b4 g     O .bss	00000004 __malloc_top_pad
00041828 g     F .text	00000264 UsbGetConfigDesc2
00053978 g     O .rwdata	00000004 __mb_cur_max
000470d0 g     F .text	0000000c _localeconv_r
0004832c g     F .text	0000003c __i2b
00046a10 g     F .text	000004a4 __sfvwrite_r
00049560 g     F .text	00000054 _sbrk_r
0004b270 g     F .text	0000005c _read_r
00053998 g     O .rwdata	00000004 alt_max_fd
0004ae78 g     F .text	00000100 _fclose_r
00046218 g     F .text	00000030 fflush
000554b0 g     O .bss	00000004 __malloc_max_sbrked_mem
0004c3ec g     F .text	0000089c .hidden __adddf3
00048ad8 g     F .text	0000011c __b2d
0004bc7c g     F .text	0000061c .hidden __umoddi3
0004f074 g     F .text	000000dc lseek
00053970 g     O .rwdata	00000004 _global_impure_ptr
00048f4c g     F .text	000005a0 _realloc_r
000555fc g       *ABS*	00000000 __bss_end
00050768 g     F .text	000000f0 alt_iic_isr_register
00050cec g     F .text	00000104 alt_tick
0004b63c g     F .text	00000640 .hidden __udivdi3
0004af8c g     F .text	00000184 _fputwc_r
00051c80 g     O .rodata	00000028 __mprec_bigtens
00048110 g     F .text	00000104 __s2b
0004eae0 g     F .text	000000a4 .hidden __floatunsidf
00048880 g     F .text	00000060 __mcmp
00041288 g     F .text	000000fc UsbSetAddress
000465cc g     F .text	00000018 __fp_lock_all
0005071c g     F .text	0000004c alt_ic_irq_enabled
00050c54 g     F .text	00000098 alt_alarm_stop
000554c8 g     O .bss	00000004 alt_irq_active
000400ec g     F .exceptions	000000d0 alt_irq_handler
00052768 g     O .rwdata	00000028 alt_dev_null
000503a4 g     F .text	0000001c alt_dcache_flush_all
00048214 g     F .text	00000068 __hi0bits
000402f4 g     F .text	00000094 IO_read
0004e988 g     F .text	00000088 .hidden __fixdfsi
000539b0 g       *ABS*	00000000 __ram_rwdata_end
00053990 g     O .rwdata	00000008 alt_dev_list
0004f50c g     F .text	00000100 write
00051ec4 g       *ABS*	00000000 __ram_rodata_end
0004ed8c g     F .text	000000b8 fstat
0004d76c g     F .text	000000e0 .hidden __ledf2
00042208 g     F .text	0000007c UsbPrintMem
000485f8 g     F .text	00000140 __pow5mult
000498a8 g     F .text	00001424 ___vfiprintf_internal_r
000554a8 g     O .bss	00000004 __nlocale_changed
0004c3bc g     F .text	00000008 .hidden __umodsi3
000555fc g       *ABS*	00000000 end
0004f824 g     F .text	000000c4 altera_avalon_jtag_uart_init
0005142c g       *ABS*	00000000 __CTOR_LIST__
00080000 g       *ABS*	00000000 __alt_stack_pointer
0004eb84 g     F .text	00000064 .hidden __clzsi2
0004fef4 g     F .text	00000218 altera_avalon_jtag_uart_write
000465bc g     F .text	00000004 __sfp_lock_acquire
00047a64 g     F .text	000000e8 memchr
00042450 g     F .text	000020fc ___vfprintf_internal_r
00041b88 g     F .text	000000fc UsbClassRequest
00046720 g     F .text	000002f0 _free_r
000470ac g     F .text	00000010 __locale_mb_cur_max
00051264 g     F .text	00000194 __call_exitprocs
000554a4 g     O .bss	00000004 __mlocale_changed
0005397c g     O .rwdata	00000004 __malloc_sbrk_base
000401bc g     F .text	0000003c _start
000554cc g     O .bss	00000004 _alt_tick_rate
00048738 g     F .text	00000148 __lshift
000554d0 g     O .bss	00000004 _alt_nticks
0004f258 g     F .text	00000104 read
0004f678 g     F .text	00000048 alt_sys_init
00051150 g     F .text	00000114 __register_exitproc
00048368 g     F .text	00000290 __multiply
0004fb94 g     F .text	00000068 altera_avalon_jtag_uart_close
0004c3c4 g     F .text	00000028 .hidden __mulsi3
00051ec4 g       *ABS*	00000000 __ram_rwdata_start
0005142c g       *ABS*	00000000 __ram_rodata_start
000554d4 g     O .bss	00000028 __malloc_current_mallinfo
00048bf4 g     F .text	0000013c __d2b
00041384 g     F .text	00000144 UsbGetDeviceDesc1
0004f6c0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00050fb4 g     F .text	000000d4 alt_get_fd
0005024c g     F .text	00000158 alt_busy_sleep
0004ad4c g     F .text	00000054 _close_r
000510d4 g     F .text	0000007c memcmp
0004f780 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000555fc g       *ABS*	00000000 __alt_stack_base
0004f7d0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00044570 g     F .text	00000130 __swsetup_r
0004cc88 g     F .text	00000980 .hidden __divdf3
0004647c g     F .text	00000118 __sfp
00048e48 g     F .text	00000078 __copybits
00052360 g     O .rwdata	00000408 __malloc_av_
000465c8 g     F .text	00000004 __sinit_lock_release
0004d84c g     F .text	0000086c .hidden __muldf3
000495b4 g     F .text	00000054 __sread
00042104 g     F .text	00000084 UsbWaitTDListDone
00050ea0 g     F .text	00000114 alt_find_file
00050410 g     F .text	000000a4 alt_dev_llist_insert
0004f1c8 g     F .text	00000020 __malloc_lock
0004f3dc g     F .text	000000b0 sbrk
00045ff0 g     F .text	00000228 _fflush_r
0004ada0 g     F .text	000000d8 _calloc_r
0005549c g       *ABS*	00000000 __bss_start
00047de0 g     F .text	00000124 memset
00040388 g     F .text	00000dac main
000554c4 g     O .bss	00000004 alt_envp
000554ac g     O .bss	00000004 __malloc_max_total_mem
0004f720 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00041a8c g     F .text	000000fc UsbSetConfig
0004b420 g     F .text	0000001c __swbuf
000496e8 g     F .text	00000008 __sclose
00080000 g       *ABS*	00000000 __alt_heap_limit
0004af78 g     F .text	00000014 fclose
000448c8 g     F .text	00001728 _dtoa_r
000472bc g     F .text	000007a8 _malloc_r
0004b5b0 g     F .text	00000030 __ascii_wctomb
0005399c g     O .rwdata	00000004 alt_errno
00046eb4 g     F .text	000000b8 _fwalk
0004c304 g     F .text	00000054 .hidden __divsi3
000465fc g     F .text	00000124 _malloc_trim_r
00041c84 g     F .text	00000144 UsbGetHidDesc
0005142c g       *ABS*	00000000 __CTOR_END__
000496f0 g     F .text	000000a4 strcmp
0005142c g       *ABS*	00000000 __flash_rodata_start
0005142c g       *ABS*	00000000 __DTOR_LIST__
0004d608 g     F .text	00000084 .hidden __nedf2
00041188 g     F .text	00000050 UsbRead
0004f644 g     F .text	00000034 alt_irq_init
0004f35c g     F .text	00000080 alt_release_fd
00051d90 g     O .rodata	00000100 .hidden __clz_tab
000554a0 g     O .bss	00000004 _PathLocale
00051088 g     F .text	00000014 atexit
0004acf0 g     F .text	0000005c _write_r
000470dc g     F .text	0000001c setlocale
00053974 g     O .rwdata	00000004 _impure_ptr
000554bc g     O .bss	00000004 alt_argc
00050510 g     F .text	0000005c _do_dtors
000470c8 g     F .text	00000008 __locale_cjk_lang
00040020 g       .exceptions	00000000 alt_irq_entry
00048a78 g     F .text	00000060 __ulp
000465e4 g     F .text	00000018 __fp_unlock_all
00053988 g     O .rwdata	00000008 alt_fs_list
00041dc8 g     F .text	0000033c UsbGetReportDesc
00040020 g       *ABS*	00000000 __ram_exceptions_start
000470f8 g     F .text	0000000c localeconv
00050588 g     F .text	00000050 alt_ic_isr_register
000539b0 g       *ABS*	00000000 _edata
000555fc g       *ABS*	00000000 _end
00041134 g     F .text	00000054 UsbWrite
000401bc g       *ABS*	00000000 __ram_exceptions_end
0004fbfc g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00050678 g     F .text	000000a4 alt_ic_irq_disable
00049610 g     F .text	0000007c __swrite
00053980 g     O .rwdata	00000004 __malloc_trim_threshold
00050df0 g     F .text	00000020 altera_nios2_qsys_irq_init
000470bc g     F .text	0000000c __locale_msgcharset
0005109c g     F .text	00000038 exit
00046f6c g     F .text	000000b8 _fwalk_reent
000488e0 g     F .text	00000198 __mdiff
0004c358 g     F .text	0000005c .hidden __modsi3
00080000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
000465c0 g     F .text	00000004 __sfp_lock_release
0004025c g     F .text	00000098 IO_write
000513f8 g     F .text	00000034 _exit
0005010c g     F .text	00000140 alt_alarm_start
00047104 g     F .text	000001b8 __smakebuf_r
000423b8 g     F .text	00000098 strlen
00050af4 g     F .text	00000160 open
0004d68c g     F .text	000000e0 .hidden __gedf2
00053984 g     O .rwdata	00000004 __wctomb
00049890 g     F .text	00000018 __sprint_r
0005056c g     F .text	0000001c alt_icache_flush_all
000539a4 g     O .rwdata	00000004 alt_priority_mask
000505d8 g     F .text	000000a0 alt_ic_irq_enable
0004454c g     F .text	00000024 __vfprintf_internal
0004b5e0 g     F .text	0000005c _wctomb_r
0004e0b8 g     F .text	000008d0 .hidden __subdf3
0004827c g     F .text	000000b0 __lo0bits
0004169c g     F .text	0000018c UsbGetConfigDesc1
000539a8 g     O .rwdata	00000008 alt_alarm_list
000504b4 g     F .text	0000005c _do_ctors
000411d8 g     F .text	000000b0 UsbSoftReset
0004b4d8 g     F .text	000000d8 wcrtomb
0004ec38 g     F .text	000000d8 close
000414c8 g     F .text	000001d4 UsbGetDeviceDesc2
0004efa4 g     F .text	00000080 alt_load
0004b110 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
000465c4 g     F .text	00000004 __sinit_lock_acquire
00047fd4 g     F .text	0000013c __multadd
00047fac g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08406f14 	ori	at,at,444
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400ec0 	call	400ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000306 	br	40098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)

00040094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   40094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   40098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   4009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400e8:	ef80083a 	eret

000400ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400ec:	defff904 	addi	sp,sp,-28
   400f0:	dfc00615 	stw	ra,24(sp)
   400f4:	df000515 	stw	fp,20(sp)
   400f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   400fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40100:	0005313a 	rdctl	r2,ipending
   40104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40114:	00800044 	movi	r2,1
   40118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	e0fffb17 	ldw	r3,-20(fp)
   40120:	e0bffc17 	ldw	r2,-16(fp)
   40124:	1884703a 	and	r2,r3,r2
   40128:	10001426 	beq	r2,zero,4017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4012c:	00800174 	movhi	r2,5
   40130:	10953f04 	addi	r2,r2,21756
   40134:	e0fffd17 	ldw	r3,-12(fp)
   40138:	180690fa 	slli	r3,r3,3
   4013c:	10c5883a 	add	r2,r2,r3
   40140:	10c00017 	ldw	r3,0(r2)
   40144:	00800174 	movhi	r2,5
   40148:	10953f04 	addi	r2,r2,21756
   4014c:	e13ffd17 	ldw	r4,-12(fp)
   40150:	200890fa 	slli	r4,r4,3
   40154:	1105883a 	add	r2,r2,r4
   40158:	10800104 	addi	r2,r2,4
   4015c:	10800017 	ldw	r2,0(r2)
   40160:	1009883a 	mov	r4,r2
   40164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4016c:	0005313a 	rdctl	r2,ipending
   40170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40174:	e0bfff17 	ldw	r2,-4(fp)
   40178:	00000706 	br	40198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4017c:	e0bffc17 	ldw	r2,-16(fp)
   40180:	1085883a 	add	r2,r2,r2
   40184:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40188:	e0bffd17 	ldw	r2,-12(fp)
   4018c:	10800044 	addi	r2,r2,1
   40190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   40194:	003fe106 	br	4011c <__alt_data_end+0xfffc011c>

    active = alt_irq_pending ();
   40198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   4019c:	e0bffb17 	ldw	r2,-20(fp)
   401a0:	103fdb1e 	bne	r2,zero,40110 <__alt_data_end+0xfffc0110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401a4:	0001883a 	nop
}
   401a8:	e037883a 	mov	sp,fp
   401ac:	dfc00117 	ldw	ra,4(sp)
   401b0:	df000017 	ldw	fp,0(sp)
   401b4:	dec00204 	addi	sp,sp,8
   401b8:	f800283a 	ret

Disassembly of section .text:

000401bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   401bc:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
   401c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   401c4:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401c8:	d6ae5c14 	ori	gp,gp,47472
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401cc:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   401d0:	10952714 	ori	r2,r2,21660

    movhi r3, %hi(__bss_end)
   401d4:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   401d8:	18d57f14 	ori	r3,r3,22012

    beq r2, r3, 1f
   401dc:	10c00326 	beq	r2,r3,401ec <_start+0x30>

0:
    stw zero, (r2)
   401e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401e8:	10fffd36 	bltu	r2,r3,401e0 <__alt_data_end+0xfffc01e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401ec:	004efa40 	call	4efa4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401f0:	004f1500 	call	4f150 <alt_main>

000401f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401f4:	003fff06 	br	401f4 <__alt_data_end+0xfffc01f4>

000401f8 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
   401f8:	deffff04 	addi	sp,sp,-4
   401fc:	df000015 	stw	fp,0(sp)
   40200:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 1;
   40204:	00800234 	movhi	r2,8
   40208:	10841804 	addi	r2,r2,4192
   4020c:	00c00044 	movi	r3,1
   40210:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
   40214:	00800234 	movhi	r2,8
   40218:	10840c04 	addi	r2,r2,4144
   4021c:	00c00044 	movi	r3,1
   40220:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
   40224:	00800234 	movhi	r2,8
   40228:	10840804 	addi	r2,r2,4128
   4022c:	00c00044 	movi	r3,1
   40230:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
   40234:	00800234 	movhi	r2,8
   40238:	10841404 	addi	r2,r2,4176
   4023c:	10000015 	stw	zero,0(r2)
//	printf("before init otg_hpi_data = %x\n", *otg_hpi_data);
	*otg_hpi_data = 0;
   40240:	00800234 	movhi	r2,8
   40244:	10841004 	addi	r2,r2,4160
   40248:	10000015 	stw	zero,0(r2)
//	printf("after  init otg_hpi_data = %x\n", *otg_hpi_data);
}
   4024c:	e037883a 	mov	sp,fp
   40250:	df000017 	ldw	fp,0(sp)
   40254:	dec00104 	addi	sp,sp,4
   40258:	f800283a 	ret

0004025c <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
   4025c:	defffd04 	addi	sp,sp,-12
   40260:	df000215 	stw	fp,8(sp)
   40264:	df000204 	addi	fp,sp,8
   40268:	2007883a 	mov	r3,r4
   4026c:	2805883a 	mov	r2,r5
   40270:	e0fffe05 	stb	r3,-8(fp)
   40274:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_r 		 = 1;
   40278:	00800234 	movhi	r2,8
   4027c:	10840c04 	addi	r2,r2,4144
   40280:	00c00044 	movi	r3,1
   40284:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = Address & 0x3;
   40288:	00800234 	movhi	r2,8
   4028c:	10841404 	addi	r2,r2,4176
   40290:	e0fffe03 	ldbu	r3,-8(fp)
   40294:	18c000cc 	andi	r3,r3,3
   40298:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data	 = Data;
   4029c:	00800234 	movhi	r2,8
   402a0:	10841004 	addi	r2,r2,4160
   402a4:	e0ffff0b 	ldhu	r3,-4(fp)
   402a8:	10c00015 	stw	r3,0(r2)
//	printf("Data = %x\n", Data & 0xffff);
//	printf("Address = %x\n", Address & 0x3);
	*otg_hpi_cs 	 = 0;
   402ac:	00800234 	movhi	r2,8
   402b0:	10841804 	addi	r2,r2,4192
   402b4:	10000005 	stb	zero,0(r2)

	*otg_hpi_w		 = 0;
   402b8:	00800234 	movhi	r2,8
   402bc:	10840804 	addi	r2,r2,4128
   402c0:	10000005 	stb	zero,0(r2)

//	printf("otg_hpi_data = %x\n", *otg_hpi_data & 0xffff);
//	printf("otg_hpi_address = %x\n", *otg_hpi_address & 0x3);

	*otg_hpi_w 		 = 1;
   402c4:	00800234 	movhi	r2,8
   402c8:	10840804 	addi	r2,r2,4128
   402cc:	00c00044 	movi	r3,1
   402d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs 	 = 1;
   402d4:	00800234 	movhi	r2,8
   402d8:	10841804 	addi	r2,r2,4192
   402dc:	00c00044 	movi	r3,1
   402e0:	10c00005 	stb	r3,0(r2)
}
   402e4:	e037883a 	mov	sp,fp
   402e8:	df000017 	ldw	fp,0(sp)
   402ec:	dec00104 	addi	sp,sp,4
   402f0:	f800283a 	ret

000402f4 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
   402f4:	defffd04 	addi	sp,sp,-12
   402f8:	df000215 	stw	fp,8(sp)
   402fc:	df000204 	addi	fp,sp,8
   40300:	2005883a 	mov	r2,r4
   40304:	e0bfff05 	stb	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_w 		 = 1;
   40308:	00800234 	movhi	r2,8
   4030c:	10840804 	addi	r2,r2,4128
   40310:	00c00044 	movi	r3,1
   40314:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = Address & 0x3;
   40318:	00800234 	movhi	r2,8
   4031c:	10841404 	addi	r2,r2,4176
   40320:	e0ffff03 	ldbu	r3,-4(fp)
   40324:	18c000cc 	andi	r3,r3,3
   40328:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs 	 = 0;
   4032c:	00800234 	movhi	r2,8
   40330:	10841804 	addi	r2,r2,4192
   40334:	10000005 	stb	zero,0(r2)
	*otg_hpi_r		 = 0;
   40338:	00800234 	movhi	r2,8
   4033c:	10840c04 	addi	r2,r2,4144
   40340:	10000005 	stb	zero,0(r2)

//	printf("IO_read Address = %x\n", Address & 0x3);
//	printf("IO_read otg_hpi_address = %x\n", *otg_hpi_address & 0x3);
//	printf("IO_read otg_hpi_data = %x\n", *otg_hpi_data & 0xffff);

	temp 	 		 = *otg_hpi_data & 0xffff;
   40344:	00800234 	movhi	r2,8
   40348:	10841004 	addi	r2,r2,4160
   4034c:	10800017 	ldw	r2,0(r2)
   40350:	e0bffe0d 	sth	r2,-8(fp)

	*otg_hpi_r 	 	 = 1;
   40354:	00800234 	movhi	r2,8
   40358:	10840c04 	addi	r2,r2,4144
   4035c:	00c00044 	movi	r3,1
   40360:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs 	 = 1;
   40364:	00800234 	movhi	r2,8
   40368:	10841804 	addi	r2,r2,4192
   4036c:	00c00044 	movi	r3,1
   40370:	10c00005 	stb	r3,0(r2)
	return temp;
   40374:	e0bffe0b 	ldhu	r2,-8(fp)
}
   40378:	e037883a 	mov	sp,fp
   4037c:	df000017 	ldw	fp,0(sp)
   40380:	dec00104 	addi	sp,sp,4
   40384:	f800283a 	ret

00040388 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
   40388:	defff904 	addi	sp,sp,-28
   4038c:	dfc00615 	stw	ra,24(sp)
   40390:	df000515 	stw	fp,20(sp)
   40394:	df000504 	addi	fp,sp,20
	IO_init();
   40398:	00401f80 	call	401f8 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
   4039c:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
   403a0:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
   403a4:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
   403a8:	01000174 	movhi	r4,5
   403ac:	21050b04 	addi	r4,r4,5164
   403b0:	00423a40 	call	423a4 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
   403b4:	00411d80 	call	411d8 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
   403b8:	01005104 	movi	r4,324
   403bc:	000b883a 	mov	r5,zero
   403c0:	00411340 	call	41134 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
   403c4:	01302414 	movui	r4,49296
   403c8:	017fffd4 	movui	r5,65535
   403cc:	00411340 	call	41134 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
   403d0:	01006d04 	movi	r4,436
   403d4:	01409604 	movi	r5,600
   403d8:	00411340 	call	41134 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
   403dc:	00811004 	movi	r2,1088
   403e0:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
   403e4:	e0bffb0b 	ldhu	r2,-20(fp)
   403e8:	01005084 	movi	r4,322
   403ec:	100b883a 	mov	r5,r2
   403f0:	00411340 	call	41134 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
   403f4:	00808404 	movi	r2,528
   403f8:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
   403fc:	e0bffe0b 	ldhu	r2,-8(fp)
   40400:	01302314 	movui	r4,49292
   40404:	100b883a 	mov	r5,r2
   40408:	00411340 	call	41134 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
   4040c:	01007104 	movi	r4,452
   40410:	000b883a 	mov	r5,zero
   40414:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
   40418:	01007184 	movi	r4,454
   4041c:	000b883a 	mov	r5,zero
   40420:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
   40424:	01007204 	movi	r4,456
   40428:	000b883a 	mov	r5,zero
   4042c:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
   40430:	01007284 	movi	r4,458
   40434:	000b883a 	mov	r5,zero
   40438:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
   4043c:	01007304 	movi	r4,460
   40440:	000b883a 	mov	r5,zero
   40444:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
   40448:	01007384 	movi	r4,462
   4044c:	000b883a 	mov	r5,zero
   40450:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
   40454:	01007404 	movi	r4,464
   40458:	000b883a 	mov	r5,zero
   4045c:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
   40460:	01007484 	movi	r4,466
   40464:	000b883a 	mov	r5,zero
   40468:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
   4046c:	01007504 	movi	r4,468
   40470:	000b883a 	mov	r5,zero
   40474:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
   40478:	01007584 	movi	r4,470
   4047c:	000b883a 	mov	r5,zero
   40480:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
   40484:	01007604 	movi	r4,472
   40488:	000b883a 	mov	r5,zero
   4048c:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
   40490:	01007684 	movi	r4,474
   40494:	000b883a 	mov	r5,zero
   40498:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
   4049c:	01007704 	movi	r4,476
   404a0:	000b883a 	mov	r5,zero
   404a4:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
   404a8:	01007784 	movi	r4,478
   404ac:	000b883a 	mov	r5,zero
   404b0:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
   404b4:	01007084 	movi	r4,450
   404b8:	01401c84 	movi	r5,114
   404bc:	00411340 	call	41134 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
   404c0:	01000044 	movi	r4,1
   404c4:	01738054 	movui	r5,52737
   404c8:	004025c0 	call	4025c <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
   404cc:	00000706 	br	404ec <main+0x164>
	{
		printf("%x\n",IO_read(HPI_STATUS) );
   404d0:	010000c4 	movi	r4,3
   404d4:	00402f40 	call	402f4 <IO_read>
   404d8:	10bfffcc 	andi	r2,r2,65535
   404dc:	01000174 	movhi	r4,5
   404e0:	21051104 	addi	r4,r4,5188
   404e4:	100b883a 	mov	r5,r2
   404e8:	00422b00 	call	422b0 <printf>
	UsbWrite(COMM_R12,0x0000);  //r1
	UsbWrite(COMM_R13,0x0000);  //r1
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
   404ec:	010000c4 	movi	r4,3
   404f0:	00402f40 	call	402f4 <IO_read>
   404f4:	10bfffcc 	andi	r2,r2,65535
   404f8:	103ff526 	beq	r2,zero,404d0 <__alt_data_end+0xfffc04d0>
	{
		printf("%x\n",IO_read(HPI_STATUS) );
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
   404fc:	0001883a 	nop
   40500:	01000044 	movi	r4,1
   40504:	00402f40 	call	402f4 <IO_read>
   40508:	10bfffcc 	andi	r2,r2,65535
   4050c:	1083fb58 	cmpnei	r2,r2,4077
   40510:	10000826 	beq	r2,zero,40534 <main+0x1ac>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
   40514:	01000044 	movi	r4,1
   40518:	00402f40 	call	402f4 <IO_read>
   4051c:	10bfffcc 	andi	r2,r2,65535
   40520:	01000174 	movhi	r4,5
   40524:	21051204 	addi	r4,r4,5192
   40528:	100b883a 	mov	r5,r2
   4052c:	00422b00 	call	422b0 <printf>
		goto USB_HOT_PLUG;
   40530:	003fa006 	br	403b4 <__alt_data_end+0xfffc03b4>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
   40534:	01000174 	movhi	r4,5
   40538:	21051b04 	addi	r4,r4,5228
   4053c:	00422b00 	call	422b0 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
   40540:	01007084 	movi	r4,450
   40544:	01401d04 	movi	r5,116
   40548:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
   4054c:	01007104 	movi	r4,452
   40550:	01400f04 	movi	r5,60
   40554:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
   40558:	01007184 	movi	r4,454
   4055c:	000b883a 	mov	r5,zero
   40560:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
   40564:	01007204 	movi	r4,456
   40568:	000b883a 	mov	r5,zero
   4056c:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
   40570:	01007284 	movi	r4,458
   40574:	000b883a 	mov	r5,zero
   40578:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
   4057c:	01007304 	movi	r4,460
   40580:	000b883a 	mov	r5,zero
   40584:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
   40588:	01007384 	movi	r4,462
   4058c:	000b883a 	mov	r5,zero
   40590:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
   40594:	01007404 	movi	r4,464
   40598:	000b883a 	mov	r5,zero
   4059c:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
   405a0:	01007484 	movi	r4,466
   405a4:	000b883a 	mov	r5,zero
   405a8:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
   405ac:	01007504 	movi	r4,468
   405b0:	000b883a 	mov	r5,zero
   405b4:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
   405b8:	01007584 	movi	r4,470
   405bc:	000b883a 	mov	r5,zero
   405c0:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
   405c4:	01007604 	movi	r4,472
   405c8:	000b883a 	mov	r5,zero
   405cc:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
   405d0:	01007684 	movi	r4,474
   405d4:	000b883a 	mov	r5,zero
   405d8:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
   405dc:	01007704 	movi	r4,476
   405e0:	000b883a 	mov	r5,zero
   405e4:	00411340 	call	41134 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
   405e8:	01007784 	movi	r4,478
   405ec:	000b883a 	mov	r5,zero
   405f0:	00411340 	call	41134 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
   405f4:	01000044 	movi	r4,1
   405f8:	01738054 	movui	r5,52737
   405fc:	004025c0 	call	4025c <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
   40600:	0001883a 	nop
   40604:	01000044 	movi	r4,1
   40608:	00402f40 	call	402f4 <IO_read>
   4060c:	10bfffcc 	andi	r2,r2,65535
   40610:	1083fb58 	cmpnei	r2,r2,4077
   40614:	10000826 	beq	r2,zero,40638 <main+0x2b0>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
   40618:	01000044 	movi	r4,1
   4061c:	00402f40 	call	402f4 <IO_read>
   40620:	10bfffcc 	andi	r2,r2,65535
   40624:	01000174 	movhi	r4,5
   40628:	21051204 	addi	r4,r4,5192
   4062c:	100b883a 	mov	r5,r2
   40630:	00422b00 	call	422b0 <printf>
		goto USB_HOT_PLUG;
   40634:	003f5f06 	br	403b4 <__alt_data_end+0xfffc03b4>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
   40638:	00b02284 	movi	r2,-16246
   4063c:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
   40640:	008c0004 	movi	r2,12288
   40644:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
   40648:	00880004 	movi	r2,8192
   4064c:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
   40650:	d0a6cb0b 	ldhu	r2,-25812(gp)
   40654:	10bfffcc 	andi	r2,r2,65535
   40658:	1009883a 	mov	r4,r2
   4065c:	00411880 	call	41188 <UsbRead>
   40660:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
   40664:	d0a6cb8b 	ldhu	r2,-25810(gp)
   40668:	e0fffb0b 	ldhu	r3,-20(fp)
   4066c:	1884703a 	and	r2,r3,r2
   40670:	10bfffcc 	andi	r2,r2,65535
   40674:	1000341e 	bne	r2,zero,40748 <main+0x3c0>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
   40678:	e03ffbc5 	stb	zero,-17(fp)
   4067c:	00001006 	br	406c0 <main+0x338>
		{
			usleep(5*1000);
   40680:	0104e204 	movi	r4,5000
   40684:	004f48c0 	call	4f48c <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
   40688:	d0a6cb0b 	ldhu	r2,-25812(gp)
   4068c:	10bfffcc 	andi	r2,r2,65535
   40690:	1009883a 	mov	r4,r2
   40694:	00411880 	call	41188 <UsbRead>
   40698:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
   4069c:	d0a6cb8b 	ldhu	r2,-25810(gp)
   406a0:	e0fffb0b 	ldhu	r3,-20(fp)
   406a4:	1884703a 	and	r2,r3,r2
   406a8:	10bfffcc 	andi	r2,r2,65535
   406ac:	10000126 	beq	r2,zero,406b4 <main+0x32c>
   406b0:	00000606 	br	406cc <main+0x344>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
   406b4:	e0bffbc3 	ldbu	r2,-17(fp)
   406b8:	10800044 	addi	r2,r2,1
   406bc:	e0bffbc5 	stb	r2,-17(fp)
   406c0:	e0bffbc3 	ldbu	r2,-17(fp)
   406c4:	10800170 	cmpltui	r2,r2,5
   406c8:	103fed1e 	bne	r2,zero,40680 <__alt_data_end+0xfffc0680>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
   406cc:	d0a6cb8b 	ldhu	r2,-25810(gp)
   406d0:	e0fffb0b 	ldhu	r3,-20(fp)
   406d4:	1884703a 	and	r2,r3,r2
   406d8:	10bfffcc 	andi	r2,r2,65535
   406dc:	1000261e 	bne	r2,zero,40778 <main+0x3f0>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
   406e0:	01000174 	movhi	r4,5
   406e4:	21051f04 	addi	r4,r4,5244
   406e8:	00423a40 	call	423a4 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
   406ec:	01000174 	movhi	r4,5
   406f0:	21052904 	addi	r4,r4,5284
   406f4:	00423a40 	call	423a4 <puts>
			while (!(usb_ctl_val & no_device))
   406f8:	00000d06 	br	40730 <main+0x3a8>
			{
				usb_ctl_val = UsbRead(ctl_reg);
   406fc:	d0a6cb0b 	ldhu	r2,-25812(gp)
   40700:	10bfffcc 	andi	r2,r2,65535
   40704:	1009883a 	mov	r4,r2
   40708:	00411880 	call	41188 <UsbRead>
   4070c:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
   40710:	d0a6cb8b 	ldhu	r2,-25810(gp)
   40714:	e0fffb0b 	ldhu	r3,-20(fp)
   40718:	1884703a 	and	r2,r3,r2
   4071c:	10bfffcc 	andi	r2,r2,65535
   40720:	10000126 	beq	r2,zero,40728 <main+0x3a0>
					goto USB_HOT_PLUG;
   40724:	003f2306 	br	403b4 <__alt_data_end+0xfffc03b4>

				usleep(2000);
   40728:	0101f404 	movi	r4,2000
   4072c:	004f48c0 	call	4f48c <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
   40730:	d0a6cb8b 	ldhu	r2,-25810(gp)
   40734:	e0fffb0b 	ldhu	r3,-20(fp)
   40738:	1884703a 	and	r2,r3,r2
   4073c:	10bfffcc 	andi	r2,r2,65535
   40740:	103fee26 	beq	r2,zero,406fc <__alt_data_end+0xfffc06fc>
   40744:	00000c06 	br	40778 <main+0x3f0>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
   40748:	e0fffb0b 	ldhu	r3,-20(fp)
   4074c:	e0bffc0b 	ldhu	r2,-16(fp)
   40750:	1884703a 	and	r2,r3,r2
   40754:	10bfffcc 	andi	r2,r2,65535
   40758:	10000426 	beq	r2,zero,4076c <main+0x3e4>
		{
			printf("[INFO]: full speed device\n");
   4075c:	01000174 	movhi	r4,5
   40760:	21053504 	addi	r4,r4,5332
   40764:	00423a40 	call	423a4 <puts>
   40768:	00000306 	br	40778 <main+0x3f0>
		}
		else
		{
			printf("[INFO]: low speed device\n");
   4076c:	01000174 	movhi	r4,5
   40770:	21053c04 	addi	r4,r4,5360
   40774:	00423a40 	call	423a4 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
   40778:	00412880 	call	41288 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   4077c:	00000a06 	br	407a8 <main+0x420>
	{
		printf("routine status is %x\n",IO_read(HPI_STATUS) );
   40780:	010000c4 	movi	r4,3
   40784:	00402f40 	call	402f4 <IO_read>
   40788:	10bfffcc 	andi	r2,r2,65535
   4078c:	01000174 	movhi	r4,5
   40790:	21054304 	addi	r4,r4,5388
   40794:	100b883a 	mov	r5,r2
   40798:	00422b00 	call	422b0 <printf>
		UsbSetAddress();
   4079c:	00412880 	call	41288 <UsbSetAddress>
		usleep(10*1000);
   407a0:	0109c404 	movi	r4,10000
   407a4:	004f48c0 	call	4f48c <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   407a8:	010000c4 	movi	r4,3
   407ac:	00402f40 	call	402f4 <IO_read>
   407b0:	10bfffcc 	andi	r2,r2,65535
   407b4:	1080040c 	andi	r2,r2,16
   407b8:	103ff126 	beq	r2,zero,40780 <__alt_data_end+0xfffc0780>
		printf("routine status is %x\n",IO_read(HPI_STATUS) );
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
   407bc:	00421040 	call	42104 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
   407c0:	01000084 	movi	r4,2
   407c4:	01414184 	movi	r5,1286
   407c8:	004025c0 	call	4025c <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
   407cc:	0009883a 	mov	r4,zero
   407d0:	00402f40 	call	402f4 <IO_read>
   407d4:	10bfffcc 	andi	r2,r2,65535
   407d8:	01000174 	movhi	r4,5
   407dc:	21054904 	addi	r4,r4,5412
   407e0:	100b883a 	mov	r5,r2
   407e4:	00422b00 	call	422b0 <printf>

	IO_write(HPI_ADDR,0x0508); // n
   407e8:	01000084 	movi	r4,2
   407ec:	01414204 	movi	r5,1288
   407f0:	004025c0 	call	4025c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
   407f4:	0009883a 	mov	r4,zero
   407f8:	00402f40 	call	402f4 <IO_read>
   407fc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
   40800:	e0bffb0b 	ldhu	r2,-20(fp)
   40804:	01000174 	movhi	r4,5
   40808:	21055404 	addi	r4,r4,5456
   4080c:	100b883a 	mov	r5,r2
   40810:	00422b00 	call	422b0 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
   40814:	e0bffb0b 	ldhu	r2,-20(fp)
   40818:	108000e0 	cmpeqi	r2,r2,3
   4081c:	1000031e 	bne	r2,zero,4082c <main+0x4a4>
	{
		usb_ctl_val = UsbGetRetryCnt();
   40820:	00421880 	call	42188 <UsbGetRetryCnt>
   40824:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
   40828:	003ee206 	br	403b4 <__alt_data_end+0xfffc03b4>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
   4082c:	01000174 	movhi	r4,5
   40830:	21056004 	addi	r4,r4,5504
   40834:	00423a40 	call	423a4 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
   40838:	00413840 	call	41384 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   4083c:	00000306 	br	4084c <main+0x4c4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
   40840:	00413840 	call	41384 <UsbGetDeviceDesc1>
		usleep(10*1000);
   40844:	0109c404 	movi	r4,10000
   40848:	004f48c0 	call	4f48c <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   4084c:	010000c4 	movi	r4,3
   40850:	00402f40 	call	402f4 <IO_read>
   40854:	10bfffcc 	andi	r2,r2,65535
   40858:	1080040c 	andi	r2,r2,16
   4085c:	103ff826 	beq	r2,zero,40840 <__alt_data_end+0xfffc0840>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
   40860:	00421040 	call	42104 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
   40864:	01000084 	movi	r4,2
   40868:	01414184 	movi	r5,1286
   4086c:	004025c0 	call	4025c <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
   40870:	0009883a 	mov	r4,zero
   40874:	00402f40 	call	402f4 <IO_read>
   40878:	10bfffcc 	andi	r2,r2,65535
   4087c:	01000174 	movhi	r4,5
   40880:	21056f04 	addi	r4,r4,5564
   40884:	100b883a 	mov	r5,r2
   40888:	00422b00 	call	422b0 <printf>

	IO_write(HPI_ADDR,0x0508);
   4088c:	01000084 	movi	r4,2
   40890:	01414204 	movi	r5,1288
   40894:	004025c0 	call	4025c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
   40898:	0009883a 	mov	r4,zero
   4089c:	00402f40 	call	402f4 <IO_read>
   408a0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
   408a4:	e0bffb0b 	ldhu	r2,-20(fp)
   408a8:	01000174 	movhi	r4,5
   408ac:	21057a04 	addi	r4,r4,5608
   408b0:	100b883a 	mov	r5,r2
   408b4:	00422b00 	call	422b0 <printf>
	while (usb_ctl_val != 0x03)
   408b8:	00000206 	br	408c4 <main+0x53c>
	{
		usb_ctl_val = UsbGetRetryCnt();
   408bc:	00421880 	call	42188 <UsbGetRetryCnt>
   408c0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
   408c4:	e0bffb0b 	ldhu	r2,-20(fp)
   408c8:	108000d8 	cmpnei	r2,r2,3
   408cc:	103ffb1e 	bne	r2,zero,408bc <__alt_data_end+0xfffc08bc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
   408d0:	01000174 	movhi	r4,5
   408d4:	21058604 	addi	r4,r4,5656
   408d8:	00423a40 	call	423a4 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
   408dc:	00414c80 	call	414c8 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   408e0:	00000306 	br	408f0 <main+0x568>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
   408e4:	00414c80 	call	414c8 <UsbGetDeviceDesc2>
		usleep(10*1000);
   408e8:	0109c404 	movi	r4,10000
   408ec:	004f48c0 	call	4f48c <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   408f0:	010000c4 	movi	r4,3
   408f4:	00402f40 	call	402f4 <IO_read>
   408f8:	10bfffcc 	andi	r2,r2,65535
   408fc:	1080040c 	andi	r2,r2,16
   40900:	103ff826 	beq	r2,zero,408e4 <__alt_data_end+0xfffc08e4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
   40904:	00421040 	call	42104 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
   40908:	01000084 	movi	r4,2
   4090c:	01414184 	movi	r5,1286
   40910:	004025c0 	call	4025c <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
   40914:	0009883a 	mov	r4,zero
   40918:	00402f40 	call	402f4 <IO_read>
   4091c:	10bfffcc 	andi	r2,r2,65535
   40920:	01000174 	movhi	r4,5
   40924:	21056f04 	addi	r4,r4,5564
   40928:	100b883a 	mov	r5,r2
   4092c:	00422b00 	call	422b0 <printf>

	IO_write(HPI_ADDR,0x0508);
   40930:	01000084 	movi	r4,2
   40934:	01414204 	movi	r5,1288
   40938:	004025c0 	call	4025c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
   4093c:	0009883a 	mov	r4,zero
   40940:	00402f40 	call	402f4 <IO_read>
   40944:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
   40948:	e0bffb0b 	ldhu	r2,-20(fp)
   4094c:	01000174 	movhi	r4,5
   40950:	21057a04 	addi	r4,r4,5608
   40954:	100b883a 	mov	r5,r2
   40958:	00422b00 	call	422b0 <printf>
	while (usb_ctl_val != 0x03)
   4095c:	00000206 	br	40968 <main+0x5e0>
	{
		usb_ctl_val = UsbGetRetryCnt();
   40960:	00421880 	call	42188 <UsbGetRetryCnt>
   40964:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
   40968:	e0bffb0b 	ldhu	r2,-20(fp)
   4096c:	108000d8 	cmpnei	r2,r2,3
   40970:	103ffb1e 	bne	r2,zero,40960 <__alt_data_end+0xfffc0960>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
   40974:	01000174 	movhi	r4,5
   40978:	21059a04 	addi	r4,r4,5736
   4097c:	00423a40 	call	423a4 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
   40980:	004169c0 	call	4169c <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   40984:	00000306 	br	40994 <main+0x60c>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
   40988:	004169c0 	call	4169c <UsbGetConfigDesc1>
		usleep(10*1000);
   4098c:	0109c404 	movi	r4,10000
   40990:	004f48c0 	call	4f48c <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   40994:	010000c4 	movi	r4,3
   40998:	00402f40 	call	402f4 <IO_read>
   4099c:	10bfffcc 	andi	r2,r2,65535
   409a0:	1080040c 	andi	r2,r2,16
   409a4:	103ff826 	beq	r2,zero,40988 <__alt_data_end+0xfffc0988>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
   409a8:	00421040 	call	42104 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
   409ac:	01000084 	movi	r4,2
   409b0:	01414184 	movi	r5,1286
   409b4:	004025c0 	call	4025c <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
   409b8:	0009883a 	mov	r4,zero
   409bc:	00402f40 	call	402f4 <IO_read>
   409c0:	10bfffcc 	andi	r2,r2,65535
   409c4:	01000174 	movhi	r4,5
   409c8:	2105ac04 	addi	r4,r4,5808
   409cc:	100b883a 	mov	r5,r2
   409d0:	00422b00 	call	422b0 <printf>

	IO_write(HPI_ADDR,0x0508);
   409d4:	01000084 	movi	r4,2
   409d8:	01414204 	movi	r5,1288
   409dc:	004025c0 	call	4025c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
   409e0:	0009883a 	mov	r4,zero
   409e4:	00402f40 	call	402f4 <IO_read>
   409e8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
   409ec:	e0bffb0b 	ldhu	r2,-20(fp)
   409f0:	01000174 	movhi	r4,5
   409f4:	2105b704 	addi	r4,r4,5852
   409f8:	100b883a 	mov	r5,r2
   409fc:	00422b00 	call	422b0 <printf>
	while (usb_ctl_val != 0x03)
   40a00:	00000206 	br	40a0c <main+0x684>
	{
		usb_ctl_val = UsbGetRetryCnt();
   40a04:	00421880 	call	42188 <UsbGetRetryCnt>
   40a08:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
   40a0c:	e0bffb0b 	ldhu	r2,-20(fp)
   40a10:	108000d8 	cmpnei	r2,r2,3
   40a14:	103ffb1e 	bne	r2,zero,40a04 <__alt_data_end+0xfffc0a04>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
   40a18:	01000174 	movhi	r4,5
   40a1c:	2105c304 	addi	r4,r4,5900
   40a20:	00423a40 	call	423a4 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
   40a24:	00418280 	call	41828 <UsbGetConfigDesc2>

	usleep(100*1000);
   40a28:	010000b4 	movhi	r4,2
   40a2c:	2121a804 	addi	r4,r4,-31072
   40a30:	004f48c0 	call	4f48c <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   40a34:	00000306 	br	40a44 <main+0x6bc>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
   40a38:	00418280 	call	41828 <UsbGetConfigDesc2>
		usleep(10*1000);
   40a3c:	0109c404 	movi	r4,10000
   40a40:	004f48c0 	call	4f48c <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   40a44:	010000c4 	movi	r4,3
   40a48:	00402f40 	call	402f4 <IO_read>
   40a4c:	10bfffcc 	andi	r2,r2,65535
   40a50:	1080040c 	andi	r2,r2,16
   40a54:	103ff826 	beq	r2,zero,40a38 <__alt_data_end+0xfffc0a38>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
   40a58:	00421040 	call	42104 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
   40a5c:	01000084 	movi	r4,2
   40a60:	01414184 	movi	r5,1286
   40a64:	004025c0 	call	4025c <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
   40a68:	0009883a 	mov	r4,zero
   40a6c:	00402f40 	call	402f4 <IO_read>
   40a70:	10bfffcc 	andi	r2,r2,65535
   40a74:	01000174 	movhi	r4,5
   40a78:	2105d604 	addi	r4,r4,5976
   40a7c:	100b883a 	mov	r5,r2
   40a80:	00422b00 	call	422b0 <printf>

	IO_write(HPI_ADDR,0x0508);
   40a84:	01000084 	movi	r4,2
   40a88:	01414204 	movi	r5,1288
   40a8c:	004025c0 	call	4025c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
   40a90:	0009883a 	mov	r4,zero
   40a94:	00402f40 	call	402f4 <IO_read>
   40a98:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
   40a9c:	e0bffb0b 	ldhu	r2,-20(fp)
   40aa0:	01000174 	movhi	r4,5
   40aa4:	2105e104 	addi	r4,r4,6020
   40aa8:	100b883a 	mov	r5,r2
   40aac:	00422b00 	call	422b0 <printf>
	while (usb_ctl_val != 0x03)
   40ab0:	00000206 	br	40abc <main+0x734>
	{
		usb_ctl_val = UsbGetRetryCnt();
   40ab4:	00421880 	call	42188 <UsbGetRetryCnt>
   40ab8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
   40abc:	e0bffb0b 	ldhu	r2,-20(fp)
   40ac0:	108000d8 	cmpnei	r2,r2,3
   40ac4:	103ffb1e 	bne	r2,zero,40ab4 <__alt_data_end+0xfffc0ab4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
   40ac8:	01000174 	movhi	r4,5
   40acc:	2105ed04 	addi	r4,r4,6068
   40ad0:	00423a40 	call	423a4 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
   40ad4:	01000084 	movi	r4,2
   40ad8:	01415b04 	movi	r5,1388
   40adc:	004025c0 	call	4025c <IO_write>
	code = IO_read(HPI_DATA);
   40ae0:	0009883a 	mov	r4,zero
   40ae4:	00402f40 	call	402f4 <IO_read>
   40ae8:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
   40aec:	e0bffe8b 	ldhu	r2,-6(fp)
   40af0:	108000cc 	andi	r2,r2,3
   40af4:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
   40af8:	e0bffe8b 	ldhu	r2,-6(fp)
   40afc:	01000174 	movhi	r4,5
   40b00:	21060004 	addi	r4,r4,6144
   40b04:	100b883a 	mov	r5,r2
   40b08:	00422b00 	call	422b0 <printf>

	if (code == 0x01)
   40b0c:	e0bffe8b 	ldhu	r2,-6(fp)
   40b10:	10800058 	cmpnei	r2,r2,1
   40b14:	1000041e 	bne	r2,zero,40b28 <main+0x7a0>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
   40b18:	01000174 	movhi	r4,5
   40b1c:	21060304 	addi	r4,r4,6156
   40b20:	00423a40 	call	423a4 <puts>
   40b24:	00000306 	br	40b34 <main+0x7ac>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
   40b28:	01000174 	movhi	r4,5
   40b2c:	21061204 	addi	r4,r4,6216
   40b30:	00423a40 	call	423a4 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
   40b34:	01000084 	movi	r4,2
   40b38:	01415d84 	movi	r5,1398
   40b3c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x073F);
   40b40:	0009883a 	mov	r4,zero
   40b44:	0141cfc4 	movi	r5,1855
   40b48:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x8105);
   40b4c:	0009883a 	mov	r4,zero
   40b50:	01604154 	movui	r5,33029
   40b54:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0003);
   40b58:	0009883a 	mov	r4,zero
   40b5c:	014000c4 	movi	r5,3
   40b60:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008);
   40b64:	0009883a 	mov	r4,zero
   40b68:	01400204 	movi	r5,8
   40b6c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0xAC0A);
   40b70:	0009883a 	mov	r4,zero
   40b74:	016b0294 	movui	r5,44042
   40b78:	004025c0 	call	4025c <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
   40b7c:	01006c04 	movi	r4,432
   40b80:	01415d84 	movi	r5,1398
   40b84:	00411340 	call	41134 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
   40b88:	01000084 	movi	r4,2
   40b8c:	01415f04 	movi	r5,1404
   40b90:	004025c0 	call	4025c <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
   40b94:	0009883a 	mov	r4,zero
   40b98:	00402f40 	call	402f4 <IO_read>
   40b9c:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
   40ba0:	e0bfff03 	ldbu	r2,-4(fp)
   40ba4:	01000174 	movhi	r4,5
   40ba8:	21061b04 	addi	r4,r4,6252
   40bac:	100b883a 	mov	r5,r2
   40bb0:	00422b00 	call	422b0 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
   40bb4:	0041a8c0 	call	41a8c <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   40bb8:	00000306 	br	40bc8 <main+0x840>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
   40bbc:	0041a8c0 	call	41a8c <UsbSetConfig>
		usleep(10*1000);
   40bc0:	0109c404 	movi	r4,10000
   40bc4:	004f48c0 	call	4f48c <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   40bc8:	010000c4 	movi	r4,3
   40bcc:	00402f40 	call	402f4 <IO_read>
   40bd0:	10bfffcc 	andi	r2,r2,65535
   40bd4:	1080040c 	andi	r2,r2,16
   40bd8:	103ff826 	beq	r2,zero,40bbc <__alt_data_end+0xfffc0bbc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
   40bdc:	00421040 	call	42104 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
   40be0:	01000084 	movi	r4,2
   40be4:	01414184 	movi	r5,1286
   40be8:	004025c0 	call	4025c <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
   40bec:	0009883a 	mov	r4,zero
   40bf0:	00402f40 	call	402f4 <IO_read>
   40bf4:	10bfffcc 	andi	r2,r2,65535
   40bf8:	01000174 	movhi	r4,5
   40bfc:	21062504 	addi	r4,r4,6292
   40c00:	100b883a 	mov	r5,r2
   40c04:	00422b00 	call	422b0 <printf>

	IO_write(HPI_ADDR,0x0508);
   40c08:	01000084 	movi	r4,2
   40c0c:	01414204 	movi	r5,1288
   40c10:	004025c0 	call	4025c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
   40c14:	0009883a 	mov	r4,zero
   40c18:	00402f40 	call	402f4 <IO_read>
   40c1c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
   40c20:	e0bffb0b 	ldhu	r2,-20(fp)
   40c24:	01000174 	movhi	r4,5
   40c28:	21063004 	addi	r4,r4,6336
   40c2c:	100b883a 	mov	r5,r2
   40c30:	00422b00 	call	422b0 <printf>
	while (usb_ctl_val != 0x03)
   40c34:	00000206 	br	40c40 <main+0x8b8>
	{
		usb_ctl_val = UsbGetRetryCnt();
   40c38:	00421880 	call	42188 <UsbGetRetryCnt>
   40c3c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
   40c40:	e0bffb0b 	ldhu	r2,-20(fp)
   40c44:	108000d8 	cmpnei	r2,r2,3
   40c48:	103ffb1e 	bne	r2,zero,40c38 <__alt_data_end+0xfffc0c38>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
   40c4c:	01000174 	movhi	r4,5
   40c50:	21063c04 	addi	r4,r4,6384
   40c54:	00423a40 	call	423a4 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
   40c58:	0041b880 	call	41b88 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   40c5c:	00000306 	br	40c6c <main+0x8e4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
   40c60:	0041b880 	call	41b88 <UsbClassRequest>
		usleep(10*1000);
   40c64:	0109c404 	movi	r4,10000
   40c68:	004f48c0 	call	4f48c <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   40c6c:	010000c4 	movi	r4,3
   40c70:	00402f40 	call	402f4 <IO_read>
   40c74:	10bfffcc 	andi	r2,r2,65535
   40c78:	1080040c 	andi	r2,r2,16
   40c7c:	103ff826 	beq	r2,zero,40c60 <__alt_data_end+0xfffc0c60>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
   40c80:	00421040 	call	42104 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
   40c84:	01000084 	movi	r4,2
   40c88:	01414184 	movi	r5,1286
   40c8c:	004025c0 	call	4025c <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
   40c90:	0009883a 	mov	r4,zero
   40c94:	00402f40 	call	402f4 <IO_read>
   40c98:	10bfffcc 	andi	r2,r2,65535
   40c9c:	01000174 	movhi	r4,5
   40ca0:	21064e04 	addi	r4,r4,6456
   40ca4:	100b883a 	mov	r5,r2
   40ca8:	00422b00 	call	422b0 <printf>

	IO_write(HPI_ADDR,0x0508);
   40cac:	01000084 	movi	r4,2
   40cb0:	01414204 	movi	r5,1288
   40cb4:	004025c0 	call	4025c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
   40cb8:	0009883a 	mov	r4,zero
   40cbc:	00402f40 	call	402f4 <IO_read>
   40cc0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
   40cc4:	e0bffb0b 	ldhu	r2,-20(fp)
   40cc8:	01000174 	movhi	r4,5
   40ccc:	21065904 	addi	r4,r4,6500
   40cd0:	100b883a 	mov	r5,r2
   40cd4:	00422b00 	call	422b0 <printf>
	while (usb_ctl_val != 0x03)
   40cd8:	00000206 	br	40ce4 <main+0x95c>
	{
		usb_ctl_val = UsbGetRetryCnt();
   40cdc:	00421880 	call	42188 <UsbGetRetryCnt>
   40ce0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
   40ce4:	e0bffb0b 	ldhu	r2,-20(fp)
   40ce8:	108000d8 	cmpnei	r2,r2,3
   40cec:	103ffb1e 	bne	r2,zero,40cdc <__alt_data_end+0xfffc0cdc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
   40cf0:	01000174 	movhi	r4,5
   40cf4:	21066504 	addi	r4,r4,6548
   40cf8:	00423a40 	call	423a4 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
   40cfc:	0041c840 	call	41c84 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   40d00:	00000306 	br	40d10 <main+0x988>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
   40d04:	0041c840 	call	41c84 <UsbGetHidDesc>
		usleep(10*1000);
   40d08:	0109c404 	movi	r4,10000
   40d0c:	004f48c0 	call	4f48c <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   40d10:	010000c4 	movi	r4,3
   40d14:	00402f40 	call	402f4 <IO_read>
   40d18:	10bfffcc 	andi	r2,r2,65535
   40d1c:	1080040c 	andi	r2,r2,16
   40d20:	103ff826 	beq	r2,zero,40d04 <__alt_data_end+0xfffc0d04>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
   40d24:	00421040 	call	42104 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
   40d28:	01000084 	movi	r4,2
   40d2c:	01414184 	movi	r5,1286
   40d30:	004025c0 	call	4025c <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
   40d34:	0009883a 	mov	r4,zero
   40d38:	00402f40 	call	402f4 <IO_read>
   40d3c:	10bfffcc 	andi	r2,r2,65535
   40d40:	01000174 	movhi	r4,5
   40d44:	21064e04 	addi	r4,r4,6456
   40d48:	100b883a 	mov	r5,r2
   40d4c:	00422b00 	call	422b0 <printf>

	IO_write(HPI_ADDR,0x0508);
   40d50:	01000084 	movi	r4,2
   40d54:	01414204 	movi	r5,1288
   40d58:	004025c0 	call	4025c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
   40d5c:	0009883a 	mov	r4,zero
   40d60:	00402f40 	call	402f4 <IO_read>
   40d64:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
   40d68:	e0bffb0b 	ldhu	r2,-20(fp)
   40d6c:	01000174 	movhi	r4,5
   40d70:	21065904 	addi	r4,r4,6500
   40d74:	100b883a 	mov	r5,r2
   40d78:	00422b00 	call	422b0 <printf>
	while (usb_ctl_val != 0x03)
   40d7c:	00000206 	br	40d88 <main+0xa00>
	{
		usb_ctl_val = UsbGetRetryCnt();
   40d80:	00421880 	call	42188 <UsbGetRetryCnt>
   40d84:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
   40d88:	e0bffb0b 	ldhu	r2,-20(fp)
   40d8c:	108000d8 	cmpnei	r2,r2,3
   40d90:	103ffb1e 	bne	r2,zero,40d80 <__alt_data_end+0xfffc0d80>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
   40d94:	01000174 	movhi	r4,5
   40d98:	21067704 	addi	r4,r4,6620
   40d9c:	00423a40 	call	423a4 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
   40da0:	0041dc80 	call	41dc8 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   40da4:	00000306 	br	40db4 <main+0xa2c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
   40da8:	0041dc80 	call	41dc8 <UsbGetReportDesc>
		usleep(10*1000);
   40dac:	0109c404 	movi	r4,10000
   40db0:	004f48c0 	call	4f48c <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   40db4:	010000c4 	movi	r4,3
   40db8:	00402f40 	call	402f4 <IO_read>
   40dbc:	10bfffcc 	andi	r2,r2,65535
   40dc0:	1080040c 	andi	r2,r2,16
   40dc4:	103ff826 	beq	r2,zero,40da8 <__alt_data_end+0xfffc0da8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
   40dc8:	00421040 	call	42104 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
   40dcc:	01000084 	movi	r4,2
   40dd0:	01414184 	movi	r5,1286
   40dd4:	004025c0 	call	4025c <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
   40dd8:	0009883a 	mov	r4,zero
   40ddc:	00402f40 	call	402f4 <IO_read>
   40de0:	10bfffcc 	andi	r2,r2,65535
   40de4:	01000174 	movhi	r4,5
   40de8:	21068b04 	addi	r4,r4,6700
   40dec:	100b883a 	mov	r5,r2
   40df0:	00422b00 	call	422b0 <printf>

	IO_write(HPI_ADDR,0x0508);
   40df4:	01000084 	movi	r4,2
   40df8:	01414204 	movi	r5,1288
   40dfc:	004025c0 	call	4025c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
   40e00:	0009883a 	mov	r4,zero
   40e04:	00402f40 	call	402f4 <IO_read>
   40e08:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
   40e0c:	e0bffb0b 	ldhu	r2,-20(fp)
   40e10:	01000174 	movhi	r4,5
   40e14:	21069704 	addi	r4,r4,6748
   40e18:	100b883a 	mov	r5,r2
   40e1c:	00422b00 	call	422b0 <printf>
	while (usb_ctl_val != 0x03)
   40e20:	00000206 	br	40e2c <main+0xaa4>
	{
		usb_ctl_val = UsbGetRetryCnt();
   40e24:	00421880 	call	42188 <UsbGetRetryCnt>
   40e28:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
   40e2c:	e0bffb0b 	ldhu	r2,-20(fp)
   40e30:	108000d8 	cmpnei	r2,r2,3
   40e34:	103ffb1e 	bne	r2,zero,40e24 <__alt_data_end+0xfffc0e24>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
   40e38:	01000174 	movhi	r4,5
   40e3c:	2106a304 	addi	r4,r4,6796
   40e40:	00423a40 	call	423a4 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
   40e44:	0109c404 	movi	r4,10000
   40e48:	004f48c0 	call	4f48c <usleep>
	while(1)
	{
		toggle++;
   40e4c:	e0bffb83 	ldbu	r2,-18(fp)
   40e50:	10800044 	addi	r2,r2,1
   40e54:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
   40e58:	01000084 	movi	r4,2
   40e5c:	01414004 	movi	r5,1280
   40e60:	004025c0 	call	4025c <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
   40e64:	0009883a 	mov	r4,zero
   40e68:	01414704 	movi	r5,1308
   40e6c:	004025c0 	call	4025c <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
   40e70:	e0bfff03 	ldbu	r2,-4(fp)
   40e74:	108003cc 	andi	r2,r2,15
   40e78:	0009883a 	mov	r4,zero
   40e7c:	100b883a 	mov	r5,r2
   40e80:	004025c0 	call	4025c <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
   40e84:	0009883a 	mov	r4,zero
   40e88:	0140a444 	movi	r5,657
   40e8c:	004025c0 	call	4025c <IO_write>
		if(toggle%2)
   40e90:	e0bffb83 	ldbu	r2,-18(fp)
   40e94:	1080004c 	andi	r2,r2,1
   40e98:	10803fcc 	andi	r2,r2,255
   40e9c:	10000426 	beq	r2,zero,40eb0 <main+0xb28>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
   40ea0:	0009883a 	mov	r4,zero
   40ea4:	01400044 	movi	r5,1
   40ea8:	004025c0 	call	4025c <IO_write>
   40eac:	00000306 	br	40ebc <main+0xb34>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
   40eb0:	0009883a 	mov	r4,zero
   40eb4:	01401044 	movi	r5,65
   40eb8:	004025c0 	call	4025c <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
   40ebc:	0009883a 	mov	r4,zero
   40ec0:	014004c4 	movi	r5,19
   40ec4:	004025c0 	call	4025c <IO_write>
		IO_write(HPI_DATA,0x0000);//a
   40ec8:	0009883a 	mov	r4,zero
   40ecc:	000b883a 	mov	r5,zero
   40ed0:	004025c0 	call	4025c <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
   40ed4:	01006c04 	movi	r4,432
   40ed8:	01414004 	movi	r5,1280
   40edc:	00411340 	call	41134 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   40ee0:	00002406 	br	40f74 <main+0xbec>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
   40ee4:	01000084 	movi	r4,2
   40ee8:	01414004 	movi	r5,1280
   40eec:	004025c0 	call	4025c <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
   40ef0:	0009883a 	mov	r4,zero
   40ef4:	01414704 	movi	r5,1308
   40ef8:	004025c0 	call	4025c <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
   40efc:	e0bfff03 	ldbu	r2,-4(fp)
   40f00:	108003cc 	andi	r2,r2,15
   40f04:	0009883a 	mov	r4,zero
   40f08:	100b883a 	mov	r5,r2
   40f0c:	004025c0 	call	4025c <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
   40f10:	0009883a 	mov	r4,zero
   40f14:	0140a444 	movi	r5,657
   40f18:	004025c0 	call	4025c <IO_write>
			if(toggle%2)
   40f1c:	e0bffb83 	ldbu	r2,-18(fp)
   40f20:	1080004c 	andi	r2,r2,1
   40f24:	10803fcc 	andi	r2,r2,255
   40f28:	10000426 	beq	r2,zero,40f3c <main+0xbb4>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
   40f2c:	0009883a 	mov	r4,zero
   40f30:	01400044 	movi	r5,1
   40f34:	004025c0 	call	4025c <IO_write>
   40f38:	00000306 	br	40f48 <main+0xbc0>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
   40f3c:	0009883a 	mov	r4,zero
   40f40:	01401044 	movi	r5,65
   40f44:	004025c0 	call	4025c <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
   40f48:	0009883a 	mov	r4,zero
   40f4c:	014004c4 	movi	r5,19
   40f50:	004025c0 	call	4025c <IO_write>
			IO_write(HPI_DATA,0x0000);//
   40f54:	0009883a 	mov	r4,zero
   40f58:	000b883a 	mov	r5,zero
   40f5c:	004025c0 	call	4025c <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
   40f60:	01006c04 	movi	r4,432
   40f64:	01414004 	movi	r5,1280
   40f68:	00411340 	call	41134 <UsbWrite>
			usleep(10*1000);
   40f6c:	0109c404 	movi	r4,10000
   40f70:	004f48c0 	call	4f48c <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   40f74:	010000c4 	movi	r4,3
   40f78:	00402f40 	call	402f4 <IO_read>
   40f7c:	10bfffcc 	andi	r2,r2,65535
   40f80:	1080040c 	andi	r2,r2,16
   40f84:	103fd726 	beq	r2,zero,40ee4 <__alt_data_end+0xfffc0ee4>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
   40f88:	00421040 	call	42104 <UsbWaitTDListDone>
   40f8c:	e0bffb0d 	sth	r2,-20(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
   40f90:	01000084 	movi	r4,2
   40f94:	01414784 	movi	r5,1310
   40f98:	004025c0 	call	4025c <IO_write>
		keycode = IO_read(HPI_DATA);
   40f9c:	0009883a 	mov	r4,zero
   40fa0:	00402f40 	call	402f4 <IO_read>
   40fa4:	10bfffcc 	andi	r2,r2,65535
   40fa8:	e0bffd15 	stw	r2,-12(fp)

		IO_write(HPI_ADDR,0x0520);
   40fac:	01000084 	movi	r4,2
   40fb0:	01414804 	movi	r5,1312
   40fb4:	004025c0 	call	4025c <IO_write>
		keycode += (IO_read(HPI_DATA) << 16 );
   40fb8:	0009883a 	mov	r4,zero
   40fbc:	00402f40 	call	402f4 <IO_read>
   40fc0:	10bfffcc 	andi	r2,r2,65535
   40fc4:	1004943a 	slli	r2,r2,16
   40fc8:	e0fffd17 	ldw	r3,-12(fp)
   40fcc:	1885883a 	add	r2,r3,r2
   40fd0:	e0bffd15 	stw	r2,-12(fp)

		printf("\nfirst four keycode values are %08x\n",keycode);
   40fd4:	01000174 	movhi	r4,5
   40fd8:	2106b704 	addi	r4,r4,6876
   40fdc:	e17ffd17 	ldw	r5,-12(fp)
   40fe0:	00422b00 	call	422b0 <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xffffffff);
   40fe4:	00800234 	movhi	r2,8
   40fe8:	10841c04 	addi	r2,r2,4208
   40fec:	e0fffd17 	ldw	r3,-12(fp)
   40ff0:	10c00035 	stwio	r3,0(r2)


		usleep(200);//usleep(5000);
   40ff4:	01003204 	movi	r4,200
   40ff8:	004f48c0 	call	4f48c <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
   40ffc:	d0a6cb0b 	ldhu	r2,-25812(gp)
   41000:	10bfffcc 	andi	r2,r2,65535
   41004:	1009883a 	mov	r4,r2
   41008:	00411880 	call	41188 <UsbRead>
   4100c:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
   41010:	d0a6cb8b 	ldhu	r2,-25810(gp)
   41014:	e0fffb0b 	ldhu	r3,-20(fp)
   41018:	1884703a 	and	r2,r3,r2
   4101c:	10bfffcc 	andi	r2,r2,65535
   41020:	1000201e 	bne	r2,zero,410a4 <main+0xd1c>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
   41024:	e03ffbc5 	stb	zero,-17(fp)
   41028:	00001006 	br	4106c <main+0xce4>
			{
				usleep(5*1000);
   4102c:	0104e204 	movi	r4,5000
   41030:	004f48c0 	call	4f48c <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
   41034:	d0a6cb0b 	ldhu	r2,-25812(gp)
   41038:	10bfffcc 	andi	r2,r2,65535
   4103c:	1009883a 	mov	r4,r2
   41040:	00411880 	call	41188 <UsbRead>
   41044:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
   41048:	d0a6cb8b 	ldhu	r2,-25810(gp)
   4104c:	e0fffb0b 	ldhu	r3,-20(fp)
   41050:	1884703a 	and	r2,r3,r2
   41054:	10bfffcc 	andi	r2,r2,65535
   41058:	10000126 	beq	r2,zero,41060 <main+0xcd8>
   4105c:	00000606 	br	41078 <main+0xcf0>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
   41060:	e0bffbc3 	ldbu	r2,-17(fp)
   41064:	10800044 	addi	r2,r2,1
   41068:	e0bffbc5 	stb	r2,-17(fp)
   4106c:	e0bffbc3 	ldbu	r2,-17(fp)
   41070:	108001f0 	cmpltui	r2,r2,7
   41074:	103fed1e 	bne	r2,zero,4102c <__alt_data_end+0xfffc102c>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
   41078:	d0a6cb8b 	ldhu	r2,-25810(gp)
   4107c:	e0fffb0b 	ldhu	r3,-20(fp)
   41080:	1884703a 	and	r2,r3,r2
   41084:	10bfffcc 	andi	r2,r2,65535
   41088:	1000061e 	bne	r2,zero,410a4 <main+0xd1c>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
   4108c:	01000174 	movhi	r4,5
   41090:	2106c104 	addi	r4,r4,6916
   41094:	00423a40 	call	423a4 <puts>
				printf("[INFO]: please insert again!!! \n");
   41098:	01000174 	movhi	r4,5
   4109c:	2106cc04 	addi	r4,r4,6960
   410a0:	00423a40 	call	423a4 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
   410a4:	00001d06 	br	4111c <main+0xd94>
		{

			usb_ctl_val = UsbRead(ctl_reg);
   410a8:	d0a6cb0b 	ldhu	r2,-25812(gp)
   410ac:	10bfffcc 	andi	r2,r2,65535
   410b0:	1009883a 	mov	r4,r2
   410b4:	00411880 	call	41188 <UsbRead>
   410b8:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
   410bc:	0104e204 	movi	r4,5000
   410c0:	004f48c0 	call	4f48c <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
   410c4:	d0a6cb0b 	ldhu	r2,-25812(gp)
   410c8:	10bfffcc 	andi	r2,r2,65535
   410cc:	1009883a 	mov	r4,r2
   410d0:	00411880 	call	41188 <UsbRead>
   410d4:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
   410d8:	0104e204 	movi	r4,5000
   410dc:	004f48c0 	call	4f48c <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
   410e0:	d0a6cb0b 	ldhu	r2,-25812(gp)
   410e4:	10bfffcc 	andi	r2,r2,65535
   410e8:	1009883a 	mov	r4,r2
   410ec:	00411880 	call	41188 <UsbRead>
   410f0:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
   410f4:	0104e204 	movi	r4,5000
   410f8:	004f48c0 	call	4f48c <usleep>

			if(usb_ctl_val & no_device)
   410fc:	d0a6cb8b 	ldhu	r2,-25810(gp)
   41100:	e0fffb0b 	ldhu	r3,-20(fp)
   41104:	1884703a 	and	r2,r3,r2
   41108:	10bfffcc 	andi	r2,r2,65535
   4110c:	10000126 	beq	r2,zero,41114 <main+0xd8c>
				goto USB_HOT_PLUG;
   41110:	003ca806 	br	403b4 <__alt_data_end+0xfffc03b4>

			usleep(200);
   41114:	01003204 	movi	r4,200
   41118:	004f48c0 	call	4f48c <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
   4111c:	d0a6cb8b 	ldhu	r2,-25810(gp)
   41120:	e0fffb0b 	ldhu	r3,-20(fp)
   41124:	1884703a 	and	r2,r3,r2
   41128:	10bfffcc 	andi	r2,r2,65535
   4112c:	103fde26 	beq	r2,zero,410a8 <__alt_data_end+0xfffc10a8>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
   41130:	003f4606 	br	40e4c <__alt_data_end+0xfffc0e4c>

00041134 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
   41134:	defffc04 	addi	sp,sp,-16
   41138:	dfc00315 	stw	ra,12(sp)
   4113c:	df000215 	stw	fp,8(sp)
   41140:	df000204 	addi	fp,sp,8
   41144:	2007883a 	mov	r3,r4
   41148:	2805883a 	mov	r2,r5
   4114c:	e0fffe0d 	sth	r3,-8(fp)
   41150:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
   41154:	e0bffe0b 	ldhu	r2,-8(fp)
   41158:	01000084 	movi	r4,2
   4115c:	100b883a 	mov	r5,r2
   41160:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA, Data);
   41164:	e0bfff0b 	ldhu	r2,-4(fp)
   41168:	0009883a 	mov	r4,zero
   4116c:	100b883a 	mov	r5,r2
   41170:	004025c0 	call	4025c <IO_write>
}
   41174:	e037883a 	mov	sp,fp
   41178:	dfc00117 	ldw	ra,4(sp)
   4117c:	df000017 	ldw	fp,0(sp)
   41180:	dec00204 	addi	sp,sp,8
   41184:	f800283a 	ret

00041188 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
   41188:	defffc04 	addi	sp,sp,-16
   4118c:	dfc00315 	stw	ra,12(sp)
   41190:	df000215 	stw	fp,8(sp)
   41194:	df000204 	addi	fp,sp,8
   41198:	2005883a 	mov	r2,r4
   4119c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
   411a0:	e0bfff0b 	ldhu	r2,-4(fp)
   411a4:	01000084 	movi	r4,2
   411a8:	100b883a 	mov	r5,r2
   411ac:	004025c0 	call	4025c <IO_write>
	alt_u16 temp = 0;
   411b0:	e03ffe0d 	sth	zero,-8(fp)
	temp = IO_read(HPI_DATA);
   411b4:	0009883a 	mov	r4,zero
   411b8:	00402f40 	call	402f4 <IO_read>
   411bc:	e0bffe0d 	sth	r2,-8(fp)
	return temp;
   411c0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   411c4:	e037883a 	mov	sp,fp
   411c8:	dfc00117 	ldw	ra,4(sp)
   411cc:	df000017 	ldw	fp,0(sp)
   411d0:	dec00204 	addi	sp,sp,8
   411d4:	f800283a 	ret

000411d8 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
   411d8:	defffe04 	addi	sp,sp,-8
   411dc:	dfc00115 	stw	ra,4(sp)
   411e0:	df000015 	stw	fp,0(sp)
   411e4:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
   411e8:	01000044 	movi	r4,1
   411ec:	017e9414 	movui	r5,64080
   411f0:	004025c0 	call	4025c <IO_write>
	usleep(100000);
   411f4:	010000b4 	movhi	r4,2
   411f8:	2121a804 	addi	r4,r4,-31072
   411fc:	004f48c0 	call	4f48c <usleep>
	printf("[USB INIT]:reset finished!\n");
   41200:	01000174 	movhi	r4,5
   41204:	2106d404 	addi	r4,r4,6992
   41208:	00423a40 	call	423a4 <puts>

	usleep(500000);
   4120c:	01000234 	movhi	r4,8
   41210:	21284804 	addi	r4,r4,-24288
   41214:	004f48c0 	call	4f48c <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
   41218:	01000174 	movhi	r4,5
   4121c:	2106db04 	addi	r4,r4,7020
   41220:	00423a40 	call	423a4 <puts>
	IO_read(HPI_MAILBOX);
   41224:	01000044 	movi	r4,1
   41228:	00402f40 	call	402f4 <IO_read>
	IO_read(HPI_STATUS);
   4122c:	010000c4 	movi	r4,3
   41230:	00402f40 	call	402f4 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
   41234:	01005104 	movi	r4,324
   41238:	00411880 	call	41188 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
   4123c:	01005104 	movi	r4,324
   41240:	000b883a 	mov	r5,zero
   41244:	00411340 	call	41134 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
   41248:	01005204 	movi	r4,328
   4124c:	00411880 	call	41188 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
   41250:	01005204 	movi	r4,328
   41254:	000b883a 	mov	r5,zero
   41258:	00411340 	call	41134 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
   4125c:	01302414 	movui	r4,49296
   41260:	017fffd4 	movui	r5,65535
   41264:	00411340 	call	41134 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
   41268:	01302c14 	movui	r4,49328
   4126c:	017fffd4 	movui	r5,65535
   41270:	00411340 	call	41134 <UsbWrite>
}
   41274:	e037883a 	mov	sp,fp
   41278:	dfc00117 	ldw	ra,4(sp)
   4127c:	df000017 	ldw	fp,0(sp)
   41280:	dec00204 	addi	sp,sp,8
   41284:	f800283a 	ret

00041288 <UsbSetAddress>:


void UsbSetAddress()
{
   41288:	defffe04 	addi	sp,sp,-8
   4128c:	dfc00115 	stw	ra,4(sp)
   41290:	df000015 	stw	fp,0(sp)
   41294:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
   41298:	01000084 	movi	r4,2
   4129c:	01414004 	movi	r5,1280
   412a0:	004025c0 	call	4025c <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
   412a4:	0009883a 	mov	r4,zero
   412a8:	01414304 	movi	r5,1292
   412ac:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
   412b0:	0009883a 	mov	r4,zero
   412b4:	01400204 	movi	r5,8
   412b8:	004025c0 	call	4025c <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
   412bc:	0009883a 	mov	r4,zero
   412c0:	01403404 	movi	r5,208
   412c4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0001);
   412c8:	0009883a 	mov	r4,zero
   412cc:	01400044 	movi	r5,1
   412d0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);
   412d4:	0009883a 	mov	r4,zero
   412d8:	014004c4 	movi	r5,19
   412dc:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0514);
   412e0:	0009883a 	mov	r4,zero
   412e4:	01414504 	movi	r5,1300
   412e8:	004025c0 	call	4025c <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
   412ec:	0009883a 	mov	r4,zero
   412f0:	01414004 	movi	r5,1280
   412f4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0002);
   412f8:	0009883a 	mov	r4,zero
   412fc:	01400084 	movi	r5,2
   41300:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);
   41304:	0009883a 	mov	r4,zero
   41308:	000b883a 	mov	r5,zero
   4130c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);
   41310:	0009883a 	mov	r4,zero
   41314:	000b883a 	mov	r5,zero
   41318:	004025c0 	call	4025c <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
   4131c:	0009883a 	mov	r4,zero
   41320:	000b883a 	mov	r5,zero
   41324:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//
   41328:	0009883a 	mov	r4,zero
   4132c:	000b883a 	mov	r5,zero
   41330:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0090);//
   41334:	0009883a 	mov	r4,zero
   41338:	01402404 	movi	r5,144
   4133c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041);
   41340:	0009883a 	mov	r4,zero
   41344:	01401044 	movi	r5,65
   41348:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);
   4134c:	0009883a 	mov	r4,zero
   41350:	014004c4 	movi	r5,19
   41354:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);
   41358:	0009883a 	mov	r4,zero
   4135c:	000b883a 	mov	r5,zero
   41360:	004025c0 	call	4025c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
   41364:	01006c04 	movi	r4,432
   41368:	01414004 	movi	r5,1280
   4136c:	00411340 	call	41134 <UsbWrite>
}
   41370:	e037883a 	mov	sp,fp
   41374:	dfc00117 	ldw	ra,4(sp)
   41378:	df000017 	ldw	fp,0(sp)
   4137c:	dec00204 	addi	sp,sp,8
   41380:	f800283a 	ret

00041384 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
   41384:	defffe04 	addi	sp,sp,-8
   41388:	dfc00115 	stw	ra,4(sp)
   4138c:	df000015 	stw	fp,0(sp)
   41390:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
   41394:	01000084 	movi	r4,2
   41398:	01414004 	movi	r5,1280
   4139c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x050C);
   413a0:	0009883a 	mov	r4,zero
   413a4:	01414304 	movi	r5,1292
   413a8:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
   413ac:	0009883a 	mov	r4,zero
   413b0:	01400204 	movi	r5,8
   413b4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
   413b8:	0009883a 	mov	r4,zero
   413bc:	0140b404 	movi	r5,720
   413c0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0001);
   413c4:	0009883a 	mov	r4,zero
   413c8:	01400044 	movi	r5,1
   413cc:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);
   413d0:	0009883a 	mov	r4,zero
   413d4:	014004c4 	movi	r5,19
   413d8:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0514);
   413dc:	0009883a 	mov	r4,zero
   413e0:	01414504 	movi	r5,1300
   413e4:	004025c0 	call	4025c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
   413e8:	0009883a 	mov	r4,zero
   413ec:	0141a004 	movi	r5,1664
   413f0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
   413f4:	0009883a 	mov	r4,zero
   413f8:	01404004 	movi	r5,256
   413fc:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);
   41400:	0009883a 	mov	r4,zero
   41404:	000b883a 	mov	r5,zero
   41408:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008);
   4140c:	0009883a 	mov	r4,zero
   41410:	01400204 	movi	r5,8
   41414:	004025c0 	call	4025c <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
   41418:	0009883a 	mov	r4,zero
   4141c:	01414b04 	movi	r5,1324
   41420:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008);//
   41424:	0009883a 	mov	r4,zero
   41428:	01400204 	movi	r5,8
   4142c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//
   41430:	0009883a 	mov	r4,zero
   41434:	0140a404 	movi	r5,656
   41438:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041);
   4143c:	0009883a 	mov	r4,zero
   41440:	01401044 	movi	r5,65
   41444:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);
   41448:	0009883a 	mov	r4,zero
   4144c:	014004c4 	movi	r5,19
   41450:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0520);
   41454:	0009883a 	mov	r4,zero
   41458:	01414804 	movi	r5,1312
   4145c:	004025c0 	call	4025c <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
   41460:	0009883a 	mov	r4,zero
   41464:	000b883a 	mov	r5,zero
   41468:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
   4146c:	0009883a 	mov	r4,zero
   41470:	000b883a 	mov	r5,zero
   41474:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
   41478:	0009883a 	mov	r4,zero
   4147c:	01408404 	movi	r5,528
   41480:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041);
   41484:	0009883a 	mov	r4,zero
   41488:	01401044 	movi	r5,65
   4148c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);
   41490:	0009883a 	mov	r4,zero
   41494:	014004c4 	movi	r5,19
   41498:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);
   4149c:	0009883a 	mov	r4,zero
   414a0:	000b883a 	mov	r5,zero
   414a4:	004025c0 	call	4025c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
   414a8:	01006c04 	movi	r4,432
   414ac:	01414004 	movi	r5,1280
   414b0:	00411340 	call	41134 <UsbWrite>
}
   414b4:	e037883a 	mov	sp,fp
   414b8:	dfc00117 	ldw	ra,4(sp)
   414bc:	df000017 	ldw	fp,0(sp)
   414c0:	dec00204 	addi	sp,sp,8
   414c4:	f800283a 	ret

000414c8 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
   414c8:	defffe04 	addi	sp,sp,-8
   414cc:	dfc00115 	stw	ra,4(sp)
   414d0:	df000015 	stw	fp,0(sp)
   414d4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
   414d8:	01000084 	movi	r4,2
   414dc:	01414004 	movi	r5,1280
   414e0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x050C);
   414e4:	0009883a 	mov	r4,zero
   414e8:	01414304 	movi	r5,1292
   414ec:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
   414f0:	0009883a 	mov	r4,zero
   414f4:	01400204 	movi	r5,8
   414f8:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
   414fc:	0009883a 	mov	r4,zero
   41500:	0140b404 	movi	r5,720
   41504:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0001);
   41508:	0009883a 	mov	r4,zero
   4150c:	01400044 	movi	r5,1
   41510:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);
   41514:	0009883a 	mov	r4,zero
   41518:	014004c4 	movi	r5,19
   4151c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0514);
   41520:	0009883a 	mov	r4,zero
   41524:	01414504 	movi	r5,1300
   41528:	004025c0 	call	4025c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
   4152c:	0009883a 	mov	r4,zero
   41530:	0141a004 	movi	r5,1664
   41534:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
   41538:	0009883a 	mov	r4,zero
   4153c:	01404004 	movi	r5,256
   41540:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
   41544:	0009883a 	mov	r4,zero
   41548:	000b883a 	mov	r5,zero
   4154c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0012);//2
   41550:	0009883a 	mov	r4,zero
   41554:	01400484 	movi	r5,18
   41558:	004025c0 	call	4025c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
   4155c:	0009883a 	mov	r4,zero
   41560:	01415104 	movi	r5,1348
   41564:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
   41568:	0009883a 	mov	r4,zero
   4156c:	01400204 	movi	r5,8
   41570:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
   41574:	0009883a 	mov	r4,zero
   41578:	0140a404 	movi	r5,656
   4157c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
   41580:	0009883a 	mov	r4,zero
   41584:	01401044 	movi	r5,65
   41588:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
   4158c:	0009883a 	mov	r4,zero
   41590:	014004c4 	movi	r5,19
   41594:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
   41598:	0009883a 	mov	r4,zero
   4159c:	01414804 	movi	r5,1312
   415a0:	004025c0 	call	4025c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
   415a4:	0009883a 	mov	r4,zero
   415a8:	01415304 	movi	r5,1356
   415ac:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
   415b0:	0009883a 	mov	r4,zero
   415b4:	01400204 	movi	r5,8
   415b8:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
   415bc:	0009883a 	mov	r4,zero
   415c0:	0140a404 	movi	r5,656
   415c4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0001);//6
   415c8:	0009883a 	mov	r4,zero
   415cc:	01400044 	movi	r5,1
   415d0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
   415d4:	0009883a 	mov	r4,zero
   415d8:	014004c4 	movi	r5,19
   415dc:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
   415e0:	0009883a 	mov	r4,zero
   415e4:	01414b04 	movi	r5,1324
   415e8:	004025c0 	call	4025c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
   415ec:	0009883a 	mov	r4,zero
   415f0:	01415504 	movi	r5,1364
   415f4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0002);//e
   415f8:	0009883a 	mov	r4,zero
   415fc:	01400084 	movi	r5,2
   41600:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
   41604:	0009883a 	mov	r4,zero
   41608:	0140a404 	movi	r5,656
   4160c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
   41610:	0009883a 	mov	r4,zero
   41614:	01401044 	movi	r5,65
   41618:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
   4161c:	0009883a 	mov	r4,zero
   41620:	014004c4 	movi	r5,19
   41624:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
   41628:	0009883a 	mov	r4,zero
   4162c:	01414e04 	movi	r5,1336
   41630:	004025c0 	call	4025c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
   41634:	0009883a 	mov	r4,zero
   41638:	000b883a 	mov	r5,zero
   4163c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//a
   41640:	0009883a 	mov	r4,zero
   41644:	000b883a 	mov	r5,zero
   41648:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0210);//c
   4164c:	0009883a 	mov	r4,zero
   41650:	01408404 	movi	r5,528
   41654:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041);//e
   41658:	0009883a 	mov	r4,zero
   4165c:	01401044 	movi	r5,65
   41660:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
   41664:	0009883a 	mov	r4,zero
   41668:	014004c4 	movi	r5,19
   4166c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//2
   41670:	0009883a 	mov	r4,zero
   41674:	000b883a 	mov	r5,zero
   41678:	004025c0 	call	4025c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
   4167c:	01006c04 	movi	r4,432
   41680:	01414004 	movi	r5,1280
   41684:	00411340 	call	41134 <UsbWrite>
}
   41688:	e037883a 	mov	sp,fp
   4168c:	dfc00117 	ldw	ra,4(sp)
   41690:	df000017 	ldw	fp,0(sp)
   41694:	dec00204 	addi	sp,sp,8
   41698:	f800283a 	ret

0004169c <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
   4169c:	defffe04 	addi	sp,sp,-8
   416a0:	dfc00115 	stw	ra,4(sp)
   416a4:	df000015 	stw	fp,0(sp)
   416a8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
   416ac:	01000084 	movi	r4,2
   416b0:	01414004 	movi	r5,1280
   416b4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x050C);
   416b8:	0009883a 	mov	r4,zero
   416bc:	01414304 	movi	r5,1292
   416c0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
   416c4:	0009883a 	mov	r4,zero
   416c8:	01400204 	movi	r5,8
   416cc:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
   416d0:	0009883a 	mov	r4,zero
   416d4:	0140b404 	movi	r5,720
   416d8:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0001);
   416dc:	0009883a 	mov	r4,zero
   416e0:	01400044 	movi	r5,1
   416e4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);
   416e8:	0009883a 	mov	r4,zero
   416ec:	014004c4 	movi	r5,19
   416f0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0514);
   416f4:	0009883a 	mov	r4,zero
   416f8:	01414504 	movi	r5,1300
   416fc:	004025c0 	call	4025c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
   41700:	0009883a 	mov	r4,zero
   41704:	0141a004 	movi	r5,1664
   41708:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
   4170c:	0009883a 	mov	r4,zero
   41710:	01408004 	movi	r5,512
   41714:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
   41718:	0009883a 	mov	r4,zero
   4171c:	000b883a 	mov	r5,zero
   41720:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0009);//2
   41724:	0009883a 	mov	r4,zero
   41728:	01400244 	movi	r5,9
   4172c:	004025c0 	call	4025c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
   41730:	0009883a 	mov	r4,zero
   41734:	01415104 	movi	r5,1348
   41738:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
   4173c:	0009883a 	mov	r4,zero
   41740:	01400204 	movi	r5,8
   41744:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
   41748:	0009883a 	mov	r4,zero
   4174c:	0140a404 	movi	r5,656
   41750:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
   41754:	0009883a 	mov	r4,zero
   41758:	01401044 	movi	r5,65
   4175c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
   41760:	0009883a 	mov	r4,zero
   41764:	014004c4 	movi	r5,19
   41768:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
   4176c:	0009883a 	mov	r4,zero
   41770:	01414804 	movi	r5,1312
   41774:	004025c0 	call	4025c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
   41778:	0009883a 	mov	r4,zero
   4177c:	01415304 	movi	r5,1356
   41780:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0001);//2
   41784:	0009883a 	mov	r4,zero
   41788:	01400044 	movi	r5,1
   4178c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
   41790:	0009883a 	mov	r4,zero
   41794:	0140a404 	movi	r5,656
   41798:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
   4179c:	0009883a 	mov	r4,zero
   417a0:	01400044 	movi	r5,1
   417a4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
   417a8:	0009883a 	mov	r4,zero
   417ac:	014004c4 	movi	r5,19
   417b0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
   417b4:	0009883a 	mov	r4,zero
   417b8:	01414b04 	movi	r5,1324
   417bc:	004025c0 	call	4025c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
   417c0:	0009883a 	mov	r4,zero
   417c4:	000b883a 	mov	r5,zero
   417c8:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
   417cc:	0009883a 	mov	r4,zero
   417d0:	000b883a 	mov	r5,zero
   417d4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0210);//530
   417d8:	0009883a 	mov	r4,zero
   417dc:	01408404 	movi	r5,528
   417e0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
   417e4:	0009883a 	mov	r4,zero
   417e8:	01401044 	movi	r5,65
   417ec:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
   417f0:	0009883a 	mov	r4,zero
   417f4:	014004c4 	movi	r5,19
   417f8:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
   417fc:	0009883a 	mov	r4,zero
   41800:	000b883a 	mov	r5,zero
   41804:	004025c0 	call	4025c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
   41808:	01006c04 	movi	r4,432
   4180c:	01414004 	movi	r5,1280
   41810:	00411340 	call	41134 <UsbWrite>
}
   41814:	e037883a 	mov	sp,fp
   41818:	dfc00117 	ldw	ra,4(sp)
   4181c:	df000017 	ldw	fp,0(sp)
   41820:	dec00204 	addi	sp,sp,8
   41824:	f800283a 	ret

00041828 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
   41828:	defffe04 	addi	sp,sp,-8
   4182c:	dfc00115 	stw	ra,4(sp)
   41830:	df000015 	stw	fp,0(sp)
   41834:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
   41838:	01000084 	movi	r4,2
   4183c:	01414004 	movi	r5,1280
   41840:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x050C);
   41844:	0009883a 	mov	r4,zero
   41848:	01414304 	movi	r5,1292
   4184c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
   41850:	0009883a 	mov	r4,zero
   41854:	01400204 	movi	r5,8
   41858:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
   4185c:	0009883a 	mov	r4,zero
   41860:	0140b404 	movi	r5,720
   41864:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0001);
   41868:	0009883a 	mov	r4,zero
   4186c:	01400044 	movi	r5,1
   41870:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);
   41874:	0009883a 	mov	r4,zero
   41878:	014004c4 	movi	r5,19
   4187c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0514);
   41880:	0009883a 	mov	r4,zero
   41884:	01414504 	movi	r5,1300
   41888:	004025c0 	call	4025c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
   4188c:	0009883a 	mov	r4,zero
   41890:	0141a004 	movi	r5,1664
   41894:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
   41898:	0009883a 	mov	r4,zero
   4189c:	01408004 	movi	r5,512
   418a0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
   418a4:	0009883a 	mov	r4,zero
   418a8:	000b883a 	mov	r5,zero
   418ac:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
   418b0:	0009883a 	mov	r4,zero
   418b4:	01403fc4 	movi	r5,255
   418b8:	004025c0 	call	4025c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
   418bc:	0009883a 	mov	r4,zero
   418c0:	01415704 	movi	r5,1372
   418c4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
   418c8:	0009883a 	mov	r4,zero
   418cc:	01400204 	movi	r5,8
   418d0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
   418d4:	0009883a 	mov	r4,zero
   418d8:	0140a404 	movi	r5,656
   418dc:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
   418e0:	0009883a 	mov	r4,zero
   418e4:	01401044 	movi	r5,65
   418e8:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
   418ec:	0009883a 	mov	r4,zero
   418f0:	014004c4 	movi	r5,19
   418f4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
   418f8:	0009883a 	mov	r4,zero
   418fc:	01414804 	movi	r5,1312
   41900:	004025c0 	call	4025c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
   41904:	0009883a 	mov	r4,zero
   41908:	01415904 	movi	r5,1380
   4190c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
   41910:	0009883a 	mov	r4,zero
   41914:	01400204 	movi	r5,8
   41918:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
   4191c:	0009883a 	mov	r4,zero
   41920:	0140a404 	movi	r5,656
   41924:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
   41928:	0009883a 	mov	r4,zero
   4192c:	01400044 	movi	r5,1
   41930:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
   41934:	0009883a 	mov	r4,zero
   41938:	014004c4 	movi	r5,19
   4193c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
   41940:	0009883a 	mov	r4,zero
   41944:	01414b04 	movi	r5,1324
   41948:	004025c0 	call	4025c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
   4194c:	0009883a 	mov	r4,zero
   41950:	01415b04 	movi	r5,1388
   41954:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
   41958:	0009883a 	mov	r4,zero
   4195c:	01400204 	movi	r5,8
   41960:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
   41964:	0009883a 	mov	r4,zero
   41968:	0140a404 	movi	r5,656
   4196c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
   41970:	0009883a 	mov	r4,zero
   41974:	01401044 	movi	r5,65
   41978:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
   4197c:	0009883a 	mov	r4,zero
   41980:	014004c4 	movi	r5,19
   41984:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
   41988:	0009883a 	mov	r4,zero
   4198c:	01414e04 	movi	r5,1336
   41990:	004025c0 	call	4025c <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
   41994:	0009883a 	mov	r4,zero
   41998:	01415d04 	movi	r5,1396
   4199c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008);//a
   419a0:	0009883a 	mov	r4,zero
   419a4:	01400204 	movi	r5,8
   419a8:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
   419ac:	0009883a 	mov	r4,zero
   419b0:	0140a404 	movi	r5,656
   419b4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
   419b8:	0009883a 	mov	r4,zero
   419bc:	01400044 	movi	r5,1
   419c0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
   419c4:	0009883a 	mov	r4,zero
   419c8:	014004c4 	movi	r5,19
   419cc:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0544);//2
   419d0:	0009883a 	mov	r4,zero
   419d4:	01415104 	movi	r5,1348
   419d8:	004025c0 	call	4025c <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
   419dc:	0009883a 	mov	r4,zero
   419e0:	01415f04 	movi	r5,1404
   419e4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0002);//6
   419e8:	0009883a 	mov	r4,zero
   419ec:	01400084 	movi	r5,2
   419f0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
   419f4:	0009883a 	mov	r4,zero
   419f8:	0140a404 	movi	r5,656
   419fc:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
   41a00:	0009883a 	mov	r4,zero
   41a04:	01401044 	movi	r5,65
   41a08:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
   41a0c:	0009883a 	mov	r4,zero
   41a10:	014004c4 	movi	r5,19
   41a14:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0550);//e
   41a18:	0009883a 	mov	r4,zero
   41a1c:	01415404 	movi	r5,1360
   41a20:	004025c0 	call	4025c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
   41a24:	0009883a 	mov	r4,zero
   41a28:	000b883a 	mov	r5,zero
   41a2c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//2
   41a30:	0009883a 	mov	r4,zero
   41a34:	000b883a 	mov	r5,zero
   41a38:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0210);//4
   41a3c:	0009883a 	mov	r4,zero
   41a40:	01408404 	movi	r5,528
   41a44:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041);//6
   41a48:	0009883a 	mov	r4,zero
   41a4c:	01401044 	movi	r5,65
   41a50:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
   41a54:	0009883a 	mov	r4,zero
   41a58:	014004c4 	movi	r5,19
   41a5c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//a
   41a60:	0009883a 	mov	r4,zero
   41a64:	000b883a 	mov	r5,zero
   41a68:	004025c0 	call	4025c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
   41a6c:	01006c04 	movi	r4,432
   41a70:	01414004 	movi	r5,1280
   41a74:	00411340 	call	41134 <UsbWrite>
}
   41a78:	e037883a 	mov	sp,fp
   41a7c:	dfc00117 	ldw	ra,4(sp)
   41a80:	df000017 	ldw	fp,0(sp)
   41a84:	dec00204 	addi	sp,sp,8
   41a88:	f800283a 	ret

00041a8c <UsbSetConfig>:

void UsbSetConfig()
{
   41a8c:	defffe04 	addi	sp,sp,-8
   41a90:	dfc00115 	stw	ra,4(sp)
   41a94:	df000015 	stw	fp,0(sp)
   41a98:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
   41a9c:	01000084 	movi	r4,2
   41aa0:	01414004 	movi	r5,1280
   41aa4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x050C);
   41aa8:	0009883a 	mov	r4,zero
   41aac:	01414304 	movi	r5,1292
   41ab0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
   41ab4:	0009883a 	mov	r4,zero
   41ab8:	01400204 	movi	r5,8
   41abc:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
   41ac0:	0009883a 	mov	r4,zero
   41ac4:	0140b404 	movi	r5,720
   41ac8:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0001);
   41acc:	0009883a 	mov	r4,zero
   41ad0:	01400044 	movi	r5,1
   41ad4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);
   41ad8:	0009883a 	mov	r4,zero
   41adc:	014004c4 	movi	r5,19
   41ae0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0514);
   41ae4:	0009883a 	mov	r4,zero
   41ae8:	01414504 	movi	r5,1300
   41aec:	004025c0 	call	4025c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
   41af0:	0009883a 	mov	r4,zero
   41af4:	01424004 	movi	r5,2304
   41af8:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
   41afc:	0009883a 	mov	r4,zero
   41b00:	01400044 	movi	r5,1
   41b04:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);
   41b08:	0009883a 	mov	r4,zero
   41b0c:	000b883a 	mov	r5,zero
   41b10:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);
   41b14:	0009883a 	mov	r4,zero
   41b18:	000b883a 	mov	r5,zero
   41b1c:	004025c0 	call	4025c <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
   41b20:	0009883a 	mov	r4,zero
   41b24:	000b883a 	mov	r5,zero
   41b28:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
   41b2c:	0009883a 	mov	r4,zero
   41b30:	000b883a 	mov	r5,zero
   41b34:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
   41b38:	0009883a 	mov	r4,zero
   41b3c:	0140a404 	movi	r5,656
   41b40:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
   41b44:	0009883a 	mov	r4,zero
   41b48:	01401044 	movi	r5,65
   41b4c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);
   41b50:	0009883a 	mov	r4,zero
   41b54:	014004c4 	movi	r5,19
   41b58:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);
   41b5c:	0009883a 	mov	r4,zero
   41b60:	000b883a 	mov	r5,zero
   41b64:	004025c0 	call	4025c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
   41b68:	01006c04 	movi	r4,432
   41b6c:	01414004 	movi	r5,1280
   41b70:	00411340 	call	41134 <UsbWrite>

}
   41b74:	e037883a 	mov	sp,fp
   41b78:	dfc00117 	ldw	ra,4(sp)
   41b7c:	df000017 	ldw	fp,0(sp)
   41b80:	dec00204 	addi	sp,sp,8
   41b84:	f800283a 	ret

00041b88 <UsbClassRequest>:

void UsbClassRequest()
{
   41b88:	defffe04 	addi	sp,sp,-8
   41b8c:	dfc00115 	stw	ra,4(sp)
   41b90:	df000015 	stw	fp,0(sp)
   41b94:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
   41b98:	01000084 	movi	r4,2
   41b9c:	01414004 	movi	r5,1280
   41ba0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x050C);
   41ba4:	0009883a 	mov	r4,zero
   41ba8:	01414304 	movi	r5,1292
   41bac:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
   41bb0:	0009883a 	mov	r4,zero
   41bb4:	01400204 	movi	r5,8
   41bb8:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
   41bbc:	0009883a 	mov	r4,zero
   41bc0:	0140b404 	movi	r5,720
   41bc4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0001);
   41bc8:	0009883a 	mov	r4,zero
   41bcc:	01400044 	movi	r5,1
   41bd0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);
   41bd4:	0009883a 	mov	r4,zero
   41bd8:	014004c4 	movi	r5,19
   41bdc:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0514);
   41be0:	0009883a 	mov	r4,zero
   41be4:	01414504 	movi	r5,1300
   41be8:	004025c0 	call	4025c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
   41bec:	0009883a 	mov	r4,zero
   41bf0:	01428844 	movi	r5,2593
   41bf4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
   41bf8:	0009883a 	mov	r4,zero
   41bfc:	000b883a 	mov	r5,zero
   41c00:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);
   41c04:	0009883a 	mov	r4,zero
   41c08:	000b883a 	mov	r5,zero
   41c0c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);
   41c10:	0009883a 	mov	r4,zero
   41c14:	000b883a 	mov	r5,zero
   41c18:	004025c0 	call	4025c <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
   41c1c:	0009883a 	mov	r4,zero
   41c20:	000b883a 	mov	r5,zero
   41c24:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
   41c28:	0009883a 	mov	r4,zero
   41c2c:	000b883a 	mov	r5,zero
   41c30:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
   41c34:	0009883a 	mov	r4,zero
   41c38:	0140a404 	movi	r5,656
   41c3c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
   41c40:	0009883a 	mov	r4,zero
   41c44:	01401044 	movi	r5,65
   41c48:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);
   41c4c:	0009883a 	mov	r4,zero
   41c50:	014004c4 	movi	r5,19
   41c54:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);
   41c58:	0009883a 	mov	r4,zero
   41c5c:	000b883a 	mov	r5,zero
   41c60:	004025c0 	call	4025c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
   41c64:	01006c04 	movi	r4,432
   41c68:	01414004 	movi	r5,1280
   41c6c:	00411340 	call	41134 <UsbWrite>
}
   41c70:	e037883a 	mov	sp,fp
   41c74:	dfc00117 	ldw	ra,4(sp)
   41c78:	df000017 	ldw	fp,0(sp)
   41c7c:	dec00204 	addi	sp,sp,8
   41c80:	f800283a 	ret

00041c84 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
   41c84:	defffe04 	addi	sp,sp,-8
   41c88:	dfc00115 	stw	ra,4(sp)
   41c8c:	df000015 	stw	fp,0(sp)
   41c90:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
   41c94:	01000084 	movi	r4,2
   41c98:	01414004 	movi	r5,1280
   41c9c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x050C);
   41ca0:	0009883a 	mov	r4,zero
   41ca4:	01414304 	movi	r5,1292
   41ca8:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
   41cac:	0009883a 	mov	r4,zero
   41cb0:	01400204 	movi	r5,8
   41cb4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
   41cb8:	0009883a 	mov	r4,zero
   41cbc:	0140b404 	movi	r5,720
   41cc0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0001);
   41cc4:	0009883a 	mov	r4,zero
   41cc8:	01400044 	movi	r5,1
   41ccc:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);
   41cd0:	0009883a 	mov	r4,zero
   41cd4:	014004c4 	movi	r5,19
   41cd8:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0514);
   41cdc:	0009883a 	mov	r4,zero
   41ce0:	01414504 	movi	r5,1300
   41ce4:	004025c0 	call	4025c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
   41ce8:	0009883a 	mov	r4,zero
   41cec:	0141a044 	movi	r5,1665
   41cf0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
   41cf4:	0009883a 	mov	r4,zero
   41cf8:	01484004 	movi	r5,8448
   41cfc:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
   41d00:	0009883a 	mov	r4,zero
   41d04:	000b883a 	mov	r5,zero
   41d08:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x007B);//2
   41d0c:	0009883a 	mov	r4,zero
   41d10:	01401ec4 	movi	r5,123
   41d14:	004025c0 	call	4025c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
   41d18:	0009883a 	mov	r4,zero
   41d1c:	01415104 	movi	r5,1348
   41d20:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
   41d24:	0009883a 	mov	r4,zero
   41d28:	01400204 	movi	r5,8
   41d2c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
   41d30:	0009883a 	mov	r4,zero
   41d34:	0140a404 	movi	r5,656
   41d38:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
   41d3c:	0009883a 	mov	r4,zero
   41d40:	01401044 	movi	r5,65
   41d44:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
   41d48:	0009883a 	mov	r4,zero
   41d4c:	014004c4 	movi	r5,19
   41d50:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
   41d54:	0009883a 	mov	r4,zero
   41d58:	01414804 	movi	r5,1312
   41d5c:	004025c0 	call	4025c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
   41d60:	0009883a 	mov	r4,zero
   41d64:	000b883a 	mov	r5,zero
   41d68:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
   41d6c:	0009883a 	mov	r4,zero
   41d70:	000b883a 	mov	r5,zero
   41d74:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0210);//530
   41d78:	0009883a 	mov	r4,zero
   41d7c:	01408404 	movi	r5,528
   41d80:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
   41d84:	0009883a 	mov	r4,zero
   41d88:	01401044 	movi	r5,65
   41d8c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
   41d90:	0009883a 	mov	r4,zero
   41d94:	014004c4 	movi	r5,19
   41d98:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
   41d9c:	0009883a 	mov	r4,zero
   41da0:	000b883a 	mov	r5,zero
   41da4:	004025c0 	call	4025c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
   41da8:	01006c04 	movi	r4,432
   41dac:	01414004 	movi	r5,1280
   41db0:	00411340 	call	41134 <UsbWrite>

}
   41db4:	e037883a 	mov	sp,fp
   41db8:	dfc00117 	ldw	ra,4(sp)
   41dbc:	df000017 	ldw	fp,0(sp)
   41dc0:	dec00204 	addi	sp,sp,8
   41dc4:	f800283a 	ret

00041dc8 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
   41dc8:	defffe04 	addi	sp,sp,-8
   41dcc:	dfc00115 	stw	ra,4(sp)
   41dd0:	df000015 	stw	fp,0(sp)
   41dd4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
   41dd8:	01000084 	movi	r4,2
   41ddc:	01414004 	movi	r5,1280
   41de0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x050C);
   41de4:	0009883a 	mov	r4,zero
   41de8:	01414304 	movi	r5,1292
   41dec:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
   41df0:	0009883a 	mov	r4,zero
   41df4:	01400204 	movi	r5,8
   41df8:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
   41dfc:	0009883a 	mov	r4,zero
   41e00:	0140b404 	movi	r5,720
   41e04:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0001);
   41e08:	0009883a 	mov	r4,zero
   41e0c:	01400044 	movi	r5,1
   41e10:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);
   41e14:	0009883a 	mov	r4,zero
   41e18:	014004c4 	movi	r5,19
   41e1c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0514);
   41e20:	0009883a 	mov	r4,zero
   41e24:	01414504 	movi	r5,1300
   41e28:	004025c0 	call	4025c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
   41e2c:	0009883a 	mov	r4,zero
   41e30:	0141a044 	movi	r5,1665
   41e34:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
   41e38:	0009883a 	mov	r4,zero
   41e3c:	01488004 	movi	r5,8704
   41e40:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
   41e44:	0009883a 	mov	r4,zero
   41e48:	000b883a 	mov	r5,zero
   41e4c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x007B);//2
   41e50:	0009883a 	mov	r4,zero
   41e54:	01401ec4 	movi	r5,123
   41e58:	004025c0 	call	4025c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
   41e5c:	0009883a 	mov	r4,zero
   41e60:	01416004 	movi	r5,1408
   41e64:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
   41e68:	0009883a 	mov	r4,zero
   41e6c:	01400204 	movi	r5,8
   41e70:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
   41e74:	0009883a 	mov	r4,zero
   41e78:	0140a404 	movi	r5,656
   41e7c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
   41e80:	0009883a 	mov	r4,zero
   41e84:	01401044 	movi	r5,65
   41e88:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
   41e8c:	0009883a 	mov	r4,zero
   41e90:	014004c4 	movi	r5,19
   41e94:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
   41e98:	0009883a 	mov	r4,zero
   41e9c:	01414804 	movi	r5,1312
   41ea0:	004025c0 	call	4025c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
   41ea4:	0009883a 	mov	r4,zero
   41ea8:	01416204 	movi	r5,1416
   41eac:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
   41eb0:	0009883a 	mov	r4,zero
   41eb4:	01400204 	movi	r5,8
   41eb8:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
   41ebc:	0009883a 	mov	r4,zero
   41ec0:	0140a404 	movi	r5,656
   41ec4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
   41ec8:	0009883a 	mov	r4,zero
   41ecc:	01400044 	movi	r5,1
   41ed0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
   41ed4:	0009883a 	mov	r4,zero
   41ed8:	014004c4 	movi	r5,19
   41edc:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
   41ee0:	0009883a 	mov	r4,zero
   41ee4:	01414b04 	movi	r5,1324
   41ee8:	004025c0 	call	4025c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
   41eec:	0009883a 	mov	r4,zero
   41ef0:	01416404 	movi	r5,1424
   41ef4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
   41ef8:	0009883a 	mov	r4,zero
   41efc:	01400204 	movi	r5,8
   41f00:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
   41f04:	0009883a 	mov	r4,zero
   41f08:	0140a404 	movi	r5,656
   41f0c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
   41f10:	0009883a 	mov	r4,zero
   41f14:	01401044 	movi	r5,65
   41f18:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
   41f1c:	0009883a 	mov	r4,zero
   41f20:	014004c4 	movi	r5,19
   41f24:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
   41f28:	0009883a 	mov	r4,zero
   41f2c:	01414e04 	movi	r5,1336
   41f30:	004025c0 	call	4025c <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
   41f34:	0009883a 	mov	r4,zero
   41f38:	01416604 	movi	r5,1432
   41f3c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008);//a
   41f40:	0009883a 	mov	r4,zero
   41f44:	01400204 	movi	r5,8
   41f48:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
   41f4c:	0009883a 	mov	r4,zero
   41f50:	0140a404 	movi	r5,656
   41f54:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
   41f58:	0009883a 	mov	r4,zero
   41f5c:	01400044 	movi	r5,1
   41f60:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
   41f64:	0009883a 	mov	r4,zero
   41f68:	014004c4 	movi	r5,19
   41f6c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0544);//2
   41f70:	0009883a 	mov	r4,zero
   41f74:	01415104 	movi	r5,1348
   41f78:	004025c0 	call	4025c <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
   41f7c:	0009883a 	mov	r4,zero
   41f80:	01416804 	movi	r5,1440
   41f84:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
   41f88:	0009883a 	mov	r4,zero
   41f8c:	01400204 	movi	r5,8
   41f90:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
   41f94:	0009883a 	mov	r4,zero
   41f98:	0140a404 	movi	r5,656
   41f9c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
   41fa0:	0009883a 	mov	r4,zero
   41fa4:	01401044 	movi	r5,65
   41fa8:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
   41fac:	0009883a 	mov	r4,zero
   41fb0:	014004c4 	movi	r5,19
   41fb4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0550);//e
   41fb8:	0009883a 	mov	r4,zero
   41fbc:	01415404 	movi	r5,1360
   41fc0:	004025c0 	call	4025c <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
   41fc4:	0009883a 	mov	r4,zero
   41fc8:	01416a04 	movi	r5,1448
   41fcc:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
   41fd0:	0009883a 	mov	r4,zero
   41fd4:	01400204 	movi	r5,8
   41fd8:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
   41fdc:	0009883a 	mov	r4,zero
   41fe0:	0140a404 	movi	r5,656
   41fe4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
   41fe8:	0009883a 	mov	r4,zero
   41fec:	01400044 	movi	r5,1
   41ff0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
   41ff4:	0009883a 	mov	r4,zero
   41ff8:	014004c4 	movi	r5,19
   41ffc:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x055c);//a
   42000:	0009883a 	mov	r4,zero
   42004:	01415704 	movi	r5,1372
   42008:	004025c0 	call	4025c <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
   4200c:	0009883a 	mov	r4,zero
   42010:	01416c04 	movi	r5,1456
   42014:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
   42018:	0009883a 	mov	r4,zero
   4201c:	01400204 	movi	r5,8
   42020:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//560
   42024:	0009883a 	mov	r4,zero
   42028:	0140a404 	movi	r5,656
   4202c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
   42030:	0009883a 	mov	r4,zero
   42034:	01401044 	movi	r5,65
   42038:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
   4203c:	0009883a 	mov	r4,zero
   42040:	014004c4 	movi	r5,19
   42044:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0568);//6
   42048:	0009883a 	mov	r4,zero
   4204c:	01415a04 	movi	r5,1384
   42050:	004025c0 	call	4025c <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
   42054:	0009883a 	mov	r4,zero
   42058:	01416e04 	movi	r5,1464
   4205c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0003);//a
   42060:	0009883a 	mov	r4,zero
   42064:	014000c4 	movi	r5,3
   42068:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
   4206c:	0009883a 	mov	r4,zero
   42070:	0140a404 	movi	r5,656
   42074:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
   42078:	0009883a 	mov	r4,zero
   4207c:	01400044 	movi	r5,1
   42080:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//570
   42084:	0009883a 	mov	r4,zero
   42088:	014004c4 	movi	r5,19
   4208c:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0574);//2
   42090:	0009883a 	mov	r4,zero
   42094:	01415d04 	movi	r5,1396
   42098:	004025c0 	call	4025c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
   4209c:	0009883a 	mov	r4,zero
   420a0:	000b883a 	mov	r5,zero
   420a4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
   420a8:	0009883a 	mov	r4,zero
   420ac:	000b883a 	mov	r5,zero
   420b0:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0210);//8
   420b4:	0009883a 	mov	r4,zero
   420b8:	01408404 	movi	r5,528
   420bc:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
   420c0:	0009883a 	mov	r4,zero
   420c4:	01401044 	movi	r5,65
   420c8:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
   420cc:	0009883a 	mov	r4,zero
   420d0:	014004c4 	movi	r5,19
   420d4:	004025c0 	call	4025c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
   420d8:	0009883a 	mov	r4,zero
   420dc:	000b883a 	mov	r5,zero
   420e0:	004025c0 	call	4025c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
   420e4:	01006c04 	movi	r4,432
   420e8:	01414004 	movi	r5,1280
   420ec:	00411340 	call	41134 <UsbWrite>

}
   420f0:	e037883a 	mov	sp,fp
   420f4:	dfc00117 	ldw	ra,4(sp)
   420f8:	df000017 	ldw	fp,0(sp)
   420fc:	dec00204 	addi	sp,sp,8
   42100:	f800283a 	ret

00042104 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
   42104:	defffd04 	addi	sp,sp,-12
   42108:	dfc00215 	stw	ra,8(sp)
   4210c:	df000115 	stw	fp,4(sp)
   42110:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
   42114:	01005104 	movi	r4,324
   42118:	00411880 	call	41188 <UsbRead>
   4211c:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
   42120:	01005104 	movi	r4,324
   42124:	000b883a 	mov	r5,zero
   42128:	00411340 	call	41134 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
   4212c:	00000d06 	br	42164 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
   42130:	e0bfff0b 	ldhu	r2,-4(fp)
   42134:	10000526 	beq	r2,zero,4214c <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
   42138:	e0bfff0b 	ldhu	r2,-4(fp)
   4213c:	01000174 	movhi	r4,5
   42140:	2106e404 	addi	r4,r4,7056
   42144:	100b883a 	mov	r5,r2
   42148:	00422b00 	call	422b0 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
   4214c:	01005104 	movi	r4,324
   42150:	00411880 	call	41188 <UsbRead>
   42154:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
   42158:	01005104 	movi	r4,324
   4215c:	000b883a 	mov	r5,zero
   42160:	00411340 	call	41134 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
   42164:	e0bfff0b 	ldhu	r2,-4(fp)
   42168:	10840018 	cmpnei	r2,r2,4096
   4216c:	103ff01e 	bne	r2,zero,42130 <__alt_data_end+0xfffc2130>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
   42170:	e0bfff0b 	ldhu	r2,-4(fp)
}
   42174:	e037883a 	mov	sp,fp
   42178:	dfc00117 	ldw	ra,4(sp)
   4217c:	df000017 	ldw	fp,0(sp)
   42180:	dec00204 	addi	sp,sp,8
   42184:	f800283a 	ret

00042188 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
   42188:	defffd04 	addi	sp,sp,-12
   4218c:	dfc00215 	stw	ra,8(sp)
   42190:	df000115 	stw	fp,4(sp)
   42194:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
   42198:	010000c4 	movi	r4,3
   4219c:	00402f40 	call	402f4 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
   421a0:	01005104 	movi	r4,324
   421a4:	00411880 	call	41188 <UsbRead>
   421a8:	10bfffcc 	andi	r2,r2,65535
   421ac:	10840018 	cmpnei	r2,r2,4096
   421b0:	1000091e 	bne	r2,zero,421d8 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
   421b4:	01005104 	movi	r4,324
   421b8:	000b883a 	mov	r5,zero
   421bc:	00411340 	call	41134 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
   421c0:	0001883a 	nop
   421c4:	010000c4 	movi	r4,3
   421c8:	00402f40 	call	402f4 <IO_read>
   421cc:	10bfffcc 	andi	r2,r2,65535
   421d0:	1080040c 	andi	r2,r2,16
   421d4:	103ffb26 	beq	r2,zero,421c4 <__alt_data_end+0xfffc21c4>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
   421d8:	01000084 	movi	r4,2
   421dc:	01414204 	movi	r5,1288
   421e0:	004025c0 	call	4025c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
   421e4:	0009883a 	mov	r4,zero
   421e8:	00402f40 	call	402f4 <IO_read>
   421ec:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
   421f0:	e0bfff0b 	ldhu	r2,-4(fp)
}
   421f4:	e037883a 	mov	sp,fp
   421f8:	dfc00117 	ldw	ra,4(sp)
   421fc:	df000017 	ldw	fp,0(sp)
   42200:	dec00204 	addi	sp,sp,8
   42204:	f800283a 	ret

00042208 <UsbPrintMem>:


void UsbPrintMem()
{
   42208:	defffc04 	addi	sp,sp,-16
   4220c:	dfc00315 	stw	ra,12(sp)
   42210:	df000215 	stw	fp,8(sp)
   42214:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
   42218:	01000084 	movi	r4,2
   4221c:	01414004 	movi	r5,1280
   42220:	004025c0 	call	4025c <IO_write>
	for (i = 0; i <= 200; i += 2)
   42224:	e03ffe15 	stw	zero,-8(fp)
   42228:	00000e06 	br	42264 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
   4222c:	0009883a 	mov	r4,zero
   42230:	00402f40 	call	402f4 <IO_read>
   42234:	10bfffcc 	andi	r2,r2,65535
   42238:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
   4223c:	e0bffe17 	ldw	r2,-8(fp)
   42240:	10814004 	addi	r2,r2,1280
   42244:	01000174 	movhi	r4,5
   42248:	2106ec04 	addi	r4,r4,7088
   4224c:	100b883a 	mov	r5,r2
   42250:	e1bfff17 	ldw	r6,-4(fp)
   42254:	00422b00 	call	422b0 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
   42258:	e0bffe17 	ldw	r2,-8(fp)
   4225c:	10800084 	addi	r2,r2,2
   42260:	e0bffe15 	stw	r2,-8(fp)
   42264:	e0bffe17 	ldw	r2,-8(fp)
   42268:	10803250 	cmplti	r2,r2,201
   4226c:	103fef1e 	bne	r2,zero,4222c <__alt_data_end+0xfffc222c>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
   42270:	e037883a 	mov	sp,fp
   42274:	dfc00117 	ldw	ra,4(sp)
   42278:	df000017 	ldw	fp,0(sp)
   4227c:	dec00204 	addi	sp,sp,8
   42280:	f800283a 	ret

00042284 <_printf_r>:
   42284:	defffd04 	addi	sp,sp,-12
   42288:	dfc00015 	stw	ra,0(sp)
   4228c:	d9800115 	stw	r6,4(sp)
   42290:	d9c00215 	stw	r7,8(sp)
   42294:	280d883a 	mov	r6,r5
   42298:	21400217 	ldw	r5,8(r4)
   4229c:	d9c00104 	addi	r7,sp,4
   422a0:	00424500 	call	42450 <___vfprintf_internal_r>
   422a4:	dfc00017 	ldw	ra,0(sp)
   422a8:	dec00304 	addi	sp,sp,12
   422ac:	f800283a 	ret

000422b0 <printf>:
   422b0:	defffc04 	addi	sp,sp,-16
   422b4:	dfc00015 	stw	ra,0(sp)
   422b8:	d9400115 	stw	r5,4(sp)
   422bc:	d9800215 	stw	r6,8(sp)
   422c0:	d9c00315 	stw	r7,12(sp)
   422c4:	00800174 	movhi	r2,5
   422c8:	108e5d04 	addi	r2,r2,14708
   422cc:	10800017 	ldw	r2,0(r2)
   422d0:	200b883a 	mov	r5,r4
   422d4:	d9800104 	addi	r6,sp,4
   422d8:	11000217 	ldw	r4,8(r2)
   422dc:	004454c0 	call	4454c <__vfprintf_internal>
   422e0:	dfc00017 	ldw	ra,0(sp)
   422e4:	dec00404 	addi	sp,sp,16
   422e8:	f800283a 	ret

000422ec <_puts_r>:
   422ec:	defff604 	addi	sp,sp,-40
   422f0:	dc000715 	stw	r16,28(sp)
   422f4:	2021883a 	mov	r16,r4
   422f8:	2809883a 	mov	r4,r5
   422fc:	dc400815 	stw	r17,32(sp)
   42300:	dfc00915 	stw	ra,36(sp)
   42304:	2823883a 	mov	r17,r5
   42308:	00423b80 	call	423b8 <strlen>
   4230c:	00c00174 	movhi	r3,5
   42310:	18ce5d04 	addi	r3,r3,14708
   42314:	18c00017 	ldw	r3,0(r3)
   42318:	11000044 	addi	r4,r2,1
   4231c:	d8800115 	stw	r2,4(sp)
   42320:	18c00217 	ldw	r3,8(r3)
   42324:	01400174 	movhi	r5,5
   42328:	2946f104 	addi	r5,r5,7108
   4232c:	1880030b 	ldhu	r2,12(r3)
   42330:	d9400215 	stw	r5,8(sp)
   42334:	d9000615 	stw	r4,24(sp)
   42338:	01400044 	movi	r5,1
   4233c:	01000084 	movi	r4,2
   42340:	d9000515 	stw	r4,20(sp)
   42344:	dc400015 	stw	r17,0(sp)
   42348:	d9400315 	stw	r5,12(sp)
   4234c:	dec00415 	stw	sp,16(sp)
   42350:	1108000c 	andi	r4,r2,8192
   42354:	2000061e 	bne	r4,zero,42370 <_puts_r+0x84>
   42358:	19401917 	ldw	r5,100(r3)
   4235c:	0137ffc4 	movi	r4,-8193
   42360:	10880014 	ori	r2,r2,8192
   42364:	2908703a 	and	r4,r5,r4
   42368:	1880030d 	sth	r2,12(r3)
   4236c:	19001915 	stw	r4,100(r3)
   42370:	81400217 	ldw	r5,8(r16)
   42374:	8009883a 	mov	r4,r16
   42378:	d9800404 	addi	r6,sp,16
   4237c:	0046a100 	call	46a10 <__sfvwrite_r>
   42380:	1000061e 	bne	r2,zero,4239c <_puts_r+0xb0>
   42384:	00800284 	movi	r2,10
   42388:	dfc00917 	ldw	ra,36(sp)
   4238c:	dc400817 	ldw	r17,32(sp)
   42390:	dc000717 	ldw	r16,28(sp)
   42394:	dec00a04 	addi	sp,sp,40
   42398:	f800283a 	ret
   4239c:	00bfffc4 	movi	r2,-1
   423a0:	003ff906 	br	42388 <__alt_data_end+0xfffc2388>

000423a4 <puts>:
   423a4:	00800174 	movhi	r2,5
   423a8:	108e5d04 	addi	r2,r2,14708
   423ac:	200b883a 	mov	r5,r4
   423b0:	11000017 	ldw	r4,0(r2)
   423b4:	00422ec1 	jmpi	422ec <_puts_r>

000423b8 <strlen>:
   423b8:	208000cc 	andi	r2,r4,3
   423bc:	10002026 	beq	r2,zero,42440 <strlen+0x88>
   423c0:	20800007 	ldb	r2,0(r4)
   423c4:	10002026 	beq	r2,zero,42448 <strlen+0x90>
   423c8:	2005883a 	mov	r2,r4
   423cc:	00000206 	br	423d8 <strlen+0x20>
   423d0:	10c00007 	ldb	r3,0(r2)
   423d4:	18001826 	beq	r3,zero,42438 <strlen+0x80>
   423d8:	10800044 	addi	r2,r2,1
   423dc:	10c000cc 	andi	r3,r2,3
   423e0:	183ffb1e 	bne	r3,zero,423d0 <__alt_data_end+0xfffc23d0>
   423e4:	10c00017 	ldw	r3,0(r2)
   423e8:	01ffbff4 	movhi	r7,65279
   423ec:	39ffbfc4 	addi	r7,r7,-257
   423f0:	00ca303a 	nor	r5,zero,r3
   423f4:	01a02074 	movhi	r6,32897
   423f8:	19c7883a 	add	r3,r3,r7
   423fc:	31a02004 	addi	r6,r6,-32640
   42400:	1946703a 	and	r3,r3,r5
   42404:	1986703a 	and	r3,r3,r6
   42408:	1800091e 	bne	r3,zero,42430 <strlen+0x78>
   4240c:	10800104 	addi	r2,r2,4
   42410:	10c00017 	ldw	r3,0(r2)
   42414:	19cb883a 	add	r5,r3,r7
   42418:	00c6303a 	nor	r3,zero,r3
   4241c:	28c6703a 	and	r3,r5,r3
   42420:	1986703a 	and	r3,r3,r6
   42424:	183ff926 	beq	r3,zero,4240c <__alt_data_end+0xfffc240c>
   42428:	00000106 	br	42430 <strlen+0x78>
   4242c:	10800044 	addi	r2,r2,1
   42430:	10c00007 	ldb	r3,0(r2)
   42434:	183ffd1e 	bne	r3,zero,4242c <__alt_data_end+0xfffc242c>
   42438:	1105c83a 	sub	r2,r2,r4
   4243c:	f800283a 	ret
   42440:	2005883a 	mov	r2,r4
   42444:	003fe706 	br	423e4 <__alt_data_end+0xfffc23e4>
   42448:	0005883a 	mov	r2,zero
   4244c:	f800283a 	ret

00042450 <___vfprintf_internal_r>:
   42450:	defeb604 	addi	sp,sp,-1320
   42454:	dfc14915 	stw	ra,1316(sp)
   42458:	ddc14715 	stw	r23,1308(sp)
   4245c:	dd814615 	stw	r22,1304(sp)
   42460:	202f883a 	mov	r23,r4
   42464:	282d883a 	mov	r22,r5
   42468:	d9812a15 	stw	r6,1192(sp)
   4246c:	d9c12d15 	stw	r7,1204(sp)
   42470:	df014815 	stw	fp,1312(sp)
   42474:	dd414515 	stw	r21,1300(sp)
   42478:	dd014415 	stw	r20,1296(sp)
   4247c:	dcc14315 	stw	r19,1292(sp)
   42480:	dc814215 	stw	r18,1288(sp)
   42484:	dc414115 	stw	r17,1284(sp)
   42488:	dc014015 	stw	r16,1280(sp)
   4248c:	00470d00 	call	470d0 <_localeconv_r>
   42490:	10800017 	ldw	r2,0(r2)
   42494:	1009883a 	mov	r4,r2
   42498:	d8813515 	stw	r2,1236(sp)
   4249c:	00423b80 	call	423b8 <strlen>
   424a0:	d8813815 	stw	r2,1248(sp)
   424a4:	b8000226 	beq	r23,zero,424b0 <___vfprintf_internal_r+0x60>
   424a8:	b8800e17 	ldw	r2,56(r23)
   424ac:	10010526 	beq	r2,zero,428c4 <___vfprintf_internal_r+0x474>
   424b0:	b0c0030b 	ldhu	r3,12(r22)
   424b4:	1908000c 	andi	r4,r3,8192
   424b8:	1805883a 	mov	r2,r3
   424bc:	2000071e 	bne	r4,zero,424dc <___vfprintf_internal_r+0x8c>
   424c0:	b1001917 	ldw	r4,100(r22)
   424c4:	18880014 	ori	r2,r3,8192
   424c8:	00f7ffc4 	movi	r3,-8193
   424cc:	20c8703a 	and	r4,r4,r3
   424d0:	b080030d 	sth	r2,12(r22)
   424d4:	1007883a 	mov	r3,r2
   424d8:	b1001915 	stw	r4,100(r22)
   424dc:	1100020c 	andi	r4,r2,8
   424e0:	2000a826 	beq	r4,zero,42784 <___vfprintf_internal_r+0x334>
   424e4:	b1000417 	ldw	r4,16(r22)
   424e8:	2000a626 	beq	r4,zero,42784 <___vfprintf_internal_r+0x334>
   424ec:	1080068c 	andi	r2,r2,26
   424f0:	01000284 	movi	r4,10
   424f4:	1100ac26 	beq	r2,r4,427a8 <___vfprintf_internal_r+0x358>
   424f8:	d8c10e04 	addi	r3,sp,1080
   424fc:	d9010dc4 	addi	r4,sp,1079
   42500:	d9400404 	addi	r5,sp,16
   42504:	05000174 	movhi	r20,5
   42508:	1905c83a 	sub	r2,r3,r4
   4250c:	a5070284 	addi	r20,r20,7178
   42510:	d8c12815 	stw	r3,1184(sp)
   42514:	d9012915 	stw	r4,1188(sp)
   42518:	d9411e15 	stw	r5,1144(sp)
   4251c:	d8012015 	stw	zero,1152(sp)
   42520:	d8011f15 	stw	zero,1148(sp)
   42524:	d8013315 	stw	zero,1228(sp)
   42528:	d8013715 	stw	zero,1244(sp)
   4252c:	d8013915 	stw	zero,1252(sp)
   42530:	d8013b15 	stw	zero,1260(sp)
   42534:	d8013a15 	stw	zero,1256(sp)
   42538:	d8012f15 	stw	zero,1212(sp)
   4253c:	2811883a 	mov	r8,r5
   42540:	d8813c15 	stw	r2,1264(sp)
   42544:	d8c12a17 	ldw	r3,1192(sp)
   42548:	18800007 	ldb	r2,0(r3)
   4254c:	10021326 	beq	r2,zero,42d9c <___vfprintf_internal_r+0x94c>
   42550:	00c00944 	movi	r3,37
   42554:	dc012a17 	ldw	r16,1192(sp)
   42558:	10c0021e 	bne	r2,r3,42564 <___vfprintf_internal_r+0x114>
   4255c:	00001606 	br	425b8 <___vfprintf_internal_r+0x168>
   42560:	10c08526 	beq	r2,r3,42778 <___vfprintf_internal_r+0x328>
   42564:	84000044 	addi	r16,r16,1
   42568:	80800007 	ldb	r2,0(r16)
   4256c:	103ffc1e 	bne	r2,zero,42560 <__alt_data_end+0xfffc2560>
   42570:	d9012a17 	ldw	r4,1192(sp)
   42574:	8123c83a 	sub	r17,r16,r4
   42578:	88000f26 	beq	r17,zero,425b8 <___vfprintf_internal_r+0x168>
   4257c:	d8812a17 	ldw	r2,1192(sp)
   42580:	d8c12017 	ldw	r3,1152(sp)
   42584:	44400115 	stw	r17,4(r8)
   42588:	40800015 	stw	r2,0(r8)
   4258c:	d8811f17 	ldw	r2,1148(sp)
   42590:	1c47883a 	add	r3,r3,r17
   42594:	d8c12015 	stw	r3,1152(sp)
   42598:	10800044 	addi	r2,r2,1
   4259c:	d8811f15 	stw	r2,1148(sp)
   425a0:	00c001c4 	movi	r3,7
   425a4:	1880b516 	blt	r3,r2,4287c <___vfprintf_internal_r+0x42c>
   425a8:	42000204 	addi	r8,r8,8
   425ac:	d8c12f17 	ldw	r3,1212(sp)
   425b0:	1c47883a 	add	r3,r3,r17
   425b4:	d8c12f15 	stw	r3,1212(sp)
   425b8:	80800007 	ldb	r2,0(r16)
   425bc:	1000b626 	beq	r2,zero,42898 <___vfprintf_internal_r+0x448>
   425c0:	80800044 	addi	r2,r16,1
   425c4:	84000047 	ldb	r16,1(r16)
   425c8:	0027883a 	mov	r19,zero
   425cc:	0039883a 	mov	fp,zero
   425d0:	dcc12b05 	stb	r19,1196(sp)
   425d4:	d8012785 	stb	zero,1182(sp)
   425d8:	027fffc4 	movi	r9,-1
   425dc:	d8012e15 	stw	zero,1208(sp)
   425e0:	04401604 	movi	r17,88
   425e4:	04800244 	movi	r18,9
   425e8:	da012a15 	stw	r8,1192(sp)
   425ec:	e027883a 	mov	r19,fp
   425f0:	17000044 	addi	fp,r2,1
   425f4:	80bff804 	addi	r2,r16,-32
   425f8:	88831236 	bltu	r17,r2,43244 <___vfprintf_internal_r+0xdf4>
   425fc:	100490ba 	slli	r2,r2,2
   42600:	01000134 	movhi	r4,4
   42604:	21098504 	addi	r4,r4,9748
   42608:	1105883a 	add	r2,r2,r4
   4260c:	10800017 	ldw	r2,0(r2)
   42610:	1000683a 	jmp	r2
   42614:	00043160 	cmpeqi	zero,zero,4293
   42618:	00043244 	movi	zero,4297
   4261c:	00043244 	movi	zero,4297
   42620:	0004317c 	xorhi	zero,zero,4293
   42624:	00043244 	movi	zero,4297
   42628:	00043244 	movi	zero,4297
   4262c:	00043244 	movi	zero,4297
   42630:	00043244 	movi	zero,4297
   42634:	00043244 	movi	zero,4297
   42638:	00043244 	movi	zero,4297
   4263c:	0004318c 	andi	zero,zero,4294
   42640:	000431b4 	movhi	zero,4294
   42644:	00043244 	movi	zero,4297
   42648:	000428d0 	cmplti	zero,zero,4259
   4264c:	000428e0 	cmpeqi	zero,zero,4259
   42650:	00043244 	movi	zero,4297
   42654:	00042930 	cmpltui	zero,zero,4260
   42658:	00042940 	call	4294 <__alt_mem_onchip_memory2_0-0x3bd6c>
   4265c:	00042940 	call	4294 <__alt_mem_onchip_memory2_0-0x3bd6c>
   42660:	00042940 	call	4294 <__alt_mem_onchip_memory2_0-0x3bd6c>
   42664:	00042940 	call	4294 <__alt_mem_onchip_memory2_0-0x3bd6c>
   42668:	00042940 	call	4294 <__alt_mem_onchip_memory2_0-0x3bd6c>
   4266c:	00042940 	call	4294 <__alt_mem_onchip_memory2_0-0x3bd6c>
   42670:	00042940 	call	4294 <__alt_mem_onchip_memory2_0-0x3bd6c>
   42674:	00042940 	call	4294 <__alt_mem_onchip_memory2_0-0x3bd6c>
   42678:	00042940 	call	4294 <__alt_mem_onchip_memory2_0-0x3bd6c>
   4267c:	00043244 	movi	zero,4297
   42680:	00043244 	movi	zero,4297
   42684:	00043244 	movi	zero,4297
   42688:	00043244 	movi	zero,4297
   4268c:	00043244 	movi	zero,4297
   42690:	00043244 	movi	zero,4297
   42694:	00043244 	movi	zero,4297
   42698:	00043244 	movi	zero,4297
   4269c:	00043244 	movi	zero,4297
   426a0:	00043244 	movi	zero,4297
   426a4:	00042984 	movi	zero,4262
   426a8:	00042da4 	muli	zero,zero,4278
   426ac:	00043244 	movi	zero,4297
   426b0:	00042da4 	muli	zero,zero,4278
   426b4:	00043244 	movi	zero,4297
   426b8:	00043244 	movi	zero,4297
   426bc:	00043244 	movi	zero,4297
   426c0:	00043244 	movi	zero,4297
   426c4:	00042e4c 	andi	zero,zero,4281
   426c8:	00043244 	movi	zero,4297
   426cc:	00043244 	movi	zero,4297
   426d0:	00042e5c 	xori	zero,zero,4281
   426d4:	00043244 	movi	zero,4297
   426d8:	00043244 	movi	zero,4297
   426dc:	00043244 	movi	zero,4297
   426e0:	00043244 	movi	zero,4297
   426e4:	00043244 	movi	zero,4297
   426e8:	00042ea0 	cmpeqi	zero,zero,4282
   426ec:	00043244 	movi	zero,4297
   426f0:	00043244 	movi	zero,4297
   426f4:	00042ed8 	cmpnei	zero,zero,4283
   426f8:	00043244 	movi	zero,4297
   426fc:	00043244 	movi	zero,4297
   42700:	00043244 	movi	zero,4297
   42704:	00043244 	movi	zero,4297
   42708:	00043244 	movi	zero,4297
   4270c:	00043244 	movi	zero,4297
   42710:	00043244 	movi	zero,4297
   42714:	00043244 	movi	zero,4297
   42718:	00043244 	movi	zero,4297
   4271c:	00043244 	movi	zero,4297
   42720:	00043114 	movui	zero,4292
   42724:	000430c0 	call	430c <__alt_mem_onchip_memory2_0-0x3bcf4>
   42728:	00042da4 	muli	zero,zero,4278
   4272c:	00042da4 	muli	zero,zero,4278
   42730:	00042da4 	muli	zero,zero,4278
   42734:	00043104 	movi	zero,4292
   42738:	000430c0 	call	430c <__alt_mem_onchip_memory2_0-0x3bcf4>
   4273c:	00043244 	movi	zero,4297
   42740:	00043244 	movi	zero,4297
   42744:	00042fdc 	xori	zero,zero,4287
   42748:	00043244 	movi	zero,4297
   4274c:	00042ff4 	movhi	zero,4287
   42750:	00043034 	movhi	zero,4288
   42754:	00043074 	movhi	zero,4289
   42758:	00042f40 	call	42f4 <__alt_mem_onchip_memory2_0-0x3bd0c>
   4275c:	00043244 	movi	zero,4297
   42760:	000431c8 	cmpgei	zero,zero,4295
   42764:	00043244 	movi	zero,4297
   42768:	00042f50 	cmplti	zero,zero,4285
   4276c:	00043244 	movi	zero,4297
   42770:	00043244 	movi	zero,4297
   42774:	00042f90 	cmplti	zero,zero,4286
   42778:	d9412a17 	ldw	r5,1192(sp)
   4277c:	8163c83a 	sub	r17,r16,r5
   42780:	003f7d06 	br	42578 <__alt_data_end+0xfffc2578>
   42784:	b809883a 	mov	r4,r23
   42788:	b00b883a 	mov	r5,r22
   4278c:	00445700 	call	44570 <__swsetup_r>
   42790:	10002d1e 	bne	r2,zero,42848 <___vfprintf_internal_r+0x3f8>
   42794:	b0c0030b 	ldhu	r3,12(r22)
   42798:	01000284 	movi	r4,10
   4279c:	1805883a 	mov	r2,r3
   427a0:	1080068c 	andi	r2,r2,26
   427a4:	113f541e 	bne	r2,r4,424f8 <__alt_data_end+0xfffc24f8>
   427a8:	b080038b 	ldhu	r2,14(r22)
   427ac:	113fffcc 	andi	r4,r2,65535
   427b0:	2120001c 	xori	r4,r4,32768
   427b4:	21200004 	addi	r4,r4,-32768
   427b8:	203f4f16 	blt	r4,zero,424f8 <__alt_data_end+0xfffc24f8>
   427bc:	b2c01917 	ldw	r11,100(r22)
   427c0:	b2800717 	ldw	r10,28(r22)
   427c4:	b2400917 	ldw	r9,36(r22)
   427c8:	d9812a17 	ldw	r6,1192(sp)
   427cc:	d9c12d17 	ldw	r7,1204(sp)
   427d0:	02010004 	movi	r8,1024
   427d4:	18ffff4c 	andi	r3,r3,65533
   427d8:	d881078d 	sth	r2,1054(sp)
   427dc:	b809883a 	mov	r4,r23
   427e0:	d8800404 	addi	r2,sp,16
   427e4:	d9410404 	addi	r5,sp,1040
   427e8:	d8c1070d 	sth	r3,1052(sp)
   427ec:	dac11d15 	stw	r11,1140(sp)
   427f0:	da810b15 	stw	r10,1068(sp)
   427f4:	da410d15 	stw	r9,1076(sp)
   427f8:	d8810415 	stw	r2,1040(sp)
   427fc:	d8810815 	stw	r2,1056(sp)
   42800:	da010615 	stw	r8,1048(sp)
   42804:	da010915 	stw	r8,1060(sp)
   42808:	d8010a15 	stw	zero,1064(sp)
   4280c:	00424500 	call	42450 <___vfprintf_internal_r>
   42810:	1021883a 	mov	r16,r2
   42814:	10000416 	blt	r2,zero,42828 <___vfprintf_internal_r+0x3d8>
   42818:	b809883a 	mov	r4,r23
   4281c:	d9410404 	addi	r5,sp,1040
   42820:	0045ff00 	call	45ff0 <_fflush_r>
   42824:	1007301e 	bne	r2,zero,444e8 <___vfprintf_internal_r+0x2098>
   42828:	d881070b 	ldhu	r2,1052(sp)
   4282c:	1080100c 	andi	r2,r2,64
   42830:	10000326 	beq	r2,zero,42840 <___vfprintf_internal_r+0x3f0>
   42834:	b080030b 	ldhu	r2,12(r22)
   42838:	10801014 	ori	r2,r2,64
   4283c:	b080030d 	sth	r2,12(r22)
   42840:	8005883a 	mov	r2,r16
   42844:	00000106 	br	4284c <___vfprintf_internal_r+0x3fc>
   42848:	00bfffc4 	movi	r2,-1
   4284c:	dfc14917 	ldw	ra,1316(sp)
   42850:	df014817 	ldw	fp,1312(sp)
   42854:	ddc14717 	ldw	r23,1308(sp)
   42858:	dd814617 	ldw	r22,1304(sp)
   4285c:	dd414517 	ldw	r21,1300(sp)
   42860:	dd014417 	ldw	r20,1296(sp)
   42864:	dcc14317 	ldw	r19,1292(sp)
   42868:	dc814217 	ldw	r18,1288(sp)
   4286c:	dc414117 	ldw	r17,1284(sp)
   42870:	dc014017 	ldw	r16,1280(sp)
   42874:	dec14a04 	addi	sp,sp,1320
   42878:	f800283a 	ret
   4287c:	b809883a 	mov	r4,r23
   42880:	b00b883a 	mov	r5,r22
   42884:	d9811e04 	addi	r6,sp,1144
   42888:	00498900 	call	49890 <__sprint_r>
   4288c:	1000081e 	bne	r2,zero,428b0 <___vfprintf_internal_r+0x460>
   42890:	da000404 	addi	r8,sp,16
   42894:	003f4506 	br	425ac <__alt_data_end+0xfffc25ac>
   42898:	d8812017 	ldw	r2,1152(sp)
   4289c:	10000426 	beq	r2,zero,428b0 <___vfprintf_internal_r+0x460>
   428a0:	b809883a 	mov	r4,r23
   428a4:	b00b883a 	mov	r5,r22
   428a8:	d9811e04 	addi	r6,sp,1144
   428ac:	00498900 	call	49890 <__sprint_r>
   428b0:	b080030b 	ldhu	r2,12(r22)
   428b4:	1080100c 	andi	r2,r2,64
   428b8:	103fe31e 	bne	r2,zero,42848 <__alt_data_end+0xfffc2848>
   428bc:	d8812f17 	ldw	r2,1212(sp)
   428c0:	003fe206 	br	4284c <__alt_data_end+0xfffc284c>
   428c4:	b809883a 	mov	r4,r23
   428c8:	00465ac0 	call	465ac <__sinit>
   428cc:	003ef806 	br	424b0 <__alt_data_end+0xfffc24b0>
   428d0:	e005883a 	mov	r2,fp
   428d4:	9cc00114 	ori	r19,r19,4
   428d8:	e4000007 	ldb	r16,0(fp)
   428dc:	003f4406 	br	425f0 <__alt_data_end+0xfffc25f0>
   428e0:	e4000007 	ldb	r16,0(fp)
   428e4:	01000a84 	movi	r4,42
   428e8:	e0800044 	addi	r2,fp,1
   428ec:	8106f626 	beq	r16,r4,444c8 <___vfprintf_internal_r+0x2078>
   428f0:	857ff404 	addi	r21,r16,-48
   428f4:	1039883a 	mov	fp,r2
   428f8:	0013883a 	mov	r9,zero
   428fc:	957f3d36 	bltu	r18,r21,425f4 <__alt_data_end+0xfffc25f4>
   42900:	0009883a 	mov	r4,zero
   42904:	01400284 	movi	r5,10
   42908:	004c3c40 	call	4c3c4 <__mulsi3>
   4290c:	e4000007 	ldb	r16,0(fp)
   42910:	a889883a 	add	r4,r21,r2
   42914:	e7000044 	addi	fp,fp,1
   42918:	857ff404 	addi	r21,r16,-48
   4291c:	957ff92e 	bgeu	r18,r21,42904 <__alt_data_end+0xfffc2904>
   42920:	2013883a 	mov	r9,r4
   42924:	203f330e 	bge	r4,zero,425f4 <__alt_data_end+0xfffc25f4>
   42928:	027fffc4 	movi	r9,-1
   4292c:	003f3106 	br	425f4 <__alt_data_end+0xfffc25f4>
   42930:	9cc02014 	ori	r19,r19,128
   42934:	e005883a 	mov	r2,fp
   42938:	e4000007 	ldb	r16,0(fp)
   4293c:	003f2c06 	br	425f0 <__alt_data_end+0xfffc25f0>
   42940:	857ff404 	addi	r21,r16,-48
   42944:	d8012e15 	stw	zero,1208(sp)
   42948:	e021883a 	mov	r16,fp
   4294c:	0009883a 	mov	r4,zero
   42950:	da412c15 	stw	r9,1200(sp)
   42954:	01400284 	movi	r5,10
   42958:	004c3c40 	call	4c3c4 <__mulsi3>
   4295c:	81400007 	ldb	r5,0(r16)
   42960:	1549883a 	add	r4,r2,r21
   42964:	e7000044 	addi	fp,fp,1
   42968:	2d7ff404 	addi	r21,r5,-48
   4296c:	e021883a 	mov	r16,fp
   42970:	957ff82e 	bgeu	r18,r21,42954 <__alt_data_end+0xfffc2954>
   42974:	2821883a 	mov	r16,r5
   42978:	d9012e15 	stw	r4,1208(sp)
   4297c:	da412c17 	ldw	r9,1200(sp)
   42980:	003f1c06 	br	425f4 <__alt_data_end+0xfffc25f4>
   42984:	da012a17 	ldw	r8,1192(sp)
   42988:	df012a15 	stw	fp,1192(sp)
   4298c:	9839883a 	mov	fp,r19
   42990:	dcc12b03 	ldbu	r19,1196(sp)
   42994:	e7000414 	ori	fp,fp,16
   42998:	e080080c 	andi	r2,fp,32
   4299c:	dcc12785 	stb	r19,1182(sp)
   429a0:	d8c12d17 	ldw	r3,1204(sp)
   429a4:	1001ce26 	beq	r2,zero,430e0 <___vfprintf_internal_r+0xc90>
   429a8:	d9012d17 	ldw	r4,1204(sp)
   429ac:	18800117 	ldw	r2,4(r3)
   429b0:	1c800017 	ldw	r18,0(r3)
   429b4:	21000204 	addi	r4,r4,8
   429b8:	d9012d15 	stw	r4,1204(sp)
   429bc:	102b883a 	mov	r21,r2
   429c0:	10044916 	blt	r2,zero,43ae8 <___vfprintf_internal_r+0x1698>
   429c4:	dcc12783 	ldbu	r19,1182(sp)
   429c8:	da413215 	stw	r9,1224(sp)
   429cc:	00800044 	movi	r2,1
   429d0:	9546b03a 	or	r3,r18,r21
   429d4:	48000216 	blt	r9,zero,429e0 <___vfprintf_internal_r+0x590>
   429d8:	013fdfc4 	movi	r4,-129
   429dc:	e138703a 	and	fp,fp,r4
   429e0:	1802251e 	bne	r3,zero,43278 <___vfprintf_internal_r+0xe28>
   429e4:	48031726 	beq	r9,zero,43644 <___vfprintf_internal_r+0x11f4>
   429e8:	10803fcc 	andi	r2,r2,255
   429ec:	00c00044 	movi	r3,1
   429f0:	10c24526 	beq	r2,r3,43308 <___vfprintf_internal_r+0xeb8>
   429f4:	00c00084 	movi	r3,2
   429f8:	10c33426 	beq	r2,r3,436cc <___vfprintf_internal_r+0x127c>
   429fc:	d8c10e04 	addi	r3,sp,1080
   42a00:	9008d0fa 	srli	r4,r18,3
   42a04:	a80a977a 	slli	r5,r21,29
   42a08:	a82ad0fa 	srli	r21,r21,3
   42a0c:	948001cc 	andi	r18,r18,7
   42a10:	90800c04 	addi	r2,r18,48
   42a14:	18ffffc4 	addi	r3,r3,-1
   42a18:	2924b03a 	or	r18,r5,r4
   42a1c:	18800005 	stb	r2,0(r3)
   42a20:	9548b03a 	or	r4,r18,r21
   42a24:	203ff61e 	bne	r4,zero,42a00 <__alt_data_end+0xfffc2a00>
   42a28:	e100004c 	andi	r4,fp,1
   42a2c:	d8c13115 	stw	r3,1220(sp)
   42a30:	20039a1e 	bne	r4,zero,4389c <___vfprintf_internal_r+0x144c>
   42a34:	d8812817 	ldw	r2,1184(sp)
   42a38:	10e3c83a 	sub	r17,r2,r3
   42a3c:	8805883a 	mov	r2,r17
   42a40:	8a40010e 	bge	r17,r9,42a48 <___vfprintf_internal_r+0x5f8>
   42a44:	4805883a 	mov	r2,r9
   42a48:	d8812b15 	stw	r2,1196(sp)
   42a4c:	d8013415 	stw	zero,1232(sp)
   42a50:	98803fcc 	andi	r2,r19,255
   42a54:	1080201c 	xori	r2,r2,128
   42a58:	10bfe004 	addi	r2,r2,-128
   42a5c:	10000326 	beq	r2,zero,42a6c <___vfprintf_internal_r+0x61c>
   42a60:	d8c12b17 	ldw	r3,1196(sp)
   42a64:	18c00044 	addi	r3,r3,1
   42a68:	d8c12b15 	stw	r3,1196(sp)
   42a6c:	e0c0008c 	andi	r3,fp,2
   42a70:	d8c12c15 	stw	r3,1200(sp)
   42a74:	18000326 	beq	r3,zero,42a84 <___vfprintf_internal_r+0x634>
   42a78:	d8c12b17 	ldw	r3,1196(sp)
   42a7c:	18c00084 	addi	r3,r3,2
   42a80:	d8c12b15 	stw	r3,1196(sp)
   42a84:	e0c0210c 	andi	r3,fp,132
   42a88:	d8c13015 	stw	r3,1216(sp)
   42a8c:	1801f81e 	bne	r3,zero,43270 <___vfprintf_internal_r+0xe20>
   42a90:	d9012e17 	ldw	r4,1208(sp)
   42a94:	d8c12b17 	ldw	r3,1196(sp)
   42a98:	20ebc83a 	sub	r21,r4,r3
   42a9c:	0541f40e 	bge	zero,r21,43270 <___vfprintf_internal_r+0xe20>
   42aa0:	02400404 	movi	r9,16
   42aa4:	d8c12017 	ldw	r3,1152(sp)
   42aa8:	d8811f17 	ldw	r2,1148(sp)
   42aac:	4d45750e 	bge	r9,r21,44084 <___vfprintf_internal_r+0x1c34>
   42ab0:	01400174 	movhi	r5,5
   42ab4:	29470684 	addi	r5,r5,7194
   42ab8:	d9413615 	stw	r5,1240(sp)
   42abc:	4827883a 	mov	r19,r9
   42ac0:	048001c4 	movi	r18,7
   42ac4:	00000306 	br	42ad4 <___vfprintf_internal_r+0x684>
   42ac8:	ad7ffc04 	addi	r21,r21,-16
   42acc:	42000204 	addi	r8,r8,8
   42ad0:	9d40130e 	bge	r19,r21,42b20 <___vfprintf_internal_r+0x6d0>
   42ad4:	01000174 	movhi	r4,5
   42ad8:	18c00404 	addi	r3,r3,16
   42adc:	10800044 	addi	r2,r2,1
   42ae0:	21070684 	addi	r4,r4,7194
   42ae4:	41000015 	stw	r4,0(r8)
   42ae8:	44c00115 	stw	r19,4(r8)
   42aec:	d8c12015 	stw	r3,1152(sp)
   42af0:	d8811f15 	stw	r2,1148(sp)
   42af4:	90bff40e 	bge	r18,r2,42ac8 <__alt_data_end+0xfffc2ac8>
   42af8:	b809883a 	mov	r4,r23
   42afc:	b00b883a 	mov	r5,r22
   42b00:	d9811e04 	addi	r6,sp,1144
   42b04:	00498900 	call	49890 <__sprint_r>
   42b08:	103f691e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   42b0c:	ad7ffc04 	addi	r21,r21,-16
   42b10:	d8c12017 	ldw	r3,1152(sp)
   42b14:	d8811f17 	ldw	r2,1148(sp)
   42b18:	da000404 	addi	r8,sp,16
   42b1c:	9d7fed16 	blt	r19,r21,42ad4 <__alt_data_end+0xfffc2ad4>
   42b20:	d9413617 	ldw	r5,1240(sp)
   42b24:	a8c7883a 	add	r3,r21,r3
   42b28:	10800044 	addi	r2,r2,1
   42b2c:	41400015 	stw	r5,0(r8)
   42b30:	45400115 	stw	r21,4(r8)
   42b34:	d8c12015 	stw	r3,1152(sp)
   42b38:	d8811f15 	stw	r2,1148(sp)
   42b3c:	010001c4 	movi	r4,7
   42b40:	20832b16 	blt	r4,r2,437f0 <___vfprintf_internal_r+0x13a0>
   42b44:	d8812787 	ldb	r2,1182(sp)
   42b48:	42000204 	addi	r8,r8,8
   42b4c:	10000c26 	beq	r2,zero,42b80 <___vfprintf_internal_r+0x730>
   42b50:	d8811f17 	ldw	r2,1148(sp)
   42b54:	d9012784 	addi	r4,sp,1182
   42b58:	18c00044 	addi	r3,r3,1
   42b5c:	10800044 	addi	r2,r2,1
   42b60:	41000015 	stw	r4,0(r8)
   42b64:	01000044 	movi	r4,1
   42b68:	41000115 	stw	r4,4(r8)
   42b6c:	d8c12015 	stw	r3,1152(sp)
   42b70:	d8811f15 	stw	r2,1148(sp)
   42b74:	010001c4 	movi	r4,7
   42b78:	2082c416 	blt	r4,r2,4368c <___vfprintf_internal_r+0x123c>
   42b7c:	42000204 	addi	r8,r8,8
   42b80:	d8812c17 	ldw	r2,1200(sp)
   42b84:	10000c26 	beq	r2,zero,42bb8 <___vfprintf_internal_r+0x768>
   42b88:	d8811f17 	ldw	r2,1148(sp)
   42b8c:	d9012704 	addi	r4,sp,1180
   42b90:	18c00084 	addi	r3,r3,2
   42b94:	10800044 	addi	r2,r2,1
   42b98:	41000015 	stw	r4,0(r8)
   42b9c:	01000084 	movi	r4,2
   42ba0:	41000115 	stw	r4,4(r8)
   42ba4:	d8c12015 	stw	r3,1152(sp)
   42ba8:	d8811f15 	stw	r2,1148(sp)
   42bac:	010001c4 	movi	r4,7
   42bb0:	2082be16 	blt	r4,r2,436ac <___vfprintf_internal_r+0x125c>
   42bb4:	42000204 	addi	r8,r8,8
   42bb8:	d9013017 	ldw	r4,1216(sp)
   42bbc:	00802004 	movi	r2,128
   42bc0:	20822026 	beq	r4,r2,43444 <___vfprintf_internal_r+0xff4>
   42bc4:	d9413217 	ldw	r5,1224(sp)
   42bc8:	2c67c83a 	sub	r19,r5,r17
   42bcc:	04c0260e 	bge	zero,r19,42c68 <___vfprintf_internal_r+0x818>
   42bd0:	05400404 	movi	r21,16
   42bd4:	d8811f17 	ldw	r2,1148(sp)
   42bd8:	acc4720e 	bge	r21,r19,43da4 <___vfprintf_internal_r+0x1954>
   42bdc:	01400174 	movhi	r5,5
   42be0:	29470284 	addi	r5,r5,7178
   42be4:	d9412c15 	stw	r5,1200(sp)
   42be8:	048001c4 	movi	r18,7
   42bec:	00000306 	br	42bfc <___vfprintf_internal_r+0x7ac>
   42bf0:	9cfffc04 	addi	r19,r19,-16
   42bf4:	42000204 	addi	r8,r8,8
   42bf8:	acc0110e 	bge	r21,r19,42c40 <___vfprintf_internal_r+0x7f0>
   42bfc:	18c00404 	addi	r3,r3,16
   42c00:	10800044 	addi	r2,r2,1
   42c04:	45000015 	stw	r20,0(r8)
   42c08:	45400115 	stw	r21,4(r8)
   42c0c:	d8c12015 	stw	r3,1152(sp)
   42c10:	d8811f15 	stw	r2,1148(sp)
   42c14:	90bff60e 	bge	r18,r2,42bf0 <__alt_data_end+0xfffc2bf0>
   42c18:	b809883a 	mov	r4,r23
   42c1c:	b00b883a 	mov	r5,r22
   42c20:	d9811e04 	addi	r6,sp,1144
   42c24:	00498900 	call	49890 <__sprint_r>
   42c28:	103f211e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   42c2c:	9cfffc04 	addi	r19,r19,-16
   42c30:	d8c12017 	ldw	r3,1152(sp)
   42c34:	d8811f17 	ldw	r2,1148(sp)
   42c38:	da000404 	addi	r8,sp,16
   42c3c:	acffef16 	blt	r21,r19,42bfc <__alt_data_end+0xfffc2bfc>
   42c40:	d9012c17 	ldw	r4,1200(sp)
   42c44:	1cc7883a 	add	r3,r3,r19
   42c48:	10800044 	addi	r2,r2,1
   42c4c:	41000015 	stw	r4,0(r8)
   42c50:	44c00115 	stw	r19,4(r8)
   42c54:	d8c12015 	stw	r3,1152(sp)
   42c58:	d8811f15 	stw	r2,1148(sp)
   42c5c:	010001c4 	movi	r4,7
   42c60:	20828216 	blt	r4,r2,4366c <___vfprintf_internal_r+0x121c>
   42c64:	42000204 	addi	r8,r8,8
   42c68:	e080400c 	andi	r2,fp,256
   42c6c:	1001ac1e 	bne	r2,zero,43320 <___vfprintf_internal_r+0xed0>
   42c70:	d8811f17 	ldw	r2,1148(sp)
   42c74:	d9413117 	ldw	r5,1220(sp)
   42c78:	1c47883a 	add	r3,r3,r17
   42c7c:	10800044 	addi	r2,r2,1
   42c80:	41400015 	stw	r5,0(r8)
   42c84:	44400115 	stw	r17,4(r8)
   42c88:	d8c12015 	stw	r3,1152(sp)
   42c8c:	d8811f15 	stw	r2,1148(sp)
   42c90:	010001c4 	movi	r4,7
   42c94:	20825d16 	blt	r4,r2,4360c <___vfprintf_internal_r+0x11bc>
   42c98:	42000204 	addi	r8,r8,8
   42c9c:	e080010c 	andi	r2,fp,4
   42ca0:	10003126 	beq	r2,zero,42d68 <___vfprintf_internal_r+0x918>
   42ca4:	d8812e17 	ldw	r2,1208(sp)
   42ca8:	d9012b17 	ldw	r4,1196(sp)
   42cac:	1121c83a 	sub	r16,r2,r4
   42cb0:	04002d0e 	bge	zero,r16,42d68 <___vfprintf_internal_r+0x918>
   42cb4:	04400404 	movi	r17,16
   42cb8:	d8811f17 	ldw	r2,1148(sp)
   42cbc:	8c05340e 	bge	r17,r16,44190 <___vfprintf_internal_r+0x1d40>
   42cc0:	01000174 	movhi	r4,5
   42cc4:	21070684 	addi	r4,r4,7194
   42cc8:	d9013615 	stw	r4,1240(sp)
   42ccc:	048001c4 	movi	r18,7
   42cd0:	00000306 	br	42ce0 <___vfprintf_internal_r+0x890>
   42cd4:	843ffc04 	addi	r16,r16,-16
   42cd8:	42000204 	addi	r8,r8,8
   42cdc:	8c00130e 	bge	r17,r16,42d2c <___vfprintf_internal_r+0x8dc>
   42ce0:	01400174 	movhi	r5,5
   42ce4:	18c00404 	addi	r3,r3,16
   42ce8:	10800044 	addi	r2,r2,1
   42cec:	29470684 	addi	r5,r5,7194
   42cf0:	41400015 	stw	r5,0(r8)
   42cf4:	44400115 	stw	r17,4(r8)
   42cf8:	d8c12015 	stw	r3,1152(sp)
   42cfc:	d8811f15 	stw	r2,1148(sp)
   42d00:	90bff40e 	bge	r18,r2,42cd4 <__alt_data_end+0xfffc2cd4>
   42d04:	b809883a 	mov	r4,r23
   42d08:	b00b883a 	mov	r5,r22
   42d0c:	d9811e04 	addi	r6,sp,1144
   42d10:	00498900 	call	49890 <__sprint_r>
   42d14:	103ee61e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   42d18:	843ffc04 	addi	r16,r16,-16
   42d1c:	d8c12017 	ldw	r3,1152(sp)
   42d20:	d8811f17 	ldw	r2,1148(sp)
   42d24:	da000404 	addi	r8,sp,16
   42d28:	8c3fed16 	blt	r17,r16,42ce0 <__alt_data_end+0xfffc2ce0>
   42d2c:	d9013617 	ldw	r4,1240(sp)
   42d30:	1c07883a 	add	r3,r3,r16
   42d34:	10800044 	addi	r2,r2,1
   42d38:	41000015 	stw	r4,0(r8)
   42d3c:	44000115 	stw	r16,4(r8)
   42d40:	d8c12015 	stw	r3,1152(sp)
   42d44:	d8811f15 	stw	r2,1148(sp)
   42d48:	010001c4 	movi	r4,7
   42d4c:	2080060e 	bge	r4,r2,42d68 <___vfprintf_internal_r+0x918>
   42d50:	b809883a 	mov	r4,r23
   42d54:	b00b883a 	mov	r5,r22
   42d58:	d9811e04 	addi	r6,sp,1144
   42d5c:	00498900 	call	49890 <__sprint_r>
   42d60:	103ed31e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   42d64:	d8c12017 	ldw	r3,1152(sp)
   42d68:	df012b17 	ldw	fp,1196(sp)
   42d6c:	d9412e17 	ldw	r5,1208(sp)
   42d70:	e140010e 	bge	fp,r5,42d78 <___vfprintf_internal_r+0x928>
   42d74:	2839883a 	mov	fp,r5
   42d78:	d8812f17 	ldw	r2,1212(sp)
   42d7c:	1705883a 	add	r2,r2,fp
   42d80:	d8812f15 	stw	r2,1212(sp)
   42d84:	1802291e 	bne	r3,zero,4362c <___vfprintf_internal_r+0x11dc>
   42d88:	d8c12a17 	ldw	r3,1192(sp)
   42d8c:	d8011f15 	stw	zero,1148(sp)
   42d90:	da000404 	addi	r8,sp,16
   42d94:	18800007 	ldb	r2,0(r3)
   42d98:	103ded1e 	bne	r2,zero,42550 <__alt_data_end+0xfffc2550>
   42d9c:	dc012a17 	ldw	r16,1192(sp)
   42da0:	003e0506 	br	425b8 <__alt_data_end+0xfffc25b8>
   42da4:	d9012d17 	ldw	r4,1204(sp)
   42da8:	d9412d17 	ldw	r5,1204(sp)
   42dac:	da012a17 	ldw	r8,1192(sp)
   42db0:	21000017 	ldw	r4,0(r4)
   42db4:	29400117 	ldw	r5,4(r5)
   42db8:	df012a15 	stw	fp,1192(sp)
   42dbc:	9839883a 	mov	fp,r19
   42dc0:	dcc12b03 	ldbu	r19,1196(sp)
   42dc4:	d9013715 	stw	r4,1244(sp)
   42dc8:	d9413915 	stw	r5,1252(sp)
   42dcc:	da013f15 	stw	r8,1276(sp)
   42dd0:	da413e15 	stw	r9,1272(sp)
   42dd4:	dcc12785 	stb	r19,1182(sp)
   42dd8:	00494ec0 	call	494ec <__fpclassifyd>
   42ddc:	d8c12d17 	ldw	r3,1204(sp)
   42de0:	04400044 	movi	r17,1
   42de4:	da013f17 	ldw	r8,1276(sp)
   42de8:	1c800204 	addi	r18,r3,8
   42dec:	da413e17 	ldw	r9,1272(sp)
   42df0:	d9013717 	ldw	r4,1244(sp)
   42df4:	d9413917 	ldw	r5,1252(sp)
   42df8:	1443451e 	bne	r2,r17,43b10 <___vfprintf_internal_r+0x16c0>
   42dfc:	000d883a 	mov	r6,zero
   42e00:	000f883a 	mov	r7,zero
   42e04:	004d76c0 	call	4d76c <__ledf2>
   42e08:	da013f17 	ldw	r8,1276(sp)
   42e0c:	1004fe16 	blt	r2,zero,44208 <___vfprintf_internal_r+0x1db8>
   42e10:	dcc12783 	ldbu	r19,1182(sp)
   42e14:	008011c4 	movi	r2,71
   42e18:	14045d0e 	bge	r2,r16,43f90 <___vfprintf_internal_r+0x1b40>
   42e1c:	01400174 	movhi	r5,5
   42e20:	2946f304 	addi	r5,r5,7116
   42e24:	d9413115 	stw	r5,1220(sp)
   42e28:	00c000c4 	movi	r3,3
   42e2c:	00bfdfc4 	movi	r2,-129
   42e30:	d8c12b15 	stw	r3,1196(sp)
   42e34:	e0b8703a 	and	fp,fp,r2
   42e38:	dc812d15 	stw	r18,1204(sp)
   42e3c:	1823883a 	mov	r17,r3
   42e40:	d8013215 	stw	zero,1224(sp)
   42e44:	d8013415 	stw	zero,1232(sp)
   42e48:	003f0106 	br	42a50 <__alt_data_end+0xfffc2a50>
   42e4c:	9cc00214 	ori	r19,r19,8
   42e50:	e005883a 	mov	r2,fp
   42e54:	e4000007 	ldb	r16,0(fp)
   42e58:	003de506 	br	425f0 <__alt_data_end+0xfffc25f0>
   42e5c:	da012a17 	ldw	r8,1192(sp)
   42e60:	df012a15 	stw	fp,1192(sp)
   42e64:	9f000414 	ori	fp,r19,16
   42e68:	e0c0080c 	andi	r3,fp,32
   42e6c:	d8812d17 	ldw	r2,1204(sp)
   42e70:	18007626 	beq	r3,zero,4304c <___vfprintf_internal_r+0xbfc>
   42e74:	d9412d17 	ldw	r5,1204(sp)
   42e78:	14800017 	ldw	r18,0(r2)
   42e7c:	15400117 	ldw	r21,4(r2)
   42e80:	29400204 	addi	r5,r5,8
   42e84:	d9412d15 	stw	r5,1204(sp)
   42e88:	0005883a 	mov	r2,zero
   42e8c:	9546b03a 	or	r3,r18,r21
   42e90:	d8012785 	stb	zero,1182(sp)
   42e94:	da413215 	stw	r9,1224(sp)
   42e98:	0027883a 	mov	r19,zero
   42e9c:	003ecd06 	br	429d4 <__alt_data_end+0xfffc29d4>
   42ea0:	da012a17 	ldw	r8,1192(sp)
   42ea4:	df012a15 	stw	fp,1192(sp)
   42ea8:	9f000414 	ori	fp,r19,16
   42eac:	e0c0080c 	andi	r3,fp,32
   42eb0:	d8812d17 	ldw	r2,1204(sp)
   42eb4:	18002c26 	beq	r3,zero,42f68 <___vfprintf_internal_r+0xb18>
   42eb8:	d9012d17 	ldw	r4,1204(sp)
   42ebc:	14800017 	ldw	r18,0(r2)
   42ec0:	15400117 	ldw	r21,4(r2)
   42ec4:	21000204 	addi	r4,r4,8
   42ec8:	d9012d15 	stw	r4,1204(sp)
   42ecc:	00800044 	movi	r2,1
   42ed0:	9546b03a 	or	r3,r18,r21
   42ed4:	003fee06 	br	42e90 <__alt_data_end+0xfffc2e90>
   42ed8:	da012a17 	ldw	r8,1192(sp)
   42edc:	df012a15 	stw	fp,1192(sp)
   42ee0:	9839883a 	mov	fp,r19
   42ee4:	dcc12b03 	ldbu	r19,1196(sp)
   42ee8:	01400174 	movhi	r5,5
   42eec:	2946f604 	addi	r5,r5,7128
   42ef0:	dcc12785 	stb	r19,1182(sp)
   42ef4:	d9413b15 	stw	r5,1260(sp)
   42ef8:	e0c0080c 	andi	r3,fp,32
   42efc:	d8812d17 	ldw	r2,1204(sp)
   42f00:	18002e26 	beq	r3,zero,42fbc <___vfprintf_internal_r+0xb6c>
   42f04:	d9412d17 	ldw	r5,1204(sp)
   42f08:	14800017 	ldw	r18,0(r2)
   42f0c:	15400117 	ldw	r21,4(r2)
   42f10:	29400204 	addi	r5,r5,8
   42f14:	d9412d15 	stw	r5,1204(sp)
   42f18:	e080004c 	andi	r2,fp,1
   42f1c:	10025c26 	beq	r2,zero,43890 <___vfprintf_internal_r+0x1440>
   42f20:	9546b03a 	or	r3,r18,r21
   42f24:	18038f26 	beq	r3,zero,43d64 <___vfprintf_internal_r+0x1914>
   42f28:	00800c04 	movi	r2,48
   42f2c:	d8812705 	stb	r2,1180(sp)
   42f30:	dc012745 	stb	r16,1181(sp)
   42f34:	e7000094 	ori	fp,fp,2
   42f38:	00800084 	movi	r2,2
   42f3c:	003fd406 	br	42e90 <__alt_data_end+0xfffc2e90>
   42f40:	9cc00814 	ori	r19,r19,32
   42f44:	e005883a 	mov	r2,fp
   42f48:	e4000007 	ldb	r16,0(fp)
   42f4c:	003da806 	br	425f0 <__alt_data_end+0xfffc25f0>
   42f50:	da012a17 	ldw	r8,1192(sp)
   42f54:	df012a15 	stw	fp,1192(sp)
   42f58:	9839883a 	mov	fp,r19
   42f5c:	e0c0080c 	andi	r3,fp,32
   42f60:	d8812d17 	ldw	r2,1204(sp)
   42f64:	183fd41e 	bne	r3,zero,42eb8 <__alt_data_end+0xfffc2eb8>
   42f68:	e0c0040c 	andi	r3,fp,16
   42f6c:	18035f26 	beq	r3,zero,43cec <___vfprintf_internal_r+0x189c>
   42f70:	d9412d17 	ldw	r5,1204(sp)
   42f74:	14800017 	ldw	r18,0(r2)
   42f78:	002b883a 	mov	r21,zero
   42f7c:	29400104 	addi	r5,r5,4
   42f80:	d9412d15 	stw	r5,1204(sp)
   42f84:	00800044 	movi	r2,1
   42f88:	9007883a 	mov	r3,r18
   42f8c:	003fc006 	br	42e90 <__alt_data_end+0xfffc2e90>
   42f90:	da012a17 	ldw	r8,1192(sp)
   42f94:	df012a15 	stw	fp,1192(sp)
   42f98:	9839883a 	mov	fp,r19
   42f9c:	dcc12b03 	ldbu	r19,1196(sp)
   42fa0:	01000174 	movhi	r4,5
   42fa4:	2106fb04 	addi	r4,r4,7148
   42fa8:	d9013b15 	stw	r4,1260(sp)
   42fac:	dcc12785 	stb	r19,1182(sp)
   42fb0:	e0c0080c 	andi	r3,fp,32
   42fb4:	d8812d17 	ldw	r2,1204(sp)
   42fb8:	183fd21e 	bne	r3,zero,42f04 <__alt_data_end+0xfffc2f04>
   42fbc:	e0c0040c 	andi	r3,fp,16
   42fc0:	18035426 	beq	r3,zero,43d14 <___vfprintf_internal_r+0x18c4>
   42fc4:	d8c12d17 	ldw	r3,1204(sp)
   42fc8:	14800017 	ldw	r18,0(r2)
   42fcc:	002b883a 	mov	r21,zero
   42fd0:	18c00104 	addi	r3,r3,4
   42fd4:	d8c12d15 	stw	r3,1204(sp)
   42fd8:	003fcf06 	br	42f18 <__alt_data_end+0xfffc2f18>
   42fdc:	e4000007 	ldb	r16,0(fp)
   42fe0:	00801b04 	movi	r2,108
   42fe4:	8083f726 	beq	r16,r2,43fc4 <___vfprintf_internal_r+0x1b74>
   42fe8:	9cc00414 	ori	r19,r19,16
   42fec:	e005883a 	mov	r2,fp
   42ff0:	003d7f06 	br	425f0 <__alt_data_end+0xfffc25f0>
   42ff4:	da012a17 	ldw	r8,1192(sp)
   42ff8:	df012a15 	stw	fp,1192(sp)
   42ffc:	9839883a 	mov	fp,r19
   43000:	dcc12b03 	ldbu	r19,1196(sp)
   43004:	e080080c 	andi	r2,fp,32
   43008:	dcc12785 	stb	r19,1182(sp)
   4300c:	10032226 	beq	r2,zero,43c98 <___vfprintf_internal_r+0x1848>
   43010:	d9412d17 	ldw	r5,1204(sp)
   43014:	d9012f17 	ldw	r4,1212(sp)
   43018:	28800017 	ldw	r2,0(r5)
   4301c:	2007d7fa 	srai	r3,r4,31
   43020:	29400104 	addi	r5,r5,4
   43024:	d9412d15 	stw	r5,1204(sp)
   43028:	11000015 	stw	r4,0(r2)
   4302c:	10c00115 	stw	r3,4(r2)
   43030:	003d4406 	br	42544 <__alt_data_end+0xfffc2544>
   43034:	da012a17 	ldw	r8,1192(sp)
   43038:	df012a15 	stw	fp,1192(sp)
   4303c:	9839883a 	mov	fp,r19
   43040:	e0c0080c 	andi	r3,fp,32
   43044:	d8812d17 	ldw	r2,1204(sp)
   43048:	183f8a1e 	bne	r3,zero,42e74 <__alt_data_end+0xfffc2e74>
   4304c:	e0c0040c 	andi	r3,fp,16
   43050:	18031c26 	beq	r3,zero,43cc4 <___vfprintf_internal_r+0x1874>
   43054:	14800017 	ldw	r18,0(r2)
   43058:	d8812d17 	ldw	r2,1204(sp)
   4305c:	002b883a 	mov	r21,zero
   43060:	9007883a 	mov	r3,r18
   43064:	10800104 	addi	r2,r2,4
   43068:	d8812d15 	stw	r2,1204(sp)
   4306c:	0005883a 	mov	r2,zero
   43070:	003f8706 	br	42e90 <__alt_data_end+0xfffc2e90>
   43074:	d9412d17 	ldw	r5,1204(sp)
   43078:	00800c04 	movi	r2,48
   4307c:	d8812705 	stb	r2,1180(sp)
   43080:	2c800017 	ldw	r18,0(r5)
   43084:	00801e04 	movi	r2,120
   43088:	d8812745 	stb	r2,1181(sp)
   4308c:	00800174 	movhi	r2,5
   43090:	1086fb04 	addi	r2,r2,7148
   43094:	29400104 	addi	r5,r5,4
   43098:	da012a17 	ldw	r8,1192(sp)
   4309c:	d8813b15 	stw	r2,1260(sp)
   430a0:	df012a15 	stw	fp,1192(sp)
   430a4:	002b883a 	mov	r21,zero
   430a8:	9f000094 	ori	fp,r19,2
   430ac:	d9412d15 	stw	r5,1204(sp)
   430b0:	00800084 	movi	r2,2
   430b4:	04001e04 	movi	r16,120
   430b8:	9007883a 	mov	r3,r18
   430bc:	003f7406 	br	42e90 <__alt_data_end+0xfffc2e90>
   430c0:	da012a17 	ldw	r8,1192(sp)
   430c4:	df012a15 	stw	fp,1192(sp)
   430c8:	9839883a 	mov	fp,r19
   430cc:	dcc12b03 	ldbu	r19,1196(sp)
   430d0:	e080080c 	andi	r2,fp,32
   430d4:	d8c12d17 	ldw	r3,1204(sp)
   430d8:	dcc12785 	stb	r19,1182(sp)
   430dc:	103e321e 	bne	r2,zero,429a8 <__alt_data_end+0xfffc29a8>
   430e0:	e080040c 	andi	r2,fp,16
   430e4:	10031326 	beq	r2,zero,43d34 <___vfprintf_internal_r+0x18e4>
   430e8:	1c800017 	ldw	r18,0(r3)
   430ec:	d9412d17 	ldw	r5,1204(sp)
   430f0:	902bd7fa 	srai	r21,r18,31
   430f4:	29400104 	addi	r5,r5,4
   430f8:	d9412d15 	stw	r5,1204(sp)
   430fc:	a805883a 	mov	r2,r21
   43100:	003e2f06 	br	429c0 <__alt_data_end+0xfffc29c0>
   43104:	9cc01014 	ori	r19,r19,64
   43108:	e005883a 	mov	r2,fp
   4310c:	e4000007 	ldb	r16,0(fp)
   43110:	003d3706 	br	425f0 <__alt_data_end+0xfffc25f0>
   43114:	d8c12d17 	ldw	r3,1204(sp)
   43118:	d9012d17 	ldw	r4,1204(sp)
   4311c:	da012a17 	ldw	r8,1192(sp)
   43120:	18800017 	ldw	r2,0(r3)
   43124:	21000104 	addi	r4,r4,4
   43128:	00c00044 	movi	r3,1
   4312c:	df012a15 	stw	fp,1192(sp)
   43130:	d8c12b15 	stw	r3,1196(sp)
   43134:	9839883a 	mov	fp,r19
   43138:	d8012785 	stb	zero,1182(sp)
   4313c:	d8810405 	stb	r2,1040(sp)
   43140:	d9012d15 	stw	r4,1204(sp)
   43144:	1823883a 	mov	r17,r3
   43148:	d8c10404 	addi	r3,sp,1040
   4314c:	d8013215 	stw	zero,1224(sp)
   43150:	d8013415 	stw	zero,1232(sp)
   43154:	d8c13115 	stw	r3,1220(sp)
   43158:	0005883a 	mov	r2,zero
   4315c:	003e4306 	br	42a6c <__alt_data_end+0xfffc2a6c>
   43160:	d8812b07 	ldb	r2,1196(sp)
   43164:	1002fc1e 	bne	r2,zero,43d58 <___vfprintf_internal_r+0x1908>
   43168:	00c00804 	movi	r3,32
   4316c:	d8c12b05 	stb	r3,1196(sp)
   43170:	e005883a 	mov	r2,fp
   43174:	e4000007 	ldb	r16,0(fp)
   43178:	003d1d06 	br	425f0 <__alt_data_end+0xfffc25f0>
   4317c:	9cc00054 	ori	r19,r19,1
   43180:	e005883a 	mov	r2,fp
   43184:	e4000007 	ldb	r16,0(fp)
   43188:	003d1906 	br	425f0 <__alt_data_end+0xfffc25f0>
   4318c:	d9012d17 	ldw	r4,1204(sp)
   43190:	d9412d17 	ldw	r5,1204(sp)
   43194:	21000017 	ldw	r4,0(r4)
   43198:	28c00104 	addi	r3,r5,4
   4319c:	d9012e15 	stw	r4,1208(sp)
   431a0:	20038c16 	blt	r4,zero,43fd4 <___vfprintf_internal_r+0x1b84>
   431a4:	d8c12d15 	stw	r3,1204(sp)
   431a8:	e005883a 	mov	r2,fp
   431ac:	e4000007 	ldb	r16,0(fp)
   431b0:	003d0f06 	br	425f0 <__alt_data_end+0xfffc25f0>
   431b4:	00c00ac4 	movi	r3,43
   431b8:	d8c12b05 	stb	r3,1196(sp)
   431bc:	e005883a 	mov	r2,fp
   431c0:	e4000007 	ldb	r16,0(fp)
   431c4:	003d0a06 	br	425f0 <__alt_data_end+0xfffc25f0>
   431c8:	d8c12d17 	ldw	r3,1204(sp)
   431cc:	d9012d17 	ldw	r4,1204(sp)
   431d0:	da012a17 	ldw	r8,1192(sp)
   431d4:	18c00017 	ldw	r3,0(r3)
   431d8:	df012a15 	stw	fp,1192(sp)
   431dc:	d8012785 	stb	zero,1182(sp)
   431e0:	d8c13115 	stw	r3,1220(sp)
   431e4:	9839883a 	mov	fp,r19
   431e8:	24800104 	addi	r18,r4,4
   431ec:	1803f726 	beq	r3,zero,441cc <___vfprintf_internal_r+0x1d7c>
   431f0:	d9013117 	ldw	r4,1220(sp)
   431f4:	48038916 	blt	r9,zero,4401c <___vfprintf_internal_r+0x1bcc>
   431f8:	480d883a 	mov	r6,r9
   431fc:	000b883a 	mov	r5,zero
   43200:	da013f15 	stw	r8,1276(sp)
   43204:	da413e15 	stw	r9,1272(sp)
   43208:	0047a640 	call	47a64 <memchr>
   4320c:	da013f17 	ldw	r8,1276(sp)
   43210:	da413e17 	ldw	r9,1272(sp)
   43214:	10045926 	beq	r2,zero,4437c <___vfprintf_internal_r+0x1f2c>
   43218:	d8c13117 	ldw	r3,1220(sp)
   4321c:	10e3c83a 	sub	r17,r2,r3
   43220:	4c433516 	blt	r9,r17,43ef8 <___vfprintf_internal_r+0x1aa8>
   43224:	8805883a 	mov	r2,r17
   43228:	88038116 	blt	r17,zero,44030 <___vfprintf_internal_r+0x1be0>
   4322c:	dcc12783 	ldbu	r19,1182(sp)
   43230:	d8812b15 	stw	r2,1196(sp)
   43234:	dc812d15 	stw	r18,1204(sp)
   43238:	d8013215 	stw	zero,1224(sp)
   4323c:	d8013415 	stw	zero,1232(sp)
   43240:	003e0306 	br	42a50 <__alt_data_end+0xfffc2a50>
   43244:	da012a17 	ldw	r8,1192(sp)
   43248:	df012a15 	stw	fp,1192(sp)
   4324c:	9839883a 	mov	fp,r19
   43250:	dcc12b03 	ldbu	r19,1196(sp)
   43254:	dcc12785 	stb	r19,1182(sp)
   43258:	803d8f26 	beq	r16,zero,42898 <__alt_data_end+0xfffc2898>
   4325c:	00c00044 	movi	r3,1
   43260:	d8c12b15 	stw	r3,1196(sp)
   43264:	dc010405 	stb	r16,1040(sp)
   43268:	d8012785 	stb	zero,1182(sp)
   4326c:	003fb506 	br	43144 <__alt_data_end+0xfffc3144>
   43270:	d8c12017 	ldw	r3,1152(sp)
   43274:	003e3506 	br	42b4c <__alt_data_end+0xfffc2b4c>
   43278:	10803fcc 	andi	r2,r2,255
   4327c:	00c00044 	movi	r3,1
   43280:	10fddc1e 	bne	r2,r3,429f4 <__alt_data_end+0xfffc29f4>
   43284:	a800021e 	bne	r21,zero,43290 <___vfprintf_internal_r+0xe40>
   43288:	00800244 	movi	r2,9
   4328c:	14801e2e 	bgeu	r2,r18,43308 <___vfprintf_internal_r+0xeb8>
   43290:	dc012b15 	stw	r16,1196(sp)
   43294:	dc410e04 	addi	r17,sp,1080
   43298:	9021883a 	mov	r16,r18
   4329c:	da012c15 	stw	r8,1200(sp)
   432a0:	a825883a 	mov	r18,r21
   432a4:	482b883a 	mov	r21,r9
   432a8:	8009883a 	mov	r4,r16
   432ac:	900b883a 	mov	r5,r18
   432b0:	01800284 	movi	r6,10
   432b4:	000f883a 	mov	r7,zero
   432b8:	004bc7c0 	call	4bc7c <__umoddi3>
   432bc:	10800c04 	addi	r2,r2,48
   432c0:	8c7fffc4 	addi	r17,r17,-1
   432c4:	8009883a 	mov	r4,r16
   432c8:	900b883a 	mov	r5,r18
   432cc:	01800284 	movi	r6,10
   432d0:	000f883a 	mov	r7,zero
   432d4:	88800005 	stb	r2,0(r17)
   432d8:	004b63c0 	call	4b63c <__udivdi3>
   432dc:	1021883a 	mov	r16,r2
   432e0:	10c4b03a 	or	r2,r2,r3
   432e4:	1825883a 	mov	r18,r3
   432e8:	103fef1e 	bne	r2,zero,432a8 <__alt_data_end+0xfffc32a8>
   432ec:	d9012817 	ldw	r4,1184(sp)
   432f0:	dc413115 	stw	r17,1220(sp)
   432f4:	dc012b17 	ldw	r16,1196(sp)
   432f8:	da012c17 	ldw	r8,1200(sp)
   432fc:	a813883a 	mov	r9,r21
   43300:	2463c83a 	sub	r17,r4,r17
   43304:	003dcd06 	br	42a3c <__alt_data_end+0xfffc2a3c>
   43308:	94800c04 	addi	r18,r18,48
   4330c:	d8c10dc4 	addi	r3,sp,1079
   43310:	dc810dc5 	stb	r18,1079(sp)
   43314:	dc413c17 	ldw	r17,1264(sp)
   43318:	d8c13115 	stw	r3,1220(sp)
   4331c:	003dc706 	br	42a3c <__alt_data_end+0xfffc2a3c>
   43320:	00801944 	movi	r2,101
   43324:	1400720e 	bge	r2,r16,434f0 <___vfprintf_internal_r+0x10a0>
   43328:	d9013717 	ldw	r4,1244(sp)
   4332c:	d9413917 	ldw	r5,1252(sp)
   43330:	000d883a 	mov	r6,zero
   43334:	000f883a 	mov	r7,zero
   43338:	d8c13d15 	stw	r3,1268(sp)
   4333c:	da013f15 	stw	r8,1276(sp)
   43340:	004d6080 	call	4d608 <__eqdf2>
   43344:	d8c13d17 	ldw	r3,1268(sp)
   43348:	da013f17 	ldw	r8,1276(sp)
   4334c:	1000f41e 	bne	r2,zero,43720 <___vfprintf_internal_r+0x12d0>
   43350:	d8811f17 	ldw	r2,1148(sp)
   43354:	01000174 	movhi	r4,5
   43358:	21070204 	addi	r4,r4,7176
   4335c:	18c00044 	addi	r3,r3,1
   43360:	10800044 	addi	r2,r2,1
   43364:	41000015 	stw	r4,0(r8)
   43368:	01000044 	movi	r4,1
   4336c:	41000115 	stw	r4,4(r8)
   43370:	d8c12015 	stw	r3,1152(sp)
   43374:	d8811f15 	stw	r2,1148(sp)
   43378:	010001c4 	movi	r4,7
   4337c:	20828d16 	blt	r4,r2,43db4 <___vfprintf_internal_r+0x1964>
   43380:	42000204 	addi	r8,r8,8
   43384:	d8812617 	ldw	r2,1176(sp)
   43388:	d9413317 	ldw	r5,1228(sp)
   4338c:	11400216 	blt	r2,r5,43398 <___vfprintf_internal_r+0xf48>
   43390:	e080004c 	andi	r2,fp,1
   43394:	103e4126 	beq	r2,zero,42c9c <__alt_data_end+0xfffc2c9c>
   43398:	d8813817 	ldw	r2,1248(sp)
   4339c:	d9013517 	ldw	r4,1236(sp)
   433a0:	d9413817 	ldw	r5,1248(sp)
   433a4:	1887883a 	add	r3,r3,r2
   433a8:	d8811f17 	ldw	r2,1148(sp)
   433ac:	41000015 	stw	r4,0(r8)
   433b0:	41400115 	stw	r5,4(r8)
   433b4:	10800044 	addi	r2,r2,1
   433b8:	d8c12015 	stw	r3,1152(sp)
   433bc:	d8811f15 	stw	r2,1148(sp)
   433c0:	010001c4 	movi	r4,7
   433c4:	20830916 	blt	r4,r2,43fec <___vfprintf_internal_r+0x1b9c>
   433c8:	42000204 	addi	r8,r8,8
   433cc:	d8813317 	ldw	r2,1228(sp)
   433d0:	143fffc4 	addi	r16,r2,-1
   433d4:	043e310e 	bge	zero,r16,42c9c <__alt_data_end+0xfffc2c9c>
   433d8:	04400404 	movi	r17,16
   433dc:	d8811f17 	ldw	r2,1148(sp)
   433e0:	8c007e0e 	bge	r17,r16,435dc <___vfprintf_internal_r+0x118c>
   433e4:	01400174 	movhi	r5,5
   433e8:	29470284 	addi	r5,r5,7178
   433ec:	d9412c15 	stw	r5,1200(sp)
   433f0:	04c001c4 	movi	r19,7
   433f4:	00000306 	br	43404 <___vfprintf_internal_r+0xfb4>
   433f8:	42000204 	addi	r8,r8,8
   433fc:	843ffc04 	addi	r16,r16,-16
   43400:	8c00790e 	bge	r17,r16,435e8 <___vfprintf_internal_r+0x1198>
   43404:	18c00404 	addi	r3,r3,16
   43408:	10800044 	addi	r2,r2,1
   4340c:	45000015 	stw	r20,0(r8)
   43410:	44400115 	stw	r17,4(r8)
   43414:	d8c12015 	stw	r3,1152(sp)
   43418:	d8811f15 	stw	r2,1148(sp)
   4341c:	98bff60e 	bge	r19,r2,433f8 <__alt_data_end+0xfffc33f8>
   43420:	b809883a 	mov	r4,r23
   43424:	b00b883a 	mov	r5,r22
   43428:	d9811e04 	addi	r6,sp,1144
   4342c:	00498900 	call	49890 <__sprint_r>
   43430:	103d1f1e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   43434:	d8c12017 	ldw	r3,1152(sp)
   43438:	d8811f17 	ldw	r2,1148(sp)
   4343c:	da000404 	addi	r8,sp,16
   43440:	003fee06 	br	433fc <__alt_data_end+0xfffc33fc>
   43444:	d9412e17 	ldw	r5,1208(sp)
   43448:	d8812b17 	ldw	r2,1196(sp)
   4344c:	28a7c83a 	sub	r19,r5,r2
   43450:	04fddc0e 	bge	zero,r19,42bc4 <__alt_data_end+0xfffc2bc4>
   43454:	05400404 	movi	r21,16
   43458:	d8811f17 	ldw	r2,1148(sp)
   4345c:	acc3870e 	bge	r21,r19,4427c <___vfprintf_internal_r+0x1e2c>
   43460:	01400174 	movhi	r5,5
   43464:	29470284 	addi	r5,r5,7178
   43468:	d9412c15 	stw	r5,1200(sp)
   4346c:	048001c4 	movi	r18,7
   43470:	00000306 	br	43480 <___vfprintf_internal_r+0x1030>
   43474:	9cfffc04 	addi	r19,r19,-16
   43478:	42000204 	addi	r8,r8,8
   4347c:	acc0110e 	bge	r21,r19,434c4 <___vfprintf_internal_r+0x1074>
   43480:	18c00404 	addi	r3,r3,16
   43484:	10800044 	addi	r2,r2,1
   43488:	45000015 	stw	r20,0(r8)
   4348c:	45400115 	stw	r21,4(r8)
   43490:	d8c12015 	stw	r3,1152(sp)
   43494:	d8811f15 	stw	r2,1148(sp)
   43498:	90bff60e 	bge	r18,r2,43474 <__alt_data_end+0xfffc3474>
   4349c:	b809883a 	mov	r4,r23
   434a0:	b00b883a 	mov	r5,r22
   434a4:	d9811e04 	addi	r6,sp,1144
   434a8:	00498900 	call	49890 <__sprint_r>
   434ac:	103d001e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   434b0:	9cfffc04 	addi	r19,r19,-16
   434b4:	d8c12017 	ldw	r3,1152(sp)
   434b8:	d8811f17 	ldw	r2,1148(sp)
   434bc:	da000404 	addi	r8,sp,16
   434c0:	acffef16 	blt	r21,r19,43480 <__alt_data_end+0xfffc3480>
   434c4:	d9012c17 	ldw	r4,1200(sp)
   434c8:	1cc7883a 	add	r3,r3,r19
   434cc:	10800044 	addi	r2,r2,1
   434d0:	41000015 	stw	r4,0(r8)
   434d4:	44c00115 	stw	r19,4(r8)
   434d8:	d8c12015 	stw	r3,1152(sp)
   434dc:	d8811f15 	stw	r2,1148(sp)
   434e0:	010001c4 	movi	r4,7
   434e4:	20817816 	blt	r4,r2,43ac8 <___vfprintf_internal_r+0x1678>
   434e8:	42000204 	addi	r8,r8,8
   434ec:	003db506 	br	42bc4 <__alt_data_end+0xfffc2bc4>
   434f0:	d9413317 	ldw	r5,1228(sp)
   434f4:	00800044 	movi	r2,1
   434f8:	18c00044 	addi	r3,r3,1
   434fc:	11413e0e 	bge	r2,r5,439f8 <___vfprintf_internal_r+0x15a8>
   43500:	dc011f17 	ldw	r16,1148(sp)
   43504:	d8813117 	ldw	r2,1220(sp)
   43508:	d8c12015 	stw	r3,1152(sp)
   4350c:	84000044 	addi	r16,r16,1
   43510:	40800015 	stw	r2,0(r8)
   43514:	00800044 	movi	r2,1
   43518:	40800115 	stw	r2,4(r8)
   4351c:	dc011f15 	stw	r16,1148(sp)
   43520:	008001c4 	movi	r2,7
   43524:	14015616 	blt	r2,r16,43a80 <___vfprintf_internal_r+0x1630>
   43528:	42000204 	addi	r8,r8,8
   4352c:	d9013817 	ldw	r4,1248(sp)
   43530:	d9413517 	ldw	r5,1236(sp)
   43534:	84000044 	addi	r16,r16,1
   43538:	1907883a 	add	r3,r3,r4
   4353c:	41400015 	stw	r5,0(r8)
   43540:	41000115 	stw	r4,4(r8)
   43544:	d8c12015 	stw	r3,1152(sp)
   43548:	dc011f15 	stw	r16,1148(sp)
   4354c:	008001c4 	movi	r2,7
   43550:	14015416 	blt	r2,r16,43aa4 <___vfprintf_internal_r+0x1654>
   43554:	44400204 	addi	r17,r8,8
   43558:	d9013717 	ldw	r4,1244(sp)
   4355c:	d9413917 	ldw	r5,1252(sp)
   43560:	000d883a 	mov	r6,zero
   43564:	000f883a 	mov	r7,zero
   43568:	d8c13d15 	stw	r3,1268(sp)
   4356c:	004d6080 	call	4d608 <__eqdf2>
   43570:	d8c13d17 	ldw	r3,1268(sp)
   43574:	1000a726 	beq	r2,zero,43814 <___vfprintf_internal_r+0x13c4>
   43578:	d9013317 	ldw	r4,1228(sp)
   4357c:	d9413117 	ldw	r5,1220(sp)
   43580:	84000044 	addi	r16,r16,1
   43584:	20bfffc4 	addi	r2,r4,-1
   43588:	1887883a 	add	r3,r3,r2
   4358c:	29000044 	addi	r4,r5,1
   43590:	88800115 	stw	r2,4(r17)
   43594:	89000015 	stw	r4,0(r17)
   43598:	d8c12015 	stw	r3,1152(sp)
   4359c:	dc011f15 	stw	r16,1148(sp)
   435a0:	008001c4 	movi	r2,7
   435a4:	14012d16 	blt	r2,r16,43a5c <___vfprintf_internal_r+0x160c>
   435a8:	8c400204 	addi	r17,r17,8
   435ac:	d9413a17 	ldw	r5,1256(sp)
   435b0:	dcc122c4 	addi	r19,sp,1163
   435b4:	84000044 	addi	r16,r16,1
   435b8:	28c7883a 	add	r3,r5,r3
   435bc:	8cc00015 	stw	r19,0(r17)
   435c0:	89400115 	stw	r5,4(r17)
   435c4:	d8c12015 	stw	r3,1152(sp)
   435c8:	dc011f15 	stw	r16,1148(sp)
   435cc:	008001c4 	movi	r2,7
   435d0:	14000e16 	blt	r2,r16,4360c <___vfprintf_internal_r+0x11bc>
   435d4:	8a000204 	addi	r8,r17,8
   435d8:	003db006 	br	42c9c <__alt_data_end+0xfffc2c9c>
   435dc:	01000174 	movhi	r4,5
   435e0:	21070284 	addi	r4,r4,7178
   435e4:	d9012c15 	stw	r4,1200(sp)
   435e8:	d9012c17 	ldw	r4,1200(sp)
   435ec:	1c07883a 	add	r3,r3,r16
   435f0:	44000115 	stw	r16,4(r8)
   435f4:	41000015 	stw	r4,0(r8)
   435f8:	10800044 	addi	r2,r2,1
   435fc:	d8c12015 	stw	r3,1152(sp)
   43600:	d8811f15 	stw	r2,1148(sp)
   43604:	010001c4 	movi	r4,7
   43608:	20bda30e 	bge	r4,r2,42c98 <__alt_data_end+0xfffc2c98>
   4360c:	b809883a 	mov	r4,r23
   43610:	b00b883a 	mov	r5,r22
   43614:	d9811e04 	addi	r6,sp,1144
   43618:	00498900 	call	49890 <__sprint_r>
   4361c:	103ca41e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   43620:	d8c12017 	ldw	r3,1152(sp)
   43624:	da000404 	addi	r8,sp,16
   43628:	003d9c06 	br	42c9c <__alt_data_end+0xfffc2c9c>
   4362c:	b809883a 	mov	r4,r23
   43630:	b00b883a 	mov	r5,r22
   43634:	d9811e04 	addi	r6,sp,1144
   43638:	00498900 	call	49890 <__sprint_r>
   4363c:	103dd226 	beq	r2,zero,42d88 <__alt_data_end+0xfffc2d88>
   43640:	003c9b06 	br	428b0 <__alt_data_end+0xfffc28b0>
   43644:	10803fcc 	andi	r2,r2,255
   43648:	1000311e 	bne	r2,zero,43710 <___vfprintf_internal_r+0x12c0>
   4364c:	e080004c 	andi	r2,fp,1
   43650:	10002f26 	beq	r2,zero,43710 <___vfprintf_internal_r+0x12c0>
   43654:	00800c04 	movi	r2,48
   43658:	d8c10dc4 	addi	r3,sp,1079
   4365c:	d8810dc5 	stb	r2,1079(sp)
   43660:	dc413c17 	ldw	r17,1264(sp)
   43664:	d8c13115 	stw	r3,1220(sp)
   43668:	003cf406 	br	42a3c <__alt_data_end+0xfffc2a3c>
   4366c:	b809883a 	mov	r4,r23
   43670:	b00b883a 	mov	r5,r22
   43674:	d9811e04 	addi	r6,sp,1144
   43678:	00498900 	call	49890 <__sprint_r>
   4367c:	103c8c1e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   43680:	d8c12017 	ldw	r3,1152(sp)
   43684:	da000404 	addi	r8,sp,16
   43688:	003d7706 	br	42c68 <__alt_data_end+0xfffc2c68>
   4368c:	b809883a 	mov	r4,r23
   43690:	b00b883a 	mov	r5,r22
   43694:	d9811e04 	addi	r6,sp,1144
   43698:	00498900 	call	49890 <__sprint_r>
   4369c:	103c841e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   436a0:	d8c12017 	ldw	r3,1152(sp)
   436a4:	da000404 	addi	r8,sp,16
   436a8:	003d3506 	br	42b80 <__alt_data_end+0xfffc2b80>
   436ac:	b809883a 	mov	r4,r23
   436b0:	b00b883a 	mov	r5,r22
   436b4:	d9811e04 	addi	r6,sp,1144
   436b8:	00498900 	call	49890 <__sprint_r>
   436bc:	103c7c1e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   436c0:	d8c12017 	ldw	r3,1152(sp)
   436c4:	da000404 	addi	r8,sp,16
   436c8:	003d3b06 	br	42bb8 <__alt_data_end+0xfffc2bb8>
   436cc:	d9413b17 	ldw	r5,1260(sp)
   436d0:	d8c10e04 	addi	r3,sp,1080
   436d4:	908003cc 	andi	r2,r18,15
   436d8:	a808973a 	slli	r4,r21,28
   436dc:	2885883a 	add	r2,r5,r2
   436e0:	9024d13a 	srli	r18,r18,4
   436e4:	10800003 	ldbu	r2,0(r2)
   436e8:	a82ad13a 	srli	r21,r21,4
   436ec:	18ffffc4 	addi	r3,r3,-1
   436f0:	24a4b03a 	or	r18,r4,r18
   436f4:	18800005 	stb	r2,0(r3)
   436f8:	9544b03a 	or	r2,r18,r21
   436fc:	103ff51e 	bne	r2,zero,436d4 <__alt_data_end+0xfffc36d4>
   43700:	d9412817 	ldw	r5,1184(sp)
   43704:	d8c13115 	stw	r3,1220(sp)
   43708:	28e3c83a 	sub	r17,r5,r3
   4370c:	003ccb06 	br	42a3c <__alt_data_end+0xfffc2a3c>
   43710:	d8c10e04 	addi	r3,sp,1080
   43714:	0023883a 	mov	r17,zero
   43718:	d8c13115 	stw	r3,1220(sp)
   4371c:	003cc706 	br	42a3c <__alt_data_end+0xfffc2a3c>
   43720:	dc012617 	ldw	r16,1176(sp)
   43724:	0401ab0e 	bge	zero,r16,43dd4 <___vfprintf_internal_r+0x1984>
   43728:	d8813317 	ldw	r2,1228(sp)
   4372c:	d9413117 	ldw	r5,1220(sp)
   43730:	d9013417 	ldw	r4,1232(sp)
   43734:	1023883a 	mov	r17,r2
   43738:	28a1883a 	add	r16,r5,r2
   4373c:	2080010e 	bge	r4,r2,43744 <___vfprintf_internal_r+0x12f4>
   43740:	2023883a 	mov	r17,r4
   43744:	04400b0e 	bge	zero,r17,43774 <___vfprintf_internal_r+0x1324>
   43748:	d8811f17 	ldw	r2,1148(sp)
   4374c:	d9413117 	ldw	r5,1220(sp)
   43750:	1c47883a 	add	r3,r3,r17
   43754:	10800044 	addi	r2,r2,1
   43758:	41400015 	stw	r5,0(r8)
   4375c:	44400115 	stw	r17,4(r8)
   43760:	d8c12015 	stw	r3,1152(sp)
   43764:	d8811f15 	stw	r2,1148(sp)
   43768:	010001c4 	movi	r4,7
   4376c:	20826716 	blt	r4,r2,4410c <___vfprintf_internal_r+0x1cbc>
   43770:	42000204 	addi	r8,r8,8
   43774:	88026316 	blt	r17,zero,44104 <___vfprintf_internal_r+0x1cb4>
   43778:	d8813417 	ldw	r2,1232(sp)
   4377c:	1463c83a 	sub	r17,r2,r17
   43780:	0440590e 	bge	zero,r17,438e8 <___vfprintf_internal_r+0x1498>
   43784:	04c00404 	movi	r19,16
   43788:	d8811f17 	ldw	r2,1148(sp)
   4378c:	9c41770e 	bge	r19,r17,43d6c <___vfprintf_internal_r+0x191c>
   43790:	01400174 	movhi	r5,5
   43794:	29470284 	addi	r5,r5,7178
   43798:	d9412c15 	stw	r5,1200(sp)
   4379c:	054001c4 	movi	r21,7
   437a0:	00000306 	br	437b0 <___vfprintf_internal_r+0x1360>
   437a4:	42000204 	addi	r8,r8,8
   437a8:	8c7ffc04 	addi	r17,r17,-16
   437ac:	9c41720e 	bge	r19,r17,43d78 <___vfprintf_internal_r+0x1928>
   437b0:	18c00404 	addi	r3,r3,16
   437b4:	10800044 	addi	r2,r2,1
   437b8:	45000015 	stw	r20,0(r8)
   437bc:	44c00115 	stw	r19,4(r8)
   437c0:	d8c12015 	stw	r3,1152(sp)
   437c4:	d8811f15 	stw	r2,1148(sp)
   437c8:	a8bff60e 	bge	r21,r2,437a4 <__alt_data_end+0xfffc37a4>
   437cc:	b809883a 	mov	r4,r23
   437d0:	b00b883a 	mov	r5,r22
   437d4:	d9811e04 	addi	r6,sp,1144
   437d8:	00498900 	call	49890 <__sprint_r>
   437dc:	103c341e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   437e0:	d8c12017 	ldw	r3,1152(sp)
   437e4:	d8811f17 	ldw	r2,1148(sp)
   437e8:	da000404 	addi	r8,sp,16
   437ec:	003fee06 	br	437a8 <__alt_data_end+0xfffc37a8>
   437f0:	b809883a 	mov	r4,r23
   437f4:	b00b883a 	mov	r5,r22
   437f8:	d9811e04 	addi	r6,sp,1144
   437fc:	00498900 	call	49890 <__sprint_r>
   43800:	103c2b1e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   43804:	d8c12017 	ldw	r3,1152(sp)
   43808:	d8812787 	ldb	r2,1182(sp)
   4380c:	da000404 	addi	r8,sp,16
   43810:	003cce06 	br	42b4c <__alt_data_end+0xfffc2b4c>
   43814:	d8813317 	ldw	r2,1228(sp)
   43818:	14ffffc4 	addi	r19,r2,-1
   4381c:	04ff630e 	bge	zero,r19,435ac <__alt_data_end+0xfffc35ac>
   43820:	05400404 	movi	r21,16
   43824:	acc0810e 	bge	r21,r19,43a2c <___vfprintf_internal_r+0x15dc>
   43828:	01400174 	movhi	r5,5
   4382c:	29470284 	addi	r5,r5,7178
   43830:	d9412c15 	stw	r5,1200(sp)
   43834:	01c001c4 	movi	r7,7
   43838:	00000306 	br	43848 <___vfprintf_internal_r+0x13f8>
   4383c:	8c400204 	addi	r17,r17,8
   43840:	9cfffc04 	addi	r19,r19,-16
   43844:	acc07c0e 	bge	r21,r19,43a38 <___vfprintf_internal_r+0x15e8>
   43848:	18c00404 	addi	r3,r3,16
   4384c:	84000044 	addi	r16,r16,1
   43850:	8d000015 	stw	r20,0(r17)
   43854:	8d400115 	stw	r21,4(r17)
   43858:	d8c12015 	stw	r3,1152(sp)
   4385c:	dc011f15 	stw	r16,1148(sp)
   43860:	3c3ff60e 	bge	r7,r16,4383c <__alt_data_end+0xfffc383c>
   43864:	b809883a 	mov	r4,r23
   43868:	b00b883a 	mov	r5,r22
   4386c:	d9811e04 	addi	r6,sp,1144
   43870:	d9c13d15 	stw	r7,1268(sp)
   43874:	00498900 	call	49890 <__sprint_r>
   43878:	d9c13d17 	ldw	r7,1268(sp)
   4387c:	103c0c1e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   43880:	d8c12017 	ldw	r3,1152(sp)
   43884:	dc011f17 	ldw	r16,1148(sp)
   43888:	dc400404 	addi	r17,sp,16
   4388c:	003fec06 	br	43840 <__alt_data_end+0xfffc3840>
   43890:	00800084 	movi	r2,2
   43894:	9546b03a 	or	r3,r18,r21
   43898:	003d7d06 	br	42e90 <__alt_data_end+0xfffc2e90>
   4389c:	10803fcc 	andi	r2,r2,255
   438a0:	1080201c 	xori	r2,r2,128
   438a4:	10bfe004 	addi	r2,r2,-128
   438a8:	01000c04 	movi	r4,48
   438ac:	1101d726 	beq	r2,r4,4400c <___vfprintf_internal_r+0x1bbc>
   438b0:	d9413117 	ldw	r5,1220(sp)
   438b4:	d8812817 	ldw	r2,1184(sp)
   438b8:	193fffc5 	stb	r4,-1(r3)
   438bc:	297fffc4 	addi	r5,r5,-1
   438c0:	d9413115 	stw	r5,1220(sp)
   438c4:	1163c83a 	sub	r17,r2,r5
   438c8:	003c5c06 	br	42a3c <__alt_data_end+0xfffc2a3c>
   438cc:	b809883a 	mov	r4,r23
   438d0:	b00b883a 	mov	r5,r22
   438d4:	d9811e04 	addi	r6,sp,1144
   438d8:	00498900 	call	49890 <__sprint_r>
   438dc:	103bf41e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   438e0:	d8c12017 	ldw	r3,1152(sp)
   438e4:	da000404 	addi	r8,sp,16
   438e8:	d9413117 	ldw	r5,1220(sp)
   438ec:	d9013417 	ldw	r4,1232(sp)
   438f0:	d8812617 	ldw	r2,1176(sp)
   438f4:	2923883a 	add	r17,r5,r4
   438f8:	d9413317 	ldw	r5,1228(sp)
   438fc:	11400216 	blt	r2,r5,43908 <___vfprintf_internal_r+0x14b8>
   43900:	e100004c 	andi	r4,fp,1
   43904:	20000d26 	beq	r4,zero,4393c <___vfprintf_internal_r+0x14ec>
   43908:	d9013817 	ldw	r4,1248(sp)
   4390c:	d9413517 	ldw	r5,1236(sp)
   43910:	1907883a 	add	r3,r3,r4
   43914:	d9011f17 	ldw	r4,1148(sp)
   43918:	41400015 	stw	r5,0(r8)
   4391c:	d9413817 	ldw	r5,1248(sp)
   43920:	21000044 	addi	r4,r4,1
   43924:	d8c12015 	stw	r3,1152(sp)
   43928:	41400115 	stw	r5,4(r8)
   4392c:	d9011f15 	stw	r4,1148(sp)
   43930:	014001c4 	movi	r5,7
   43934:	2901fd16 	blt	r5,r4,4412c <___vfprintf_internal_r+0x1cdc>
   43938:	42000204 	addi	r8,r8,8
   4393c:	d9013317 	ldw	r4,1228(sp)
   43940:	2085c83a 	sub	r2,r4,r2
   43944:	8449c83a 	sub	r4,r16,r17
   43948:	1021883a 	mov	r16,r2
   4394c:	2080010e 	bge	r4,r2,43954 <___vfprintf_internal_r+0x1504>
   43950:	2021883a 	mov	r16,r4
   43954:	04000a0e 	bge	zero,r16,43980 <___vfprintf_internal_r+0x1530>
   43958:	d9011f17 	ldw	r4,1148(sp)
   4395c:	1c07883a 	add	r3,r3,r16
   43960:	44400015 	stw	r17,0(r8)
   43964:	21000044 	addi	r4,r4,1
   43968:	44000115 	stw	r16,4(r8)
   4396c:	d8c12015 	stw	r3,1152(sp)
   43970:	d9011f15 	stw	r4,1148(sp)
   43974:	014001c4 	movi	r5,7
   43978:	29020916 	blt	r5,r4,441a0 <___vfprintf_internal_r+0x1d50>
   4397c:	42000204 	addi	r8,r8,8
   43980:	80020116 	blt	r16,zero,44188 <___vfprintf_internal_r+0x1d38>
   43984:	1421c83a 	sub	r16,r2,r16
   43988:	043cc40e 	bge	zero,r16,42c9c <__alt_data_end+0xfffc2c9c>
   4398c:	04400404 	movi	r17,16
   43990:	d8811f17 	ldw	r2,1148(sp)
   43994:	8c3f110e 	bge	r17,r16,435dc <__alt_data_end+0xfffc35dc>
   43998:	01400174 	movhi	r5,5
   4399c:	29470284 	addi	r5,r5,7178
   439a0:	d9412c15 	stw	r5,1200(sp)
   439a4:	04c001c4 	movi	r19,7
   439a8:	00000306 	br	439b8 <___vfprintf_internal_r+0x1568>
   439ac:	42000204 	addi	r8,r8,8
   439b0:	843ffc04 	addi	r16,r16,-16
   439b4:	8c3f0c0e 	bge	r17,r16,435e8 <__alt_data_end+0xfffc35e8>
   439b8:	18c00404 	addi	r3,r3,16
   439bc:	10800044 	addi	r2,r2,1
   439c0:	45000015 	stw	r20,0(r8)
   439c4:	44400115 	stw	r17,4(r8)
   439c8:	d8c12015 	stw	r3,1152(sp)
   439cc:	d8811f15 	stw	r2,1148(sp)
   439d0:	98bff60e 	bge	r19,r2,439ac <__alt_data_end+0xfffc39ac>
   439d4:	b809883a 	mov	r4,r23
   439d8:	b00b883a 	mov	r5,r22
   439dc:	d9811e04 	addi	r6,sp,1144
   439e0:	00498900 	call	49890 <__sprint_r>
   439e4:	103bb21e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   439e8:	d8c12017 	ldw	r3,1152(sp)
   439ec:	d8811f17 	ldw	r2,1148(sp)
   439f0:	da000404 	addi	r8,sp,16
   439f4:	003fee06 	br	439b0 <__alt_data_end+0xfffc39b0>
   439f8:	e088703a 	and	r4,fp,r2
   439fc:	203ec01e 	bne	r4,zero,43500 <__alt_data_end+0xfffc3500>
   43a00:	dc011f17 	ldw	r16,1148(sp)
   43a04:	d9013117 	ldw	r4,1220(sp)
   43a08:	40800115 	stw	r2,4(r8)
   43a0c:	84000044 	addi	r16,r16,1
   43a10:	41000015 	stw	r4,0(r8)
   43a14:	d8c12015 	stw	r3,1152(sp)
   43a18:	dc011f15 	stw	r16,1148(sp)
   43a1c:	008001c4 	movi	r2,7
   43a20:	14000e16 	blt	r2,r16,43a5c <___vfprintf_internal_r+0x160c>
   43a24:	44400204 	addi	r17,r8,8
   43a28:	003ee006 	br	435ac <__alt_data_end+0xfffc35ac>
   43a2c:	01000174 	movhi	r4,5
   43a30:	21070284 	addi	r4,r4,7178
   43a34:	d9012c15 	stw	r4,1200(sp)
   43a38:	d8812c17 	ldw	r2,1200(sp)
   43a3c:	1cc7883a 	add	r3,r3,r19
   43a40:	84000044 	addi	r16,r16,1
   43a44:	88800015 	stw	r2,0(r17)
   43a48:	8cc00115 	stw	r19,4(r17)
   43a4c:	d8c12015 	stw	r3,1152(sp)
   43a50:	dc011f15 	stw	r16,1148(sp)
   43a54:	008001c4 	movi	r2,7
   43a58:	143ed30e 	bge	r2,r16,435a8 <__alt_data_end+0xfffc35a8>
   43a5c:	b809883a 	mov	r4,r23
   43a60:	b00b883a 	mov	r5,r22
   43a64:	d9811e04 	addi	r6,sp,1144
   43a68:	00498900 	call	49890 <__sprint_r>
   43a6c:	103b901e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   43a70:	d8c12017 	ldw	r3,1152(sp)
   43a74:	dc011f17 	ldw	r16,1148(sp)
   43a78:	dc400404 	addi	r17,sp,16
   43a7c:	003ecb06 	br	435ac <__alt_data_end+0xfffc35ac>
   43a80:	b809883a 	mov	r4,r23
   43a84:	b00b883a 	mov	r5,r22
   43a88:	d9811e04 	addi	r6,sp,1144
   43a8c:	00498900 	call	49890 <__sprint_r>
   43a90:	103b871e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   43a94:	d8c12017 	ldw	r3,1152(sp)
   43a98:	dc011f17 	ldw	r16,1148(sp)
   43a9c:	da000404 	addi	r8,sp,16
   43aa0:	003ea206 	br	4352c <__alt_data_end+0xfffc352c>
   43aa4:	b809883a 	mov	r4,r23
   43aa8:	b00b883a 	mov	r5,r22
   43aac:	d9811e04 	addi	r6,sp,1144
   43ab0:	00498900 	call	49890 <__sprint_r>
   43ab4:	103b7e1e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   43ab8:	d8c12017 	ldw	r3,1152(sp)
   43abc:	dc011f17 	ldw	r16,1148(sp)
   43ac0:	dc400404 	addi	r17,sp,16
   43ac4:	003ea406 	br	43558 <__alt_data_end+0xfffc3558>
   43ac8:	b809883a 	mov	r4,r23
   43acc:	b00b883a 	mov	r5,r22
   43ad0:	d9811e04 	addi	r6,sp,1144
   43ad4:	00498900 	call	49890 <__sprint_r>
   43ad8:	103b751e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   43adc:	d8c12017 	ldw	r3,1152(sp)
   43ae0:	da000404 	addi	r8,sp,16
   43ae4:	003c3706 	br	42bc4 <__alt_data_end+0xfffc2bc4>
   43ae8:	04a5c83a 	sub	r18,zero,r18
   43aec:	9004c03a 	cmpne	r2,r18,zero
   43af0:	056bc83a 	sub	r21,zero,r21
   43af4:	a8abc83a 	sub	r21,r21,r2
   43af8:	04c00b44 	movi	r19,45
   43afc:	dcc12785 	stb	r19,1182(sp)
   43b00:	da413215 	stw	r9,1224(sp)
   43b04:	00800044 	movi	r2,1
   43b08:	9546b03a 	or	r3,r18,r21
   43b0c:	003bb106 	br	429d4 <__alt_data_end+0xfffc29d4>
   43b10:	da013f15 	stw	r8,1276(sp)
   43b14:	da413e15 	stw	r9,1272(sp)
   43b18:	00494ec0 	call	494ec <__fpclassifyd>
   43b1c:	da013f17 	ldw	r8,1276(sp)
   43b20:	da413e17 	ldw	r9,1272(sp)
   43b24:	1000e526 	beq	r2,zero,43ebc <___vfprintf_internal_r+0x1a6c>
   43b28:	04fff7c4 	movi	r19,-33
   43b2c:	00bfffc4 	movi	r2,-1
   43b30:	84e6703a 	and	r19,r16,r19
   43b34:	48822926 	beq	r9,r2,443dc <___vfprintf_internal_r+0x1f8c>
   43b38:	008011c4 	movi	r2,71
   43b3c:	98821626 	beq	r19,r2,44398 <___vfprintf_internal_r+0x1f48>
   43b40:	d9013917 	ldw	r4,1252(sp)
   43b44:	e0c04014 	ori	r3,fp,256
   43b48:	d8c12d15 	stw	r3,1204(sp)
   43b4c:	20021f16 	blt	r4,zero,443cc <___vfprintf_internal_r+0x1f7c>
   43b50:	dc413917 	ldw	r17,1252(sp)
   43b54:	d8012b05 	stb	zero,1196(sp)
   43b58:	00801984 	movi	r2,102
   43b5c:	80814d26 	beq	r16,r2,44094 <___vfprintf_internal_r+0x1c44>
   43b60:	00801184 	movi	r2,70
   43b64:	80814b26 	beq	r16,r2,44094 <___vfprintf_internal_r+0x1c44>
   43b68:	00801144 	movi	r2,69
   43b6c:	98821d26 	beq	r19,r2,443e4 <___vfprintf_internal_r+0x1f94>
   43b70:	482b883a 	mov	r21,r9
   43b74:	d8812604 	addi	r2,sp,1176
   43b78:	d8800115 	stw	r2,4(sp)
   43b7c:	d9413717 	ldw	r5,1244(sp)
   43b80:	d8812504 	addi	r2,sp,1172
   43b84:	d8800215 	stw	r2,8(sp)
   43b88:	d8812104 	addi	r2,sp,1156
   43b8c:	dd400015 	stw	r21,0(sp)
   43b90:	d8800315 	stw	r2,12(sp)
   43b94:	b809883a 	mov	r4,r23
   43b98:	880d883a 	mov	r6,r17
   43b9c:	01c00084 	movi	r7,2
   43ba0:	da013f15 	stw	r8,1276(sp)
   43ba4:	da413e15 	stw	r9,1272(sp)
   43ba8:	00448c80 	call	448c8 <_dtoa_r>
   43bac:	d8813115 	stw	r2,1220(sp)
   43bb0:	008019c4 	movi	r2,103
   43bb4:	da013f17 	ldw	r8,1276(sp)
   43bb8:	da413e17 	ldw	r9,1272(sp)
   43bbc:	80800226 	beq	r16,r2,43bc8 <___vfprintf_internal_r+0x1778>
   43bc0:	008011c4 	movi	r2,71
   43bc4:	8081451e 	bne	r16,r2,440dc <___vfprintf_internal_r+0x1c8c>
   43bc8:	e080004c 	andi	r2,fp,1
   43bcc:	10021e26 	beq	r2,zero,44448 <___vfprintf_internal_r+0x1ff8>
   43bd0:	d8c13117 	ldw	r3,1220(sp)
   43bd4:	1d55883a 	add	r10,r3,r21
   43bd8:	d9013717 	ldw	r4,1244(sp)
   43bdc:	880b883a 	mov	r5,r17
   43be0:	000d883a 	mov	r6,zero
   43be4:	000f883a 	mov	r7,zero
   43be8:	da013f15 	stw	r8,1276(sp)
   43bec:	da413e15 	stw	r9,1272(sp)
   43bf0:	da813d15 	stw	r10,1268(sp)
   43bf4:	004d6080 	call	4d608 <__eqdf2>
   43bf8:	da013f17 	ldw	r8,1276(sp)
   43bfc:	da413e17 	ldw	r9,1272(sp)
   43c00:	da813d17 	ldw	r10,1268(sp)
   43c04:	1001a126 	beq	r2,zero,4428c <___vfprintf_internal_r+0x1e3c>
   43c08:	d8812117 	ldw	r2,1156(sp)
   43c0c:	1280062e 	bgeu	r2,r10,43c28 <___vfprintf_internal_r+0x17d8>
   43c10:	01000c04 	movi	r4,48
   43c14:	10c00044 	addi	r3,r2,1
   43c18:	d8c12115 	stw	r3,1156(sp)
   43c1c:	11000005 	stb	r4,0(r2)
   43c20:	d8812117 	ldw	r2,1156(sp)
   43c24:	12bffb36 	bltu	r2,r10,43c14 <__alt_data_end+0xfffc3c14>
   43c28:	d8c13117 	ldw	r3,1220(sp)
   43c2c:	10c5c83a 	sub	r2,r2,r3
   43c30:	d8813315 	stw	r2,1228(sp)
   43c34:	008011c4 	movi	r2,71
   43c38:	98818926 	beq	r19,r2,44260 <___vfprintf_internal_r+0x1e10>
   43c3c:	00801944 	movi	r2,101
   43c40:	14023c0e 	bge	r2,r16,44534 <___vfprintf_internal_r+0x20e4>
   43c44:	d8c12617 	ldw	r3,1176(sp)
   43c48:	00801984 	movi	r2,102
   43c4c:	d8c13415 	stw	r3,1232(sp)
   43c50:	8081ef26 	beq	r16,r2,44410 <___vfprintf_internal_r+0x1fc0>
   43c54:	d8c13417 	ldw	r3,1232(sp)
   43c58:	d9013317 	ldw	r4,1228(sp)
   43c5c:	1901e316 	blt	r3,r4,443ec <___vfprintf_internal_r+0x1f9c>
   43c60:	e080004c 	andi	r2,fp,1
   43c64:	1001f426 	beq	r2,zero,44438 <___vfprintf_internal_r+0x1fe8>
   43c68:	d8c13417 	ldw	r3,1232(sp)
   43c6c:	1c400044 	addi	r17,r3,1
   43c70:	8839883a 	mov	fp,r17
   43c74:	8801e416 	blt	r17,zero,44408 <___vfprintf_internal_r+0x1fb8>
   43c78:	dd412b07 	ldb	r21,1196(sp)
   43c7c:	a801701e 	bne	r21,zero,44240 <___vfprintf_internal_r+0x1df0>
   43c80:	df012b15 	stw	fp,1196(sp)
   43c84:	dcc12783 	ldbu	r19,1182(sp)
   43c88:	df012d17 	ldw	fp,1204(sp)
   43c8c:	d8013215 	stw	zero,1224(sp)
   43c90:	dc812d15 	stw	r18,1204(sp)
   43c94:	003b6e06 	br	42a50 <__alt_data_end+0xfffc2a50>
   43c98:	e080040c 	andi	r2,fp,16
   43c9c:	1000b51e 	bne	r2,zero,43f74 <___vfprintf_internal_r+0x1b24>
   43ca0:	e080100c 	andi	r2,fp,64
   43ca4:	10015b26 	beq	r2,zero,44214 <___vfprintf_internal_r+0x1dc4>
   43ca8:	d9012d17 	ldw	r4,1204(sp)
   43cac:	d9412f17 	ldw	r5,1212(sp)
   43cb0:	20800017 	ldw	r2,0(r4)
   43cb4:	21000104 	addi	r4,r4,4
   43cb8:	d9012d15 	stw	r4,1204(sp)
   43cbc:	1140000d 	sth	r5,0(r2)
   43cc0:	003a2006 	br	42544 <__alt_data_end+0xfffc2544>
   43cc4:	e0c0100c 	andi	r3,fp,64
   43cc8:	1800a226 	beq	r3,zero,43f54 <___vfprintf_internal_r+0x1b04>
   43ccc:	d8c12d17 	ldw	r3,1204(sp)
   43cd0:	1480000b 	ldhu	r18,0(r2)
   43cd4:	002b883a 	mov	r21,zero
   43cd8:	18c00104 	addi	r3,r3,4
   43cdc:	d8c12d15 	stw	r3,1204(sp)
   43ce0:	0005883a 	mov	r2,zero
   43ce4:	9007883a 	mov	r3,r18
   43ce8:	003c6906 	br	42e90 <__alt_data_end+0xfffc2e90>
   43cec:	e0c0100c 	andi	r3,fp,64
   43cf0:	18009026 	beq	r3,zero,43f34 <___vfprintf_internal_r+0x1ae4>
   43cf4:	1480000b 	ldhu	r18,0(r2)
   43cf8:	d8812d17 	ldw	r2,1204(sp)
   43cfc:	002b883a 	mov	r21,zero
   43d00:	9007883a 	mov	r3,r18
   43d04:	10800104 	addi	r2,r2,4
   43d08:	d8812d15 	stw	r2,1204(sp)
   43d0c:	00800044 	movi	r2,1
   43d10:	003c5f06 	br	42e90 <__alt_data_end+0xfffc2e90>
   43d14:	e0c0100c 	andi	r3,fp,64
   43d18:	18008026 	beq	r3,zero,43f1c <___vfprintf_internal_r+0x1acc>
   43d1c:	d9012d17 	ldw	r4,1204(sp)
   43d20:	1480000b 	ldhu	r18,0(r2)
   43d24:	002b883a 	mov	r21,zero
   43d28:	21000104 	addi	r4,r4,4
   43d2c:	d9012d15 	stw	r4,1204(sp)
   43d30:	003c7906 	br	42f18 <__alt_data_end+0xfffc2f18>
   43d34:	e080100c 	andi	r2,fp,64
   43d38:	10007126 	beq	r2,zero,43f00 <___vfprintf_internal_r+0x1ab0>
   43d3c:	1c80000f 	ldh	r18,0(r3)
   43d40:	d8812d17 	ldw	r2,1204(sp)
   43d44:	902bd7fa 	srai	r21,r18,31
   43d48:	10800104 	addi	r2,r2,4
   43d4c:	d8812d15 	stw	r2,1204(sp)
   43d50:	a805883a 	mov	r2,r21
   43d54:	003b1a06 	br	429c0 <__alt_data_end+0xfffc29c0>
   43d58:	e4000007 	ldb	r16,0(fp)
   43d5c:	e005883a 	mov	r2,fp
   43d60:	003a2306 	br	425f0 <__alt_data_end+0xfffc25f0>
   43d64:	00800084 	movi	r2,2
   43d68:	003c4906 	br	42e90 <__alt_data_end+0xfffc2e90>
   43d6c:	01000174 	movhi	r4,5
   43d70:	21070284 	addi	r4,r4,7178
   43d74:	d9012c15 	stw	r4,1200(sp)
   43d78:	d9012c17 	ldw	r4,1200(sp)
   43d7c:	1c47883a 	add	r3,r3,r17
   43d80:	10800044 	addi	r2,r2,1
   43d84:	41000015 	stw	r4,0(r8)
   43d88:	44400115 	stw	r17,4(r8)
   43d8c:	d8c12015 	stw	r3,1152(sp)
   43d90:	d8811f15 	stw	r2,1148(sp)
   43d94:	010001c4 	movi	r4,7
   43d98:	20becc16 	blt	r4,r2,438cc <__alt_data_end+0xfffc38cc>
   43d9c:	42000204 	addi	r8,r8,8
   43da0:	003ed106 	br	438e8 <__alt_data_end+0xfffc38e8>
   43da4:	01000174 	movhi	r4,5
   43da8:	21070284 	addi	r4,r4,7178
   43dac:	d9012c15 	stw	r4,1200(sp)
   43db0:	003ba306 	br	42c40 <__alt_data_end+0xfffc2c40>
   43db4:	b809883a 	mov	r4,r23
   43db8:	b00b883a 	mov	r5,r22
   43dbc:	d9811e04 	addi	r6,sp,1144
   43dc0:	00498900 	call	49890 <__sprint_r>
   43dc4:	103aba1e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   43dc8:	d8c12017 	ldw	r3,1152(sp)
   43dcc:	da000404 	addi	r8,sp,16
   43dd0:	003d6c06 	br	43384 <__alt_data_end+0xfffc3384>
   43dd4:	d8811f17 	ldw	r2,1148(sp)
   43dd8:	01400174 	movhi	r5,5
   43ddc:	01000044 	movi	r4,1
   43de0:	18c00044 	addi	r3,r3,1
   43de4:	10800044 	addi	r2,r2,1
   43de8:	29470204 	addi	r5,r5,7176
   43dec:	41000115 	stw	r4,4(r8)
   43df0:	41400015 	stw	r5,0(r8)
   43df4:	d8c12015 	stw	r3,1152(sp)
   43df8:	d8811f15 	stw	r2,1148(sp)
   43dfc:	010001c4 	movi	r4,7
   43e00:	20806716 	blt	r4,r2,43fa0 <___vfprintf_internal_r+0x1b50>
   43e04:	42000204 	addi	r8,r8,8
   43e08:	8000041e 	bne	r16,zero,43e1c <___vfprintf_internal_r+0x19cc>
   43e0c:	d8813317 	ldw	r2,1228(sp)
   43e10:	1000021e 	bne	r2,zero,43e1c <___vfprintf_internal_r+0x19cc>
   43e14:	e080004c 	andi	r2,fp,1
   43e18:	103ba026 	beq	r2,zero,42c9c <__alt_data_end+0xfffc2c9c>
   43e1c:	d9013817 	ldw	r4,1248(sp)
   43e20:	d8811f17 	ldw	r2,1148(sp)
   43e24:	d9413517 	ldw	r5,1236(sp)
   43e28:	1907883a 	add	r3,r3,r4
   43e2c:	10800044 	addi	r2,r2,1
   43e30:	41000115 	stw	r4,4(r8)
   43e34:	41400015 	stw	r5,0(r8)
   43e38:	d8c12015 	stw	r3,1152(sp)
   43e3c:	d8811f15 	stw	r2,1148(sp)
   43e40:	010001c4 	movi	r4,7
   43e44:	20815716 	blt	r4,r2,443a4 <___vfprintf_internal_r+0x1f54>
   43e48:	42000204 	addi	r8,r8,8
   43e4c:	0421c83a 	sub	r16,zero,r16
   43e50:	0400810e 	bge	zero,r16,44058 <___vfprintf_internal_r+0x1c08>
   43e54:	04400404 	movi	r17,16
   43e58:	8c00bd0e 	bge	r17,r16,44150 <___vfprintf_internal_r+0x1d00>
   43e5c:	01400174 	movhi	r5,5
   43e60:	29470284 	addi	r5,r5,7178
   43e64:	d9412c15 	stw	r5,1200(sp)
   43e68:	04c001c4 	movi	r19,7
   43e6c:	00000306 	br	43e7c <___vfprintf_internal_r+0x1a2c>
   43e70:	42000204 	addi	r8,r8,8
   43e74:	843ffc04 	addi	r16,r16,-16
   43e78:	8c00b80e 	bge	r17,r16,4415c <___vfprintf_internal_r+0x1d0c>
   43e7c:	18c00404 	addi	r3,r3,16
   43e80:	10800044 	addi	r2,r2,1
   43e84:	45000015 	stw	r20,0(r8)
   43e88:	44400115 	stw	r17,4(r8)
   43e8c:	d8c12015 	stw	r3,1152(sp)
   43e90:	d8811f15 	stw	r2,1148(sp)
   43e94:	98bff60e 	bge	r19,r2,43e70 <__alt_data_end+0xfffc3e70>
   43e98:	b809883a 	mov	r4,r23
   43e9c:	b00b883a 	mov	r5,r22
   43ea0:	d9811e04 	addi	r6,sp,1144
   43ea4:	00498900 	call	49890 <__sprint_r>
   43ea8:	103a811e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   43eac:	d8c12017 	ldw	r3,1152(sp)
   43eb0:	d8811f17 	ldw	r2,1148(sp)
   43eb4:	da000404 	addi	r8,sp,16
   43eb8:	003fee06 	br	43e74 <__alt_data_end+0xfffc3e74>
   43ebc:	008011c4 	movi	r2,71
   43ec0:	1400db16 	blt	r2,r16,44230 <___vfprintf_internal_r+0x1de0>
   43ec4:	01000174 	movhi	r4,5
   43ec8:	2106f404 	addi	r4,r4,7120
   43ecc:	d9013115 	stw	r4,1220(sp)
   43ed0:	00c000c4 	movi	r3,3
   43ed4:	00bfdfc4 	movi	r2,-129
   43ed8:	d8c12b15 	stw	r3,1196(sp)
   43edc:	e0b8703a 	and	fp,fp,r2
   43ee0:	dcc12783 	ldbu	r19,1182(sp)
   43ee4:	dc812d15 	stw	r18,1204(sp)
   43ee8:	1823883a 	mov	r17,r3
   43eec:	d8013215 	stw	zero,1224(sp)
   43ef0:	d8013415 	stw	zero,1232(sp)
   43ef4:	003ad606 	br	42a50 <__alt_data_end+0xfffc2a50>
   43ef8:	4823883a 	mov	r17,r9
   43efc:	003cc906 	br	43224 <__alt_data_end+0xfffc3224>
   43f00:	1c800017 	ldw	r18,0(r3)
   43f04:	d8c12d17 	ldw	r3,1204(sp)
   43f08:	902bd7fa 	srai	r21,r18,31
   43f0c:	18c00104 	addi	r3,r3,4
   43f10:	d8c12d15 	stw	r3,1204(sp)
   43f14:	a805883a 	mov	r2,r21
   43f18:	003aa906 	br	429c0 <__alt_data_end+0xfffc29c0>
   43f1c:	d9412d17 	ldw	r5,1204(sp)
   43f20:	14800017 	ldw	r18,0(r2)
   43f24:	002b883a 	mov	r21,zero
   43f28:	29400104 	addi	r5,r5,4
   43f2c:	d9412d15 	stw	r5,1204(sp)
   43f30:	003bf906 	br	42f18 <__alt_data_end+0xfffc2f18>
   43f34:	d8c12d17 	ldw	r3,1204(sp)
   43f38:	14800017 	ldw	r18,0(r2)
   43f3c:	002b883a 	mov	r21,zero
   43f40:	18c00104 	addi	r3,r3,4
   43f44:	d8c12d15 	stw	r3,1204(sp)
   43f48:	00800044 	movi	r2,1
   43f4c:	9007883a 	mov	r3,r18
   43f50:	003bcf06 	br	42e90 <__alt_data_end+0xfffc2e90>
   43f54:	d9012d17 	ldw	r4,1204(sp)
   43f58:	14800017 	ldw	r18,0(r2)
   43f5c:	002b883a 	mov	r21,zero
   43f60:	21000104 	addi	r4,r4,4
   43f64:	d9012d15 	stw	r4,1204(sp)
   43f68:	0005883a 	mov	r2,zero
   43f6c:	9007883a 	mov	r3,r18
   43f70:	003bc706 	br	42e90 <__alt_data_end+0xfffc2e90>
   43f74:	d9412d17 	ldw	r5,1204(sp)
   43f78:	d8c12f17 	ldw	r3,1212(sp)
   43f7c:	28800017 	ldw	r2,0(r5)
   43f80:	29400104 	addi	r5,r5,4
   43f84:	d9412d15 	stw	r5,1204(sp)
   43f88:	10c00015 	stw	r3,0(r2)
   43f8c:	00396d06 	br	42544 <__alt_data_end+0xfffc2544>
   43f90:	01000174 	movhi	r4,5
   43f94:	2106f204 	addi	r4,r4,7112
   43f98:	d9013115 	stw	r4,1220(sp)
   43f9c:	003ba206 	br	42e28 <__alt_data_end+0xfffc2e28>
   43fa0:	b809883a 	mov	r4,r23
   43fa4:	b00b883a 	mov	r5,r22
   43fa8:	d9811e04 	addi	r6,sp,1144
   43fac:	00498900 	call	49890 <__sprint_r>
   43fb0:	103a3f1e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   43fb4:	dc012617 	ldw	r16,1176(sp)
   43fb8:	d8c12017 	ldw	r3,1152(sp)
   43fbc:	da000404 	addi	r8,sp,16
   43fc0:	003f9106 	br	43e08 <__alt_data_end+0xfffc3e08>
   43fc4:	e0800044 	addi	r2,fp,1
   43fc8:	9cc00814 	ori	r19,r19,32
   43fcc:	e4000047 	ldb	r16,1(fp)
   43fd0:	00398706 	br	425f0 <__alt_data_end+0xfffc25f0>
   43fd4:	d8812e17 	ldw	r2,1208(sp)
   43fd8:	d8c12d15 	stw	r3,1204(sp)
   43fdc:	0085c83a 	sub	r2,zero,r2
   43fe0:	d8812e15 	stw	r2,1208(sp)
   43fe4:	e005883a 	mov	r2,fp
   43fe8:	003a3a06 	br	428d4 <__alt_data_end+0xfffc28d4>
   43fec:	b809883a 	mov	r4,r23
   43ff0:	b00b883a 	mov	r5,r22
   43ff4:	d9811e04 	addi	r6,sp,1144
   43ff8:	00498900 	call	49890 <__sprint_r>
   43ffc:	103a2c1e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   44000:	d8c12017 	ldw	r3,1152(sp)
   44004:	da000404 	addi	r8,sp,16
   44008:	003cf006 	br	433cc <__alt_data_end+0xfffc33cc>
   4400c:	d8c12817 	ldw	r3,1184(sp)
   44010:	d9013117 	ldw	r4,1220(sp)
   44014:	1923c83a 	sub	r17,r3,r4
   44018:	003a8806 	br	42a3c <__alt_data_end+0xfffc2a3c>
   4401c:	da013f15 	stw	r8,1276(sp)
   44020:	00423b80 	call	423b8 <strlen>
   44024:	1023883a 	mov	r17,r2
   44028:	da013f17 	ldw	r8,1276(sp)
   4402c:	883c7f0e 	bge	r17,zero,4322c <__alt_data_end+0xfffc322c>
   44030:	0005883a 	mov	r2,zero
   44034:	003c7d06 	br	4322c <__alt_data_end+0xfffc322c>
   44038:	b809883a 	mov	r4,r23
   4403c:	b00b883a 	mov	r5,r22
   44040:	d9811e04 	addi	r6,sp,1144
   44044:	00498900 	call	49890 <__sprint_r>
   44048:	103a191e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   4404c:	d8c12017 	ldw	r3,1152(sp)
   44050:	d8811f17 	ldw	r2,1148(sp)
   44054:	da000404 	addi	r8,sp,16
   44058:	d9413317 	ldw	r5,1228(sp)
   4405c:	d9013117 	ldw	r4,1220(sp)
   44060:	10800044 	addi	r2,r2,1
   44064:	28c7883a 	add	r3,r5,r3
   44068:	41000015 	stw	r4,0(r8)
   4406c:	41400115 	stw	r5,4(r8)
   44070:	d8c12015 	stw	r3,1152(sp)
   44074:	d8811f15 	stw	r2,1148(sp)
   44078:	010001c4 	movi	r4,7
   4407c:	20bb060e 	bge	r4,r2,42c98 <__alt_data_end+0xfffc2c98>
   44080:	003d6206 	br	4360c <__alt_data_end+0xfffc360c>
   44084:	01000174 	movhi	r4,5
   44088:	21070684 	addi	r4,r4,7194
   4408c:	d9013615 	stw	r4,1240(sp)
   44090:	003aa306 	br	42b20 <__alt_data_end+0xfffc2b20>
   44094:	d8812604 	addi	r2,sp,1176
   44098:	d8800115 	stw	r2,4(sp)
   4409c:	d9413717 	ldw	r5,1244(sp)
   440a0:	d8812504 	addi	r2,sp,1172
   440a4:	d8800215 	stw	r2,8(sp)
   440a8:	d8812104 	addi	r2,sp,1156
   440ac:	da400015 	stw	r9,0(sp)
   440b0:	d8800315 	stw	r2,12(sp)
   440b4:	b809883a 	mov	r4,r23
   440b8:	880d883a 	mov	r6,r17
   440bc:	01c000c4 	movi	r7,3
   440c0:	da013f15 	stw	r8,1276(sp)
   440c4:	da413e15 	stw	r9,1272(sp)
   440c8:	00448c80 	call	448c8 <_dtoa_r>
   440cc:	da413e17 	ldw	r9,1272(sp)
   440d0:	da013f17 	ldw	r8,1276(sp)
   440d4:	d8813115 	stw	r2,1220(sp)
   440d8:	482b883a 	mov	r21,r9
   440dc:	d8c13117 	ldw	r3,1220(sp)
   440e0:	00801184 	movi	r2,70
   440e4:	1d55883a 	add	r10,r3,r21
   440e8:	98bebb1e 	bne	r19,r2,43bd8 <__alt_data_end+0xfffc3bd8>
   440ec:	19000007 	ldb	r4,0(r3)
   440f0:	00800c04 	movi	r2,48
   440f4:	2080dd26 	beq	r4,r2,4446c <___vfprintf_internal_r+0x201c>
   440f8:	d8c12617 	ldw	r3,1176(sp)
   440fc:	50d5883a 	add	r10,r10,r3
   44100:	003eb506 	br	43bd8 <__alt_data_end+0xfffc3bd8>
   44104:	0023883a 	mov	r17,zero
   44108:	003d9b06 	br	43778 <__alt_data_end+0xfffc3778>
   4410c:	b809883a 	mov	r4,r23
   44110:	b00b883a 	mov	r5,r22
   44114:	d9811e04 	addi	r6,sp,1144
   44118:	00498900 	call	49890 <__sprint_r>
   4411c:	1039e41e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   44120:	d8c12017 	ldw	r3,1152(sp)
   44124:	da000404 	addi	r8,sp,16
   44128:	003d9206 	br	43774 <__alt_data_end+0xfffc3774>
   4412c:	b809883a 	mov	r4,r23
   44130:	b00b883a 	mov	r5,r22
   44134:	d9811e04 	addi	r6,sp,1144
   44138:	00498900 	call	49890 <__sprint_r>
   4413c:	1039dc1e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   44140:	d8812617 	ldw	r2,1176(sp)
   44144:	d8c12017 	ldw	r3,1152(sp)
   44148:	da000404 	addi	r8,sp,16
   4414c:	003dfb06 	br	4393c <__alt_data_end+0xfffc393c>
   44150:	01000174 	movhi	r4,5
   44154:	21070284 	addi	r4,r4,7178
   44158:	d9012c15 	stw	r4,1200(sp)
   4415c:	d9012c17 	ldw	r4,1200(sp)
   44160:	1c07883a 	add	r3,r3,r16
   44164:	10800044 	addi	r2,r2,1
   44168:	41000015 	stw	r4,0(r8)
   4416c:	44000115 	stw	r16,4(r8)
   44170:	d8c12015 	stw	r3,1152(sp)
   44174:	d8811f15 	stw	r2,1148(sp)
   44178:	010001c4 	movi	r4,7
   4417c:	20bfae16 	blt	r4,r2,44038 <__alt_data_end+0xfffc4038>
   44180:	42000204 	addi	r8,r8,8
   44184:	003fb406 	br	44058 <__alt_data_end+0xfffc4058>
   44188:	0021883a 	mov	r16,zero
   4418c:	003dfd06 	br	43984 <__alt_data_end+0xfffc3984>
   44190:	01400174 	movhi	r5,5
   44194:	29470684 	addi	r5,r5,7194
   44198:	d9413615 	stw	r5,1240(sp)
   4419c:	003ae306 	br	42d2c <__alt_data_end+0xfffc2d2c>
   441a0:	b809883a 	mov	r4,r23
   441a4:	b00b883a 	mov	r5,r22
   441a8:	d9811e04 	addi	r6,sp,1144
   441ac:	00498900 	call	49890 <__sprint_r>
   441b0:	1039bf1e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   441b4:	d8812617 	ldw	r2,1176(sp)
   441b8:	d9413317 	ldw	r5,1228(sp)
   441bc:	d8c12017 	ldw	r3,1152(sp)
   441c0:	da000404 	addi	r8,sp,16
   441c4:	2885c83a 	sub	r2,r5,r2
   441c8:	003ded06 	br	43980 <__alt_data_end+0xfffc3980>
   441cc:	00800184 	movi	r2,6
   441d0:	1240012e 	bgeu	r2,r9,441d8 <___vfprintf_internal_r+0x1d88>
   441d4:	1013883a 	mov	r9,r2
   441d8:	4823883a 	mov	r17,r9
   441dc:	4805883a 	mov	r2,r9
   441e0:	4800b216 	blt	r9,zero,444ac <___vfprintf_internal_r+0x205c>
   441e4:	01400174 	movhi	r5,5
   441e8:	29470004 	addi	r5,r5,7168
   441ec:	d8812b15 	stw	r2,1196(sp)
   441f0:	dc812d15 	stw	r18,1204(sp)
   441f4:	d8013215 	stw	zero,1224(sp)
   441f8:	d8013415 	stw	zero,1232(sp)
   441fc:	d9413115 	stw	r5,1220(sp)
   44200:	0005883a 	mov	r2,zero
   44204:	003a1906 	br	42a6c <__alt_data_end+0xfffc2a6c>
   44208:	04c00b44 	movi	r19,45
   4420c:	dcc12785 	stb	r19,1182(sp)
   44210:	003b0006 	br	42e14 <__alt_data_end+0xfffc2e14>
   44214:	d8c12d17 	ldw	r3,1204(sp)
   44218:	d9012f17 	ldw	r4,1212(sp)
   4421c:	18800017 	ldw	r2,0(r3)
   44220:	18c00104 	addi	r3,r3,4
   44224:	d8c12d15 	stw	r3,1204(sp)
   44228:	11000015 	stw	r4,0(r2)
   4422c:	0038c506 	br	42544 <__alt_data_end+0xfffc2544>
   44230:	01400174 	movhi	r5,5
   44234:	2946f504 	addi	r5,r5,7124
   44238:	d9413115 	stw	r5,1220(sp)
   4423c:	003f2406 	br	43ed0 <__alt_data_end+0xfffc3ed0>
   44240:	00800b44 	movi	r2,45
   44244:	d8812785 	stb	r2,1182(sp)
   44248:	df012b15 	stw	fp,1196(sp)
   4424c:	d8013215 	stw	zero,1224(sp)
   44250:	df012d17 	ldw	fp,1204(sp)
   44254:	00800b44 	movi	r2,45
   44258:	dc812d15 	stw	r18,1204(sp)
   4425c:	003a0006 	br	42a60 <__alt_data_end+0xfffc2a60>
   44260:	d8c12617 	ldw	r3,1176(sp)
   44264:	00bfff44 	movi	r2,-3
   44268:	18800a16 	blt	r3,r2,44294 <___vfprintf_internal_r+0x1e44>
   4426c:	48c00916 	blt	r9,r3,44294 <___vfprintf_internal_r+0x1e44>
   44270:	d8c13415 	stw	r3,1232(sp)
   44274:	040019c4 	movi	r16,103
   44278:	003e7606 	br	43c54 <__alt_data_end+0xfffc3c54>
   4427c:	01000174 	movhi	r4,5
   44280:	21070284 	addi	r4,r4,7178
   44284:	d9012c15 	stw	r4,1200(sp)
   44288:	003c8e06 	br	434c4 <__alt_data_end+0xfffc34c4>
   4428c:	5005883a 	mov	r2,r10
   44290:	003e6506 	br	43c28 <__alt_data_end+0xfffc3c28>
   44294:	843fff84 	addi	r16,r16,-2
   44298:	1d7fffc4 	addi	r21,r3,-1
   4429c:	dd412615 	stw	r21,1176(sp)
   442a0:	dc0122c5 	stb	r16,1163(sp)
   442a4:	a8009216 	blt	r21,zero,444f0 <___vfprintf_internal_r+0x20a0>
   442a8:	00800ac4 	movi	r2,43
   442ac:	d8812305 	stb	r2,1164(sp)
   442b0:	00800244 	movi	r2,9
   442b4:	1540660e 	bge	r2,r21,44450 <___vfprintf_internal_r+0x2000>
   442b8:	dcc122c4 	addi	r19,sp,1163
   442bc:	dc012c15 	stw	r16,1200(sp)
   442c0:	4023883a 	mov	r17,r8
   442c4:	9821883a 	mov	r16,r19
   442c8:	a809883a 	mov	r4,r21
   442cc:	01400284 	movi	r5,10
   442d0:	004c3580 	call	4c358 <__modsi3>
   442d4:	10800c04 	addi	r2,r2,48
   442d8:	843fffc4 	addi	r16,r16,-1
   442dc:	a809883a 	mov	r4,r21
   442e0:	01400284 	movi	r5,10
   442e4:	80800005 	stb	r2,0(r16)
   442e8:	004c3040 	call	4c304 <__divsi3>
   442ec:	01000244 	movi	r4,9
   442f0:	102b883a 	mov	r21,r2
   442f4:	20bff416 	blt	r4,r2,442c8 <__alt_data_end+0xfffc42c8>
   442f8:	8811883a 	mov	r8,r17
   442fc:	10800c04 	addi	r2,r2,48
   44300:	8023883a 	mov	r17,r16
   44304:	897fffc4 	addi	r5,r17,-1
   44308:	88bfffc5 	stb	r2,-1(r17)
   4430c:	dc012c17 	ldw	r16,1200(sp)
   44310:	2cc08a2e 	bgeu	r5,r19,4453c <___vfprintf_internal_r+0x20ec>
   44314:	d9812384 	addi	r6,sp,1166
   44318:	344dc83a 	sub	r6,r6,r17
   4431c:	d9012344 	addi	r4,sp,1165
   44320:	998d883a 	add	r6,r19,r6
   44324:	00000106 	br	4432c <___vfprintf_internal_r+0x1edc>
   44328:	28800003 	ldbu	r2,0(r5)
   4432c:	20800005 	stb	r2,0(r4)
   44330:	21000044 	addi	r4,r4,1
   44334:	29400044 	addi	r5,r5,1
   44338:	21bffb1e 	bne	r4,r6,44328 <__alt_data_end+0xfffc4328>
   4433c:	d8812304 	addi	r2,sp,1164
   44340:	1445c83a 	sub	r2,r2,r17
   44344:	d9412344 	addi	r5,sp,1165
   44348:	2885883a 	add	r2,r5,r2
   4434c:	14e7c83a 	sub	r19,r2,r19
   44350:	d8813317 	ldw	r2,1228(sp)
   44354:	d8c13317 	ldw	r3,1228(sp)
   44358:	dcc13a15 	stw	r19,1256(sp)
   4435c:	14e3883a 	add	r17,r2,r19
   44360:	00800044 	movi	r2,1
   44364:	10c0550e 	bge	r2,r3,444bc <___vfprintf_internal_r+0x206c>
   44368:	8c400044 	addi	r17,r17,1
   4436c:	8839883a 	mov	fp,r17
   44370:	88005016 	blt	r17,zero,444b4 <___vfprintf_internal_r+0x2064>
   44374:	d8013415 	stw	zero,1232(sp)
   44378:	003e3f06 	br	43c78 <__alt_data_end+0xfffc3c78>
   4437c:	da412b15 	stw	r9,1196(sp)
   44380:	dcc12783 	ldbu	r19,1182(sp)
   44384:	4823883a 	mov	r17,r9
   44388:	dc812d15 	stw	r18,1204(sp)
   4438c:	d8013215 	stw	zero,1224(sp)
   44390:	d8013415 	stw	zero,1232(sp)
   44394:	0039ae06 	br	42a50 <__alt_data_end+0xfffc2a50>
   44398:	483de91e 	bne	r9,zero,43b40 <__alt_data_end+0xfffc3b40>
   4439c:	8813883a 	mov	r9,r17
   443a0:	003de706 	br	43b40 <__alt_data_end+0xfffc3b40>
   443a4:	b809883a 	mov	r4,r23
   443a8:	b00b883a 	mov	r5,r22
   443ac:	d9811e04 	addi	r6,sp,1144
   443b0:	00498900 	call	49890 <__sprint_r>
   443b4:	10393e1e 	bne	r2,zero,428b0 <__alt_data_end+0xfffc28b0>
   443b8:	dc012617 	ldw	r16,1176(sp)
   443bc:	d8c12017 	ldw	r3,1152(sp)
   443c0:	d8811f17 	ldw	r2,1148(sp)
   443c4:	da000404 	addi	r8,sp,16
   443c8:	003ea006 	br	43e4c <__alt_data_end+0xfffc3e4c>
   443cc:	00c00b44 	movi	r3,45
   443d0:	2460003c 	xorhi	r17,r4,32768
   443d4:	d8c12b05 	stb	r3,1196(sp)
   443d8:	003ddf06 	br	43b58 <__alt_data_end+0xfffc3b58>
   443dc:	02400184 	movi	r9,6
   443e0:	003dd706 	br	43b40 <__alt_data_end+0xfffc3b40>
   443e4:	4d400044 	addi	r21,r9,1
   443e8:	003de206 	br	43b74 <__alt_data_end+0xfffc3b74>
   443ec:	d8c13417 	ldw	r3,1232(sp)
   443f0:	00c0490e 	bge	zero,r3,44518 <___vfprintf_internal_r+0x20c8>
   443f4:	04400044 	movi	r17,1
   443f8:	d9013317 	ldw	r4,1228(sp)
   443fc:	8923883a 	add	r17,r17,r4
   44400:	8839883a 	mov	fp,r17
   44404:	883e1c0e 	bge	r17,zero,43c78 <__alt_data_end+0xfffc3c78>
   44408:	0039883a 	mov	fp,zero
   4440c:	003e1a06 	br	43c78 <__alt_data_end+0xfffc3c78>
   44410:	00c03b0e 	bge	zero,r3,44500 <___vfprintf_internal_r+0x20b0>
   44414:	4800021e 	bne	r9,zero,44420 <___vfprintf_internal_r+0x1fd0>
   44418:	e080004c 	andi	r2,fp,1
   4441c:	10000626 	beq	r2,zero,44438 <___vfprintf_internal_r+0x1fe8>
   44420:	d8c13417 	ldw	r3,1232(sp)
   44424:	4a400044 	addi	r9,r9,1
   44428:	1a63883a 	add	r17,r3,r9
   4442c:	8839883a 	mov	fp,r17
   44430:	883e110e 	bge	r17,zero,43c78 <__alt_data_end+0xfffc3c78>
   44434:	003ff406 	br	44408 <__alt_data_end+0xfffc4408>
   44438:	1839883a 	mov	fp,r3
   4443c:	18004116 	blt	r3,zero,44544 <___vfprintf_internal_r+0x20f4>
   44440:	dc413417 	ldw	r17,1232(sp)
   44444:	003e0c06 	br	43c78 <__alt_data_end+0xfffc3c78>
   44448:	d8812117 	ldw	r2,1156(sp)
   4444c:	003df606 	br	43c28 <__alt_data_end+0xfffc3c28>
   44450:	00800c04 	movi	r2,48
   44454:	a8c00c04 	addi	r3,r21,48
   44458:	d8812345 	stb	r2,1165(sp)
   4445c:	d8c12385 	stb	r3,1166(sp)
   44460:	d88123c4 	addi	r2,sp,1167
   44464:	dcc122c4 	addi	r19,sp,1163
   44468:	003fb806 	br	4434c <__alt_data_end+0xfffc434c>
   4446c:	d9013717 	ldw	r4,1244(sp)
   44470:	880b883a 	mov	r5,r17
   44474:	000d883a 	mov	r6,zero
   44478:	000f883a 	mov	r7,zero
   4447c:	da013f15 	stw	r8,1276(sp)
   44480:	da413e15 	stw	r9,1272(sp)
   44484:	da813d15 	stw	r10,1268(sp)
   44488:	004d6080 	call	4d608 <__eqdf2>
   4448c:	da013f17 	ldw	r8,1276(sp)
   44490:	da413e17 	ldw	r9,1272(sp)
   44494:	da813d17 	ldw	r10,1268(sp)
   44498:	103f1726 	beq	r2,zero,440f8 <__alt_data_end+0xfffc40f8>
   4449c:	00800044 	movi	r2,1
   444a0:	1547c83a 	sub	r3,r2,r21
   444a4:	d8c12615 	stw	r3,1176(sp)
   444a8:	003f1406 	br	440fc <__alt_data_end+0xfffc40fc>
   444ac:	0005883a 	mov	r2,zero
   444b0:	003f4c06 	br	441e4 <__alt_data_end+0xfffc41e4>
   444b4:	0039883a 	mov	fp,zero
   444b8:	003fae06 	br	44374 <__alt_data_end+0xfffc4374>
   444bc:	e084703a 	and	r2,fp,r2
   444c0:	103faa26 	beq	r2,zero,4436c <__alt_data_end+0xfffc436c>
   444c4:	003fa806 	br	44368 <__alt_data_end+0xfffc4368>
   444c8:	d9412d17 	ldw	r5,1204(sp)
   444cc:	2a400017 	ldw	r9,0(r5)
   444d0:	28c00104 	addi	r3,r5,4
   444d4:	d8c12d15 	stw	r3,1204(sp)
   444d8:	483ebc0e 	bge	r9,zero,43fcc <__alt_data_end+0xfffc3fcc>
   444dc:	027fffc4 	movi	r9,-1
   444e0:	e4000047 	ldb	r16,1(fp)
   444e4:	00384206 	br	425f0 <__alt_data_end+0xfffc25f0>
   444e8:	043fffc4 	movi	r16,-1
   444ec:	0038ce06 	br	42828 <__alt_data_end+0xfffc2828>
   444f0:	00800b44 	movi	r2,45
   444f4:	056bc83a 	sub	r21,zero,r21
   444f8:	d8812305 	stb	r2,1164(sp)
   444fc:	003f6c06 	br	442b0 <__alt_data_end+0xfffc42b0>
   44500:	4800081e 	bne	r9,zero,44524 <___vfprintf_internal_r+0x20d4>
   44504:	e080004c 	andi	r2,fp,1
   44508:	1000061e 	bne	r2,zero,44524 <___vfprintf_internal_r+0x20d4>
   4450c:	07000044 	movi	fp,1
   44510:	e023883a 	mov	r17,fp
   44514:	003dd806 	br	43c78 <__alt_data_end+0xfffc3c78>
   44518:	04400084 	movi	r17,2
   4451c:	88e3c83a 	sub	r17,r17,r3
   44520:	003fb506 	br	443f8 <__alt_data_end+0xfffc43f8>
   44524:	4c400084 	addi	r17,r9,2
   44528:	8839883a 	mov	fp,r17
   4452c:	883dd20e 	bge	r17,zero,43c78 <__alt_data_end+0xfffc3c78>
   44530:	003fb506 	br	44408 <__alt_data_end+0xfffc4408>
   44534:	d8c12617 	ldw	r3,1176(sp)
   44538:	003f5706 	br	44298 <__alt_data_end+0xfffc4298>
   4453c:	d8812344 	addi	r2,sp,1165
   44540:	003f8206 	br	4434c <__alt_data_end+0xfffc434c>
   44544:	0039883a 	mov	fp,zero
   44548:	003fbd06 	br	44440 <__alt_data_end+0xfffc4440>

0004454c <__vfprintf_internal>:
   4454c:	2007883a 	mov	r3,r4
   44550:	01000174 	movhi	r4,5
   44554:	210e5d04 	addi	r4,r4,14708
   44558:	21000017 	ldw	r4,0(r4)
   4455c:	2805883a 	mov	r2,r5
   44560:	300f883a 	mov	r7,r6
   44564:	180b883a 	mov	r5,r3
   44568:	100d883a 	mov	r6,r2
   4456c:	00424501 	jmpi	42450 <___vfprintf_internal_r>

00044570 <__swsetup_r>:
   44570:	00800174 	movhi	r2,5
   44574:	defffd04 	addi	sp,sp,-12
   44578:	108e5d04 	addi	r2,r2,14708
   4457c:	dc400115 	stw	r17,4(sp)
   44580:	2023883a 	mov	r17,r4
   44584:	11000017 	ldw	r4,0(r2)
   44588:	dc000015 	stw	r16,0(sp)
   4458c:	dfc00215 	stw	ra,8(sp)
   44590:	2821883a 	mov	r16,r5
   44594:	20000226 	beq	r4,zero,445a0 <__swsetup_r+0x30>
   44598:	20c00e17 	ldw	r3,56(r4)
   4459c:	18002e26 	beq	r3,zero,44658 <__swsetup_r+0xe8>
   445a0:	8080030b 	ldhu	r2,12(r16)
   445a4:	10c0020c 	andi	r3,r2,8
   445a8:	100d883a 	mov	r6,r2
   445ac:	18000f26 	beq	r3,zero,445ec <__swsetup_r+0x7c>
   445b0:	80c00417 	ldw	r3,16(r16)
   445b4:	18001526 	beq	r3,zero,4460c <__swsetup_r+0x9c>
   445b8:	1100004c 	andi	r4,r2,1
   445bc:	20001c1e 	bne	r4,zero,44630 <__swsetup_r+0xc0>
   445c0:	1080008c 	andi	r2,r2,2
   445c4:	1000261e 	bne	r2,zero,44660 <__swsetup_r+0xf0>
   445c8:	80800517 	ldw	r2,20(r16)
   445cc:	80800215 	stw	r2,8(r16)
   445d0:	18001c26 	beq	r3,zero,44644 <__swsetup_r+0xd4>
   445d4:	0005883a 	mov	r2,zero
   445d8:	dfc00217 	ldw	ra,8(sp)
   445dc:	dc400117 	ldw	r17,4(sp)
   445e0:	dc000017 	ldw	r16,0(sp)
   445e4:	dec00304 	addi	sp,sp,12
   445e8:	f800283a 	ret
   445ec:	3080040c 	andi	r2,r6,16
   445f0:	10001726 	beq	r2,zero,44650 <__swsetup_r+0xe0>
   445f4:	3080010c 	andi	r2,r6,4
   445f8:	10001b1e 	bne	r2,zero,44668 <__swsetup_r+0xf8>
   445fc:	80c00417 	ldw	r3,16(r16)
   44600:	30800214 	ori	r2,r6,8
   44604:	8080030d 	sth	r2,12(r16)
   44608:	183feb1e 	bne	r3,zero,445b8 <__alt_data_end+0xfffc45b8>
   4460c:	1140a00c 	andi	r5,r2,640
   44610:	01008004 	movi	r4,512
   44614:	293fe826 	beq	r5,r4,445b8 <__alt_data_end+0xfffc45b8>
   44618:	8809883a 	mov	r4,r17
   4461c:	800b883a 	mov	r5,r16
   44620:	00471040 	call	47104 <__smakebuf_r>
   44624:	8080030b 	ldhu	r2,12(r16)
   44628:	80c00417 	ldw	r3,16(r16)
   4462c:	003fe206 	br	445b8 <__alt_data_end+0xfffc45b8>
   44630:	80800517 	ldw	r2,20(r16)
   44634:	80000215 	stw	zero,8(r16)
   44638:	0085c83a 	sub	r2,zero,r2
   4463c:	80800615 	stw	r2,24(r16)
   44640:	183fe41e 	bne	r3,zero,445d4 <__alt_data_end+0xfffc45d4>
   44644:	8080030b 	ldhu	r2,12(r16)
   44648:	1080200c 	andi	r2,r2,128
   4464c:	103fe226 	beq	r2,zero,445d8 <__alt_data_end+0xfffc45d8>
   44650:	00bfffc4 	movi	r2,-1
   44654:	003fe006 	br	445d8 <__alt_data_end+0xfffc45d8>
   44658:	00465ac0 	call	465ac <__sinit>
   4465c:	003fd006 	br	445a0 <__alt_data_end+0xfffc45a0>
   44660:	0005883a 	mov	r2,zero
   44664:	003fd906 	br	445cc <__alt_data_end+0xfffc45cc>
   44668:	81400c17 	ldw	r5,48(r16)
   4466c:	28000626 	beq	r5,zero,44688 <__swsetup_r+0x118>
   44670:	80801004 	addi	r2,r16,64
   44674:	28800326 	beq	r5,r2,44684 <__swsetup_r+0x114>
   44678:	8809883a 	mov	r4,r17
   4467c:	00467200 	call	46720 <_free_r>
   44680:	8180030b 	ldhu	r6,12(r16)
   44684:	80000c15 	stw	zero,48(r16)
   44688:	80c00417 	ldw	r3,16(r16)
   4468c:	00bff6c4 	movi	r2,-37
   44690:	118c703a 	and	r6,r2,r6
   44694:	80000115 	stw	zero,4(r16)
   44698:	80c00015 	stw	r3,0(r16)
   4469c:	003fd806 	br	44600 <__alt_data_end+0xfffc4600>

000446a0 <quorem>:
   446a0:	defff204 	addi	sp,sp,-56
   446a4:	ddc00b15 	stw	r23,44(sp)
   446a8:	20800417 	ldw	r2,16(r4)
   446ac:	2dc00417 	ldw	r23,16(r5)
   446b0:	dfc00d15 	stw	ra,52(sp)
   446b4:	df000c15 	stw	fp,48(sp)
   446b8:	dd800a15 	stw	r22,40(sp)
   446bc:	dd400915 	stw	r21,36(sp)
   446c0:	dd000815 	stw	r20,32(sp)
   446c4:	dcc00715 	stw	r19,28(sp)
   446c8:	dc800615 	stw	r18,24(sp)
   446cc:	dc400515 	stw	r17,20(sp)
   446d0:	dc000415 	stw	r16,16(sp)
   446d4:	15c07a16 	blt	r2,r23,448c0 <quorem+0x220>
   446d8:	bdffffc4 	addi	r23,r23,-1
   446dc:	bde9883a 	add	r20,r23,r23
   446e0:	28c00504 	addi	r3,r5,20
   446e4:	a529883a 	add	r20,r20,r20
   446e8:	1d39883a 	add	fp,r3,r20
   446ec:	24c00504 	addi	r19,r4,20
   446f0:	d9400215 	stw	r5,8(sp)
   446f4:	9d29883a 	add	r20,r19,r20
   446f8:	e1400017 	ldw	r5,0(fp)
   446fc:	d9000015 	stw	r4,0(sp)
   44700:	a1000017 	ldw	r4,0(r20)
   44704:	29400044 	addi	r5,r5,1
   44708:	d8c00115 	stw	r3,4(sp)
   4470c:	dd000315 	stw	r20,12(sp)
   44710:	004c3b40 	call	4c3b4 <__udivsi3>
   44714:	1025883a 	mov	r18,r2
   44718:	10003026 	beq	r2,zero,447dc <quorem+0x13c>
   4471c:	dc400117 	ldw	r17,4(sp)
   44720:	9829883a 	mov	r20,r19
   44724:	002d883a 	mov	r22,zero
   44728:	0021883a 	mov	r16,zero
   4472c:	8d400017 	ldw	r21,0(r17)
   44730:	900b883a 	mov	r5,r18
   44734:	8c400104 	addi	r17,r17,4
   44738:	a93fffcc 	andi	r4,r21,65535
   4473c:	004c3c40 	call	4c3c4 <__mulsi3>
   44740:	a808d43a 	srli	r4,r21,16
   44744:	900b883a 	mov	r5,r18
   44748:	b0ad883a 	add	r22,r22,r2
   4474c:	004c3c40 	call	4c3c4 <__mulsi3>
   44750:	a1000017 	ldw	r4,0(r20)
   44754:	b00cd43a 	srli	r6,r22,16
   44758:	b0ffffcc 	andi	r3,r22,65535
   4475c:	217fffcc 	andi	r5,r4,65535
   44760:	2c21883a 	add	r16,r5,r16
   44764:	80c7c83a 	sub	r3,r16,r3
   44768:	2008d43a 	srli	r4,r4,16
   4476c:	3085883a 	add	r2,r6,r2
   44770:	1821d43a 	srai	r16,r3,16
   44774:	117fffcc 	andi	r5,r2,65535
   44778:	2149c83a 	sub	r4,r4,r5
   4477c:	2421883a 	add	r16,r4,r16
   44780:	8008943a 	slli	r4,r16,16
   44784:	18ffffcc 	andi	r3,r3,65535
   44788:	102cd43a 	srli	r22,r2,16
   4478c:	20c8b03a 	or	r4,r4,r3
   44790:	a1000015 	stw	r4,0(r20)
   44794:	8021d43a 	srai	r16,r16,16
   44798:	a5000104 	addi	r20,r20,4
   4479c:	e47fe32e 	bgeu	fp,r17,4472c <__alt_data_end+0xfffc472c>
   447a0:	d8c00317 	ldw	r3,12(sp)
   447a4:	18800017 	ldw	r2,0(r3)
   447a8:	10000c1e 	bne	r2,zero,447dc <quorem+0x13c>
   447ac:	18bfff04 	addi	r2,r3,-4
   447b0:	9880082e 	bgeu	r19,r2,447d4 <quorem+0x134>
   447b4:	18ffff17 	ldw	r3,-4(r3)
   447b8:	18000326 	beq	r3,zero,447c8 <quorem+0x128>
   447bc:	00000506 	br	447d4 <quorem+0x134>
   447c0:	10c00017 	ldw	r3,0(r2)
   447c4:	1800031e 	bne	r3,zero,447d4 <quorem+0x134>
   447c8:	10bfff04 	addi	r2,r2,-4
   447cc:	bdffffc4 	addi	r23,r23,-1
   447d0:	98bffb36 	bltu	r19,r2,447c0 <__alt_data_end+0xfffc47c0>
   447d4:	d8c00017 	ldw	r3,0(sp)
   447d8:	1dc00415 	stw	r23,16(r3)
   447dc:	d9000017 	ldw	r4,0(sp)
   447e0:	d9400217 	ldw	r5,8(sp)
   447e4:	00488800 	call	48880 <__mcmp>
   447e8:	10002816 	blt	r2,zero,4488c <quorem+0x1ec>
   447ec:	dc400117 	ldw	r17,4(sp)
   447f0:	94800044 	addi	r18,r18,1
   447f4:	980d883a 	mov	r6,r19
   447f8:	0007883a 	mov	r3,zero
   447fc:	31000017 	ldw	r4,0(r6)
   44800:	89400017 	ldw	r5,0(r17)
   44804:	31800104 	addi	r6,r6,4
   44808:	20bfffcc 	andi	r2,r4,65535
   4480c:	10c7883a 	add	r3,r2,r3
   44810:	28bfffcc 	andi	r2,r5,65535
   44814:	1885c83a 	sub	r2,r3,r2
   44818:	280ad43a 	srli	r5,r5,16
   4481c:	2008d43a 	srli	r4,r4,16
   44820:	1007d43a 	srai	r3,r2,16
   44824:	10bfffcc 	andi	r2,r2,65535
   44828:	2149c83a 	sub	r4,r4,r5
   4482c:	20c9883a 	add	r4,r4,r3
   44830:	200a943a 	slli	r5,r4,16
   44834:	8c400104 	addi	r17,r17,4
   44838:	2007d43a 	srai	r3,r4,16
   4483c:	2884b03a 	or	r2,r5,r2
   44840:	30bfff15 	stw	r2,-4(r6)
   44844:	e47fed2e 	bgeu	fp,r17,447fc <__alt_data_end+0xfffc47fc>
   44848:	bdc5883a 	add	r2,r23,r23
   4484c:	1085883a 	add	r2,r2,r2
   44850:	9887883a 	add	r3,r19,r2
   44854:	18800017 	ldw	r2,0(r3)
   44858:	10000c1e 	bne	r2,zero,4488c <quorem+0x1ec>
   4485c:	18bfff04 	addi	r2,r3,-4
   44860:	9880082e 	bgeu	r19,r2,44884 <quorem+0x1e4>
   44864:	18ffff17 	ldw	r3,-4(r3)
   44868:	18000326 	beq	r3,zero,44878 <quorem+0x1d8>
   4486c:	00000506 	br	44884 <quorem+0x1e4>
   44870:	10c00017 	ldw	r3,0(r2)
   44874:	1800031e 	bne	r3,zero,44884 <quorem+0x1e4>
   44878:	10bfff04 	addi	r2,r2,-4
   4487c:	bdffffc4 	addi	r23,r23,-1
   44880:	98bffb36 	bltu	r19,r2,44870 <__alt_data_end+0xfffc4870>
   44884:	d8c00017 	ldw	r3,0(sp)
   44888:	1dc00415 	stw	r23,16(r3)
   4488c:	9005883a 	mov	r2,r18
   44890:	dfc00d17 	ldw	ra,52(sp)
   44894:	df000c17 	ldw	fp,48(sp)
   44898:	ddc00b17 	ldw	r23,44(sp)
   4489c:	dd800a17 	ldw	r22,40(sp)
   448a0:	dd400917 	ldw	r21,36(sp)
   448a4:	dd000817 	ldw	r20,32(sp)
   448a8:	dcc00717 	ldw	r19,28(sp)
   448ac:	dc800617 	ldw	r18,24(sp)
   448b0:	dc400517 	ldw	r17,20(sp)
   448b4:	dc000417 	ldw	r16,16(sp)
   448b8:	dec00e04 	addi	sp,sp,56
   448bc:	f800283a 	ret
   448c0:	0005883a 	mov	r2,zero
   448c4:	003ff206 	br	44890 <__alt_data_end+0xfffc4890>

000448c8 <_dtoa_r>:
   448c8:	20801017 	ldw	r2,64(r4)
   448cc:	deffde04 	addi	sp,sp,-136
   448d0:	dd401d15 	stw	r21,116(sp)
   448d4:	dcc01b15 	stw	r19,108(sp)
   448d8:	dc801a15 	stw	r18,104(sp)
   448dc:	dc401915 	stw	r17,100(sp)
   448e0:	dc001815 	stw	r16,96(sp)
   448e4:	dfc02115 	stw	ra,132(sp)
   448e8:	df002015 	stw	fp,128(sp)
   448ec:	ddc01f15 	stw	r23,124(sp)
   448f0:	dd801e15 	stw	r22,120(sp)
   448f4:	dd001c15 	stw	r20,112(sp)
   448f8:	d9c00315 	stw	r7,12(sp)
   448fc:	2021883a 	mov	r16,r4
   44900:	302b883a 	mov	r21,r6
   44904:	2825883a 	mov	r18,r5
   44908:	dc402417 	ldw	r17,144(sp)
   4490c:	3027883a 	mov	r19,r6
   44910:	10000826 	beq	r2,zero,44934 <_dtoa_r+0x6c>
   44914:	21801117 	ldw	r6,68(r4)
   44918:	00c00044 	movi	r3,1
   4491c:	100b883a 	mov	r5,r2
   44920:	1986983a 	sll	r3,r3,r6
   44924:	11800115 	stw	r6,4(r2)
   44928:	10c00215 	stw	r3,8(r2)
   4492c:	0047fac0 	call	47fac <_Bfree>
   44930:	80001015 	stw	zero,64(r16)
   44934:	a8002d16 	blt	r21,zero,449ec <_dtoa_r+0x124>
   44938:	88000015 	stw	zero,0(r17)
   4493c:	a8dffc2c 	andhi	r3,r21,32752
   44940:	009ffc34 	movhi	r2,32752
   44944:	18801b26 	beq	r3,r2,449b4 <_dtoa_r+0xec>
   44948:	9009883a 	mov	r4,r18
   4494c:	980b883a 	mov	r5,r19
   44950:	000d883a 	mov	r6,zero
   44954:	000f883a 	mov	r7,zero
   44958:	004d6080 	call	4d608 <__eqdf2>
   4495c:	10002a1e 	bne	r2,zero,44a08 <_dtoa_r+0x140>
   44960:	d8c02317 	ldw	r3,140(sp)
   44964:	d9002517 	ldw	r4,148(sp)
   44968:	00800044 	movi	r2,1
   4496c:	18800015 	stw	r2,0(r3)
   44970:	2001a226 	beq	r4,zero,44ffc <_dtoa_r+0x734>
   44974:	00800174 	movhi	r2,5
   44978:	10870244 	addi	r2,r2,7177
   4497c:	20800015 	stw	r2,0(r4)
   44980:	10bfffc4 	addi	r2,r2,-1
   44984:	dfc02117 	ldw	ra,132(sp)
   44988:	df002017 	ldw	fp,128(sp)
   4498c:	ddc01f17 	ldw	r23,124(sp)
   44990:	dd801e17 	ldw	r22,120(sp)
   44994:	dd401d17 	ldw	r21,116(sp)
   44998:	dd001c17 	ldw	r20,112(sp)
   4499c:	dcc01b17 	ldw	r19,108(sp)
   449a0:	dc801a17 	ldw	r18,104(sp)
   449a4:	dc401917 	ldw	r17,100(sp)
   449a8:	dc001817 	ldw	r16,96(sp)
   449ac:	dec02204 	addi	sp,sp,136
   449b0:	f800283a 	ret
   449b4:	d8c02317 	ldw	r3,140(sp)
   449b8:	0089c3c4 	movi	r2,9999
   449bc:	18800015 	stw	r2,0(r3)
   449c0:	90017c26 	beq	r18,zero,44fb4 <_dtoa_r+0x6ec>
   449c4:	00800174 	movhi	r2,5
   449c8:	10870e04 	addi	r2,r2,7224
   449cc:	d9002517 	ldw	r4,148(sp)
   449d0:	203fec26 	beq	r4,zero,44984 <__alt_data_end+0xfffc4984>
   449d4:	10c000c7 	ldb	r3,3(r2)
   449d8:	18017d1e 	bne	r3,zero,44fd0 <_dtoa_r+0x708>
   449dc:	10c000c4 	addi	r3,r2,3
   449e0:	d9802517 	ldw	r6,148(sp)
   449e4:	30c00015 	stw	r3,0(r6)
   449e8:	003fe606 	br	44984 <__alt_data_end+0xfffc4984>
   449ec:	04e00034 	movhi	r19,32768
   449f0:	9cffffc4 	addi	r19,r19,-1
   449f4:	00800044 	movi	r2,1
   449f8:	ace6703a 	and	r19,r21,r19
   449fc:	88800015 	stw	r2,0(r17)
   44a00:	982b883a 	mov	r21,r19
   44a04:	003fcd06 	br	4493c <__alt_data_end+0xfffc493c>
   44a08:	d8800204 	addi	r2,sp,8
   44a0c:	a822d53a 	srli	r17,r21,20
   44a10:	d8800015 	stw	r2,0(sp)
   44a14:	8009883a 	mov	r4,r16
   44a18:	900b883a 	mov	r5,r18
   44a1c:	980d883a 	mov	r6,r19
   44a20:	d9c00104 	addi	r7,sp,4
   44a24:	0048bf40 	call	48bf4 <__d2b>
   44a28:	1039883a 	mov	fp,r2
   44a2c:	88016a1e 	bne	r17,zero,44fd8 <_dtoa_r+0x710>
   44a30:	dd000217 	ldw	r20,8(sp)
   44a34:	dc400117 	ldw	r17,4(sp)
   44a38:	00befbc4 	movi	r2,-1041
   44a3c:	a463883a 	add	r17,r20,r17
   44a40:	8882ea16 	blt	r17,r2,455ec <_dtoa_r+0xd24>
   44a44:	00bf0384 	movi	r2,-1010
   44a48:	1445c83a 	sub	r2,r2,r17
   44a4c:	89010484 	addi	r4,r17,1042
   44a50:	a8aa983a 	sll	r21,r21,r2
   44a54:	9108d83a 	srl	r4,r18,r4
   44a58:	a908b03a 	or	r4,r21,r4
   44a5c:	004eae00 	call	4eae0 <__floatunsidf>
   44a60:	017f8434 	movhi	r5,65040
   44a64:	01800044 	movi	r6,1
   44a68:	1009883a 	mov	r4,r2
   44a6c:	194b883a 	add	r5,r3,r5
   44a70:	8c7fffc4 	addi	r17,r17,-1
   44a74:	d9800f15 	stw	r6,60(sp)
   44a78:	000d883a 	mov	r6,zero
   44a7c:	01cffe34 	movhi	r7,16376
   44a80:	004e0b80 	call	4e0b8 <__subdf3>
   44a84:	0198dbf4 	movhi	r6,25455
   44a88:	01cff4f4 	movhi	r7,16339
   44a8c:	1009883a 	mov	r4,r2
   44a90:	180b883a 	mov	r5,r3
   44a94:	3190d844 	addi	r6,r6,17249
   44a98:	39e1e9c4 	addi	r7,r7,-30809
   44a9c:	004d84c0 	call	4d84c <__muldf3>
   44aa0:	01a2d874 	movhi	r6,35681
   44aa4:	01cff1f4 	movhi	r7,16327
   44aa8:	180b883a 	mov	r5,r3
   44aac:	31b22cc4 	addi	r6,r6,-14157
   44ab0:	39e28a04 	addi	r7,r7,-30168
   44ab4:	1009883a 	mov	r4,r2
   44ab8:	004c3ec0 	call	4c3ec <__adddf3>
   44abc:	8809883a 	mov	r4,r17
   44ac0:	102d883a 	mov	r22,r2
   44ac4:	182b883a 	mov	r21,r3
   44ac8:	004ea100 	call	4ea10 <__floatsidf>
   44acc:	019427f4 	movhi	r6,20639
   44ad0:	01cff4f4 	movhi	r7,16339
   44ad4:	1009883a 	mov	r4,r2
   44ad8:	180b883a 	mov	r5,r3
   44adc:	319e7ec4 	addi	r6,r6,31227
   44ae0:	39d104c4 	addi	r7,r7,17427
   44ae4:	004d84c0 	call	4d84c <__muldf3>
   44ae8:	b009883a 	mov	r4,r22
   44aec:	a80b883a 	mov	r5,r21
   44af0:	100d883a 	mov	r6,r2
   44af4:	180f883a 	mov	r7,r3
   44af8:	004c3ec0 	call	4c3ec <__adddf3>
   44afc:	1009883a 	mov	r4,r2
   44b00:	180b883a 	mov	r5,r3
   44b04:	102d883a 	mov	r22,r2
   44b08:	182b883a 	mov	r21,r3
   44b0c:	004e9880 	call	4e988 <__fixdfsi>
   44b10:	b009883a 	mov	r4,r22
   44b14:	a80b883a 	mov	r5,r21
   44b18:	000d883a 	mov	r6,zero
   44b1c:	000f883a 	mov	r7,zero
   44b20:	d8800515 	stw	r2,20(sp)
   44b24:	004d76c0 	call	4d76c <__ledf2>
   44b28:	10023116 	blt	r2,zero,453f0 <_dtoa_r+0xb28>
   44b2c:	d8c00517 	ldw	r3,20(sp)
   44b30:	00800584 	movi	r2,22
   44b34:	10c21f36 	bltu	r2,r3,453b4 <_dtoa_r+0xaec>
   44b38:	180490fa 	slli	r2,r3,3
   44b3c:	00c00174 	movhi	r3,5
   44b40:	18c72a04 	addi	r3,r3,7336
   44b44:	1885883a 	add	r2,r3,r2
   44b48:	11000017 	ldw	r4,0(r2)
   44b4c:	11400117 	ldw	r5,4(r2)
   44b50:	900d883a 	mov	r6,r18
   44b54:	980f883a 	mov	r7,r19
   44b58:	004d68c0 	call	4d68c <__gedf2>
   44b5c:	0082a70e 	bge	zero,r2,455fc <_dtoa_r+0xd34>
   44b60:	d9000517 	ldw	r4,20(sp)
   44b64:	d8000c15 	stw	zero,48(sp)
   44b68:	213fffc4 	addi	r4,r4,-1
   44b6c:	d9000515 	stw	r4,20(sp)
   44b70:	a463c83a 	sub	r17,r20,r17
   44b74:	8dbfffc4 	addi	r22,r17,-1
   44b78:	b0021916 	blt	r22,zero,453e0 <_dtoa_r+0xb18>
   44b7c:	d8000815 	stw	zero,32(sp)
   44b80:	d8800517 	ldw	r2,20(sp)
   44b84:	10020e16 	blt	r2,zero,453c0 <_dtoa_r+0xaf8>
   44b88:	b0ad883a 	add	r22,r22,r2
   44b8c:	d8800a15 	stw	r2,40(sp)
   44b90:	d8000915 	stw	zero,36(sp)
   44b94:	d8c00317 	ldw	r3,12(sp)
   44b98:	00800244 	movi	r2,9
   44b9c:	10c11a36 	bltu	r2,r3,45008 <_dtoa_r+0x740>
   44ba0:	00800144 	movi	r2,5
   44ba4:	10c4fc0e 	bge	r2,r3,45f98 <_dtoa_r+0x16d0>
   44ba8:	18ffff04 	addi	r3,r3,-4
   44bac:	d8c00315 	stw	r3,12(sp)
   44bb0:	0029883a 	mov	r20,zero
   44bb4:	d9800317 	ldw	r6,12(sp)
   44bb8:	008000c4 	movi	r2,3
   44bbc:	3083bd26 	beq	r6,r2,45ab4 <_dtoa_r+0x11ec>
   44bc0:	1183670e 	bge	r2,r6,45960 <_dtoa_r+0x1098>
   44bc4:	d8c00317 	ldw	r3,12(sp)
   44bc8:	00800104 	movi	r2,4
   44bcc:	1882e726 	beq	r3,r2,4576c <_dtoa_r+0xea4>
   44bd0:	00800144 	movi	r2,5
   44bd4:	1884f21e 	bne	r3,r2,45fa0 <_dtoa_r+0x16d8>
   44bd8:	00800044 	movi	r2,1
   44bdc:	d8800b15 	stw	r2,44(sp)
   44be0:	d8c02217 	ldw	r3,136(sp)
   44be4:	d9000517 	ldw	r4,20(sp)
   44be8:	1907883a 	add	r3,r3,r4
   44bec:	19800044 	addi	r6,r3,1
   44bf0:	d8c00d15 	stw	r3,52(sp)
   44bf4:	d9800615 	stw	r6,24(sp)
   44bf8:	0183c30e 	bge	zero,r6,45b08 <_dtoa_r+0x1240>
   44bfc:	d9800617 	ldw	r6,24(sp)
   44c00:	3023883a 	mov	r17,r6
   44c04:	80001115 	stw	zero,68(r16)
   44c08:	008005c4 	movi	r2,23
   44c0c:	1184f62e 	bgeu	r2,r6,45fe8 <_dtoa_r+0x1720>
   44c10:	00c00044 	movi	r3,1
   44c14:	00800104 	movi	r2,4
   44c18:	1085883a 	add	r2,r2,r2
   44c1c:	11000504 	addi	r4,r2,20
   44c20:	180b883a 	mov	r5,r3
   44c24:	18c00044 	addi	r3,r3,1
   44c28:	313ffb2e 	bgeu	r6,r4,44c18 <__alt_data_end+0xfffc4c18>
   44c2c:	81401115 	stw	r5,68(r16)
   44c30:	8009883a 	mov	r4,r16
   44c34:	0047f040 	call	47f04 <_Balloc>
   44c38:	d8800715 	stw	r2,28(sp)
   44c3c:	80801015 	stw	r2,64(r16)
   44c40:	00800384 	movi	r2,14
   44c44:	1440fd36 	bltu	r2,r17,4503c <_dtoa_r+0x774>
   44c48:	a000fc26 	beq	r20,zero,4503c <_dtoa_r+0x774>
   44c4c:	d8800517 	ldw	r2,20(sp)
   44c50:	0083b90e 	bge	zero,r2,45b38 <_dtoa_r+0x1270>
   44c54:	d8c00517 	ldw	r3,20(sp)
   44c58:	108003cc 	andi	r2,r2,15
   44c5c:	100490fa 	slli	r2,r2,3
   44c60:	182fd13a 	srai	r23,r3,4
   44c64:	00c00174 	movhi	r3,5
   44c68:	18c72a04 	addi	r3,r3,7336
   44c6c:	1885883a 	add	r2,r3,r2
   44c70:	b8c0040c 	andi	r3,r23,16
   44c74:	12c00017 	ldw	r11,0(r2)
   44c78:	12800117 	ldw	r10,4(r2)
   44c7c:	18039726 	beq	r3,zero,45adc <_dtoa_r+0x1214>
   44c80:	00800174 	movhi	r2,5
   44c84:	10872004 	addi	r2,r2,7296
   44c88:	11800817 	ldw	r6,32(r2)
   44c8c:	11c00917 	ldw	r7,36(r2)
   44c90:	9009883a 	mov	r4,r18
   44c94:	980b883a 	mov	r5,r19
   44c98:	da801615 	stw	r10,88(sp)
   44c9c:	dac01515 	stw	r11,84(sp)
   44ca0:	004cc880 	call	4cc88 <__divdf3>
   44ca4:	da801617 	ldw	r10,88(sp)
   44ca8:	dac01517 	ldw	r11,84(sp)
   44cac:	bdc003cc 	andi	r23,r23,15
   44cb0:	044000c4 	movi	r17,3
   44cb4:	d8800e15 	stw	r2,56(sp)
   44cb8:	182b883a 	mov	r21,r3
   44cbc:	b8001126 	beq	r23,zero,44d04 <_dtoa_r+0x43c>
   44cc0:	05000174 	movhi	r20,5
   44cc4:	a5072004 	addi	r20,r20,7296
   44cc8:	5805883a 	mov	r2,r11
   44ccc:	5007883a 	mov	r3,r10
   44cd0:	b980004c 	andi	r6,r23,1
   44cd4:	1009883a 	mov	r4,r2
   44cd8:	b82fd07a 	srai	r23,r23,1
   44cdc:	180b883a 	mov	r5,r3
   44ce0:	30000426 	beq	r6,zero,44cf4 <_dtoa_r+0x42c>
   44ce4:	a1800017 	ldw	r6,0(r20)
   44ce8:	a1c00117 	ldw	r7,4(r20)
   44cec:	8c400044 	addi	r17,r17,1
   44cf0:	004d84c0 	call	4d84c <__muldf3>
   44cf4:	a5000204 	addi	r20,r20,8
   44cf8:	b83ff51e 	bne	r23,zero,44cd0 <__alt_data_end+0xfffc4cd0>
   44cfc:	1017883a 	mov	r11,r2
   44d00:	1815883a 	mov	r10,r3
   44d04:	d9000e17 	ldw	r4,56(sp)
   44d08:	a80b883a 	mov	r5,r21
   44d0c:	580d883a 	mov	r6,r11
   44d10:	500f883a 	mov	r7,r10
   44d14:	004cc880 	call	4cc88 <__divdf3>
   44d18:	1029883a 	mov	r20,r2
   44d1c:	182b883a 	mov	r21,r3
   44d20:	d9800c17 	ldw	r6,48(sp)
   44d24:	30000626 	beq	r6,zero,44d40 <_dtoa_r+0x478>
   44d28:	a009883a 	mov	r4,r20
   44d2c:	a80b883a 	mov	r5,r21
   44d30:	000d883a 	mov	r6,zero
   44d34:	01cffc34 	movhi	r7,16368
   44d38:	004d76c0 	call	4d76c <__ledf2>
   44d3c:	10043216 	blt	r2,zero,45e08 <_dtoa_r+0x1540>
   44d40:	8809883a 	mov	r4,r17
   44d44:	004ea100 	call	4ea10 <__floatsidf>
   44d48:	1009883a 	mov	r4,r2
   44d4c:	180b883a 	mov	r5,r3
   44d50:	a00d883a 	mov	r6,r20
   44d54:	a80f883a 	mov	r7,r21
   44d58:	004d84c0 	call	4d84c <__muldf3>
   44d5c:	000d883a 	mov	r6,zero
   44d60:	1009883a 	mov	r4,r2
   44d64:	180b883a 	mov	r5,r3
   44d68:	01d00734 	movhi	r7,16412
   44d6c:	004c3ec0 	call	4c3ec <__adddf3>
   44d70:	1023883a 	mov	r17,r2
   44d74:	d9800617 	ldw	r6,24(sp)
   44d78:	00bf3034 	movhi	r2,64704
   44d7c:	1885883a 	add	r2,r3,r2
   44d80:	d8800e15 	stw	r2,56(sp)
   44d84:	30032e26 	beq	r6,zero,45a40 <_dtoa_r+0x1178>
   44d88:	d8c00517 	ldw	r3,20(sp)
   44d8c:	da800617 	ldw	r10,24(sp)
   44d90:	d8c01215 	stw	r3,72(sp)
   44d94:	d9000b17 	ldw	r4,44(sp)
   44d98:	2003b026 	beq	r4,zero,45c5c <_dtoa_r+0x1394>
   44d9c:	50bfffc4 	addi	r2,r10,-1
   44da0:	100490fa 	slli	r2,r2,3
   44da4:	00c00174 	movhi	r3,5
   44da8:	18c72a04 	addi	r3,r3,7336
   44dac:	1885883a 	add	r2,r3,r2
   44db0:	11800017 	ldw	r6,0(r2)
   44db4:	11c00117 	ldw	r7,4(r2)
   44db8:	d8800717 	ldw	r2,28(sp)
   44dbc:	0009883a 	mov	r4,zero
   44dc0:	014ff834 	movhi	r5,16352
   44dc4:	da801615 	stw	r10,88(sp)
   44dc8:	15c00044 	addi	r23,r2,1
   44dcc:	004cc880 	call	4cc88 <__divdf3>
   44dd0:	d9c00e17 	ldw	r7,56(sp)
   44dd4:	880d883a 	mov	r6,r17
   44dd8:	1009883a 	mov	r4,r2
   44ddc:	180b883a 	mov	r5,r3
   44de0:	004e0b80 	call	4e0b8 <__subdf3>
   44de4:	a80b883a 	mov	r5,r21
   44de8:	a009883a 	mov	r4,r20
   44dec:	d8c01015 	stw	r3,64(sp)
   44df0:	d8800e15 	stw	r2,56(sp)
   44df4:	004e9880 	call	4e988 <__fixdfsi>
   44df8:	1009883a 	mov	r4,r2
   44dfc:	d8801715 	stw	r2,92(sp)
   44e00:	004ea100 	call	4ea10 <__floatsidf>
   44e04:	a009883a 	mov	r4,r20
   44e08:	a80b883a 	mov	r5,r21
   44e0c:	100d883a 	mov	r6,r2
   44e10:	180f883a 	mov	r7,r3
   44e14:	004e0b80 	call	4e0b8 <__subdf3>
   44e18:	da001717 	ldw	r8,92(sp)
   44e1c:	1829883a 	mov	r20,r3
   44e20:	d8c00717 	ldw	r3,28(sp)
   44e24:	d9000e17 	ldw	r4,56(sp)
   44e28:	d9401017 	ldw	r5,64(sp)
   44e2c:	42000c04 	addi	r8,r8,48
   44e30:	1023883a 	mov	r17,r2
   44e34:	1a000005 	stb	r8,0(r3)
   44e38:	880d883a 	mov	r6,r17
   44e3c:	a00f883a 	mov	r7,r20
   44e40:	402b883a 	mov	r21,r8
   44e44:	004d68c0 	call	4d68c <__gedf2>
   44e48:	00844516 	blt	zero,r2,45f60 <_dtoa_r+0x1698>
   44e4c:	0009883a 	mov	r4,zero
   44e50:	014ffc34 	movhi	r5,16368
   44e54:	880d883a 	mov	r6,r17
   44e58:	a00f883a 	mov	r7,r20
   44e5c:	004e0b80 	call	4e0b8 <__subdf3>
   44e60:	d9000e17 	ldw	r4,56(sp)
   44e64:	d9401017 	ldw	r5,64(sp)
   44e68:	100d883a 	mov	r6,r2
   44e6c:	180f883a 	mov	r7,r3
   44e70:	004d68c0 	call	4d68c <__gedf2>
   44e74:	da801617 	ldw	r10,88(sp)
   44e78:	00843616 	blt	zero,r2,45f54 <_dtoa_r+0x168c>
   44e7c:	00800044 	movi	r2,1
   44e80:	12806e0e 	bge	r2,r10,4503c <_dtoa_r+0x774>
   44e84:	d9000717 	ldw	r4,28(sp)
   44e88:	dd801315 	stw	r22,76(sp)
   44e8c:	dc001115 	stw	r16,68(sp)
   44e90:	2295883a 	add	r10,r4,r10
   44e94:	dcc01415 	stw	r19,80(sp)
   44e98:	502d883a 	mov	r22,r10
   44e9c:	dcc01017 	ldw	r19,64(sp)
   44ea0:	b821883a 	mov	r16,r23
   44ea4:	dc801015 	stw	r18,64(sp)
   44ea8:	dc800e17 	ldw	r18,56(sp)
   44eac:	00000906 	br	44ed4 <_dtoa_r+0x60c>
   44eb0:	004e0b80 	call	4e0b8 <__subdf3>
   44eb4:	1009883a 	mov	r4,r2
   44eb8:	180b883a 	mov	r5,r3
   44ebc:	900d883a 	mov	r6,r18
   44ec0:	980f883a 	mov	r7,r19
   44ec4:	004d76c0 	call	4d76c <__ledf2>
   44ec8:	10040e16 	blt	r2,zero,45f04 <_dtoa_r+0x163c>
   44ecc:	b821883a 	mov	r16,r23
   44ed0:	bd841026 	beq	r23,r22,45f14 <_dtoa_r+0x164c>
   44ed4:	9009883a 	mov	r4,r18
   44ed8:	980b883a 	mov	r5,r19
   44edc:	000d883a 	mov	r6,zero
   44ee0:	01d00934 	movhi	r7,16420
   44ee4:	004d84c0 	call	4d84c <__muldf3>
   44ee8:	000d883a 	mov	r6,zero
   44eec:	01d00934 	movhi	r7,16420
   44ef0:	8809883a 	mov	r4,r17
   44ef4:	a00b883a 	mov	r5,r20
   44ef8:	1025883a 	mov	r18,r2
   44efc:	1827883a 	mov	r19,r3
   44f00:	004d84c0 	call	4d84c <__muldf3>
   44f04:	180b883a 	mov	r5,r3
   44f08:	1009883a 	mov	r4,r2
   44f0c:	1823883a 	mov	r17,r3
   44f10:	1029883a 	mov	r20,r2
   44f14:	004e9880 	call	4e988 <__fixdfsi>
   44f18:	1009883a 	mov	r4,r2
   44f1c:	102b883a 	mov	r21,r2
   44f20:	004ea100 	call	4ea10 <__floatsidf>
   44f24:	a009883a 	mov	r4,r20
   44f28:	880b883a 	mov	r5,r17
   44f2c:	100d883a 	mov	r6,r2
   44f30:	180f883a 	mov	r7,r3
   44f34:	004e0b80 	call	4e0b8 <__subdf3>
   44f38:	ad400c04 	addi	r21,r21,48
   44f3c:	1009883a 	mov	r4,r2
   44f40:	180b883a 	mov	r5,r3
   44f44:	900d883a 	mov	r6,r18
   44f48:	980f883a 	mov	r7,r19
   44f4c:	85400005 	stb	r21,0(r16)
   44f50:	1023883a 	mov	r17,r2
   44f54:	1829883a 	mov	r20,r3
   44f58:	004d76c0 	call	4d76c <__ledf2>
   44f5c:	bdc00044 	addi	r23,r23,1
   44f60:	0009883a 	mov	r4,zero
   44f64:	014ffc34 	movhi	r5,16368
   44f68:	880d883a 	mov	r6,r17
   44f6c:	a00f883a 	mov	r7,r20
   44f70:	103fcf0e 	bge	r2,zero,44eb0 <__alt_data_end+0xfffc4eb0>
   44f74:	d9801217 	ldw	r6,72(sp)
   44f78:	dc001117 	ldw	r16,68(sp)
   44f7c:	d9800515 	stw	r6,20(sp)
   44f80:	8009883a 	mov	r4,r16
   44f84:	e00b883a 	mov	r5,fp
   44f88:	0047fac0 	call	47fac <_Bfree>
   44f8c:	d8c00517 	ldw	r3,20(sp)
   44f90:	d9002317 	ldw	r4,140(sp)
   44f94:	d9802517 	ldw	r6,148(sp)
   44f98:	b8000005 	stb	zero,0(r23)
   44f9c:	18800044 	addi	r2,r3,1
   44fa0:	20800015 	stw	r2,0(r4)
   44fa4:	30027226 	beq	r6,zero,45970 <_dtoa_r+0x10a8>
   44fa8:	35c00015 	stw	r23,0(r6)
   44fac:	d8800717 	ldw	r2,28(sp)
   44fb0:	003e7406 	br	44984 <__alt_data_end+0xfffc4984>
   44fb4:	00800434 	movhi	r2,16
   44fb8:	10bfffc4 	addi	r2,r2,-1
   44fbc:	a8aa703a 	and	r21,r21,r2
   44fc0:	a83e801e 	bne	r21,zero,449c4 <__alt_data_end+0xfffc49c4>
   44fc4:	00800174 	movhi	r2,5
   44fc8:	10870b04 	addi	r2,r2,7212
   44fcc:	003e7f06 	br	449cc <__alt_data_end+0xfffc49cc>
   44fd0:	10c00204 	addi	r3,r2,8
   44fd4:	003e8206 	br	449e0 <__alt_data_end+0xfffc49e0>
   44fd8:	01400434 	movhi	r5,16
   44fdc:	297fffc4 	addi	r5,r5,-1
   44fe0:	994a703a 	and	r5,r19,r5
   44fe4:	9009883a 	mov	r4,r18
   44fe8:	8c7f0044 	addi	r17,r17,-1023
   44fec:	294ffc34 	orhi	r5,r5,16368
   44ff0:	dd000217 	ldw	r20,8(sp)
   44ff4:	d8000f15 	stw	zero,60(sp)
   44ff8:	003e9f06 	br	44a78 <__alt_data_end+0xfffc4a78>
   44ffc:	00800174 	movhi	r2,5
   45000:	10870204 	addi	r2,r2,7176
   45004:	003e5f06 	br	44984 <__alt_data_end+0xfffc4984>
   45008:	80001115 	stw	zero,68(r16)
   4500c:	8009883a 	mov	r4,r16
   45010:	000b883a 	mov	r5,zero
   45014:	0047f040 	call	47f04 <_Balloc>
   45018:	01bfffc4 	movi	r6,-1
   4501c:	d8800715 	stw	r2,28(sp)
   45020:	80801015 	stw	r2,64(r16)
   45024:	00800044 	movi	r2,1
   45028:	d9800615 	stw	r6,24(sp)
   4502c:	d8800b15 	stw	r2,44(sp)
   45030:	d8002215 	stw	zero,136(sp)
   45034:	d9800d15 	stw	r6,52(sp)
   45038:	d8000315 	stw	zero,12(sp)
   4503c:	d8800117 	ldw	r2,4(sp)
   45040:	10008e16 	blt	r2,zero,4527c <_dtoa_r+0x9b4>
   45044:	d9000517 	ldw	r4,20(sp)
   45048:	00c00384 	movi	r3,14
   4504c:	19008b16 	blt	r3,r4,4527c <_dtoa_r+0x9b4>
   45050:	200490fa 	slli	r2,r4,3
   45054:	00c00174 	movhi	r3,5
   45058:	d9802217 	ldw	r6,136(sp)
   4505c:	18c72a04 	addi	r3,r3,7336
   45060:	1885883a 	add	r2,r3,r2
   45064:	14400017 	ldw	r17,0(r2)
   45068:	15000117 	ldw	r20,4(r2)
   4506c:	3001c716 	blt	r6,zero,4578c <_dtoa_r+0xec4>
   45070:	880d883a 	mov	r6,r17
   45074:	a00f883a 	mov	r7,r20
   45078:	9009883a 	mov	r4,r18
   4507c:	980b883a 	mov	r5,r19
   45080:	004cc880 	call	4cc88 <__divdf3>
   45084:	180b883a 	mov	r5,r3
   45088:	1009883a 	mov	r4,r2
   4508c:	004e9880 	call	4e988 <__fixdfsi>
   45090:	1009883a 	mov	r4,r2
   45094:	102d883a 	mov	r22,r2
   45098:	004ea100 	call	4ea10 <__floatsidf>
   4509c:	1009883a 	mov	r4,r2
   450a0:	180b883a 	mov	r5,r3
   450a4:	880d883a 	mov	r6,r17
   450a8:	a00f883a 	mov	r7,r20
   450ac:	004d84c0 	call	4d84c <__muldf3>
   450b0:	9009883a 	mov	r4,r18
   450b4:	980b883a 	mov	r5,r19
   450b8:	100d883a 	mov	r6,r2
   450bc:	180f883a 	mov	r7,r3
   450c0:	004e0b80 	call	4e0b8 <__subdf3>
   450c4:	d9000717 	ldw	r4,28(sp)
   450c8:	d9800617 	ldw	r6,24(sp)
   450cc:	180b883a 	mov	r5,r3
   450d0:	b0c00c04 	addi	r3,r22,48
   450d4:	20c00005 	stb	r3,0(r4)
   450d8:	25c00044 	addi	r23,r4,1
   450dc:	01000044 	movi	r4,1
   450e0:	1011883a 	mov	r8,r2
   450e4:	2807883a 	mov	r3,r5
   450e8:	31003d26 	beq	r6,r4,451e0 <_dtoa_r+0x918>
   450ec:	000d883a 	mov	r6,zero
   450f0:	01d00934 	movhi	r7,16420
   450f4:	1009883a 	mov	r4,r2
   450f8:	004d84c0 	call	4d84c <__muldf3>
   450fc:	1009883a 	mov	r4,r2
   45100:	180b883a 	mov	r5,r3
   45104:	000d883a 	mov	r6,zero
   45108:	000f883a 	mov	r7,zero
   4510c:	1027883a 	mov	r19,r2
   45110:	182b883a 	mov	r21,r3
   45114:	004d6080 	call	4d608 <__eqdf2>
   45118:	103f9926 	beq	r2,zero,44f80 <__alt_data_end+0xfffc4f80>
   4511c:	d8c00617 	ldw	r3,24(sp)
   45120:	d9000717 	ldw	r4,28(sp)
   45124:	b825883a 	mov	r18,r23
   45128:	18bfffc4 	addi	r2,r3,-1
   4512c:	20ad883a 	add	r22,r4,r2
   45130:	dc000315 	stw	r16,12(sp)
   45134:	00000a06 	br	45160 <_dtoa_r+0x898>
   45138:	004d84c0 	call	4d84c <__muldf3>
   4513c:	1009883a 	mov	r4,r2
   45140:	180b883a 	mov	r5,r3
   45144:	000d883a 	mov	r6,zero
   45148:	000f883a 	mov	r7,zero
   4514c:	1027883a 	mov	r19,r2
   45150:	182b883a 	mov	r21,r3
   45154:	b825883a 	mov	r18,r23
   45158:	004d6080 	call	4d608 <__eqdf2>
   4515c:	10022626 	beq	r2,zero,459f8 <_dtoa_r+0x1130>
   45160:	880d883a 	mov	r6,r17
   45164:	a00f883a 	mov	r7,r20
   45168:	9809883a 	mov	r4,r19
   4516c:	a80b883a 	mov	r5,r21
   45170:	004cc880 	call	4cc88 <__divdf3>
   45174:	180b883a 	mov	r5,r3
   45178:	1009883a 	mov	r4,r2
   4517c:	004e9880 	call	4e988 <__fixdfsi>
   45180:	1009883a 	mov	r4,r2
   45184:	1021883a 	mov	r16,r2
   45188:	004ea100 	call	4ea10 <__floatsidf>
   4518c:	1009883a 	mov	r4,r2
   45190:	180b883a 	mov	r5,r3
   45194:	880d883a 	mov	r6,r17
   45198:	a00f883a 	mov	r7,r20
   4519c:	004d84c0 	call	4d84c <__muldf3>
   451a0:	9809883a 	mov	r4,r19
   451a4:	a80b883a 	mov	r5,r21
   451a8:	100d883a 	mov	r6,r2
   451ac:	180f883a 	mov	r7,r3
   451b0:	004e0b80 	call	4e0b8 <__subdf3>
   451b4:	82000c04 	addi	r8,r16,48
   451b8:	92000005 	stb	r8,0(r18)
   451bc:	1009883a 	mov	r4,r2
   451c0:	180b883a 	mov	r5,r3
   451c4:	000d883a 	mov	r6,zero
   451c8:	01d00934 	movhi	r7,16420
   451cc:	1011883a 	mov	r8,r2
   451d0:	bdc00044 	addi	r23,r23,1
   451d4:	95bfd81e 	bne	r18,r22,45138 <__alt_data_end+0xfffc5138>
   451d8:	802d883a 	mov	r22,r16
   451dc:	dc000317 	ldw	r16,12(sp)
   451e0:	4009883a 	mov	r4,r8
   451e4:	180b883a 	mov	r5,r3
   451e8:	400d883a 	mov	r6,r8
   451ec:	180f883a 	mov	r7,r3
   451f0:	004c3ec0 	call	4c3ec <__adddf3>
   451f4:	8809883a 	mov	r4,r17
   451f8:	a00b883a 	mov	r5,r20
   451fc:	100d883a 	mov	r6,r2
   45200:	180f883a 	mov	r7,r3
   45204:	1027883a 	mov	r19,r2
   45208:	1825883a 	mov	r18,r3
   4520c:	004d76c0 	call	4d76c <__ledf2>
   45210:	10000816 	blt	r2,zero,45234 <_dtoa_r+0x96c>
   45214:	8809883a 	mov	r4,r17
   45218:	a00b883a 	mov	r5,r20
   4521c:	980d883a 	mov	r6,r19
   45220:	900f883a 	mov	r7,r18
   45224:	004d6080 	call	4d608 <__eqdf2>
   45228:	103f551e 	bne	r2,zero,44f80 <__alt_data_end+0xfffc4f80>
   4522c:	b580004c 	andi	r22,r22,1
   45230:	b03f5326 	beq	r22,zero,44f80 <__alt_data_end+0xfffc4f80>
   45234:	bd7fffc3 	ldbu	r21,-1(r23)
   45238:	b8bfffc4 	addi	r2,r23,-1
   4523c:	1007883a 	mov	r3,r2
   45240:	01400e44 	movi	r5,57
   45244:	d9800717 	ldw	r6,28(sp)
   45248:	00000506 	br	45260 <_dtoa_r+0x998>
   4524c:	18ffffc4 	addi	r3,r3,-1
   45250:	30825e26 	beq	r6,r2,45bcc <_dtoa_r+0x1304>
   45254:	1d400003 	ldbu	r21,0(r3)
   45258:	102f883a 	mov	r23,r2
   4525c:	10bfffc4 	addi	r2,r2,-1
   45260:	a9003fcc 	andi	r4,r21,255
   45264:	2100201c 	xori	r4,r4,128
   45268:	213fe004 	addi	r4,r4,-128
   4526c:	217ff726 	beq	r4,r5,4524c <__alt_data_end+0xfffc524c>
   45270:	aa000044 	addi	r8,r21,1
   45274:	12000005 	stb	r8,0(r2)
   45278:	003f4106 	br	44f80 <__alt_data_end+0xfffc4f80>
   4527c:	d8c00b17 	ldw	r3,44(sp)
   45280:	18006726 	beq	r3,zero,45420 <_dtoa_r+0xb58>
   45284:	d9000317 	ldw	r4,12(sp)
   45288:	00c00044 	movi	r3,1
   4528c:	19016a0e 	bge	r3,r4,45838 <_dtoa_r+0xf70>
   45290:	d8800617 	ldw	r2,24(sp)
   45294:	d8c00917 	ldw	r3,36(sp)
   45298:	157fffc4 	addi	r21,r2,-1
   4529c:	1d420716 	blt	r3,r21,45abc <_dtoa_r+0x11f4>
   452a0:	1d6bc83a 	sub	r21,r3,r21
   452a4:	d8800617 	ldw	r2,24(sp)
   452a8:	1002c716 	blt	r2,zero,45dc8 <_dtoa_r+0x1500>
   452ac:	dd000817 	ldw	r20,32(sp)
   452b0:	d8800617 	ldw	r2,24(sp)
   452b4:	d9800817 	ldw	r6,32(sp)
   452b8:	8009883a 	mov	r4,r16
   452bc:	01400044 	movi	r5,1
   452c0:	308d883a 	add	r6,r6,r2
   452c4:	d9800815 	stw	r6,32(sp)
   452c8:	b0ad883a 	add	r22,r22,r2
   452cc:	004832c0 	call	4832c <__i2b>
   452d0:	1023883a 	mov	r17,r2
   452d4:	a0000826 	beq	r20,zero,452f8 <_dtoa_r+0xa30>
   452d8:	0580070e 	bge	zero,r22,452f8 <_dtoa_r+0xa30>
   452dc:	b005883a 	mov	r2,r22
   452e0:	a5812016 	blt	r20,r22,45764 <_dtoa_r+0xe9c>
   452e4:	d8c00817 	ldw	r3,32(sp)
   452e8:	a0a9c83a 	sub	r20,r20,r2
   452ec:	b0adc83a 	sub	r22,r22,r2
   452f0:	1887c83a 	sub	r3,r3,r2
   452f4:	d8c00815 	stw	r3,32(sp)
   452f8:	d9000917 	ldw	r4,36(sp)
   452fc:	0100140e 	bge	zero,r4,45350 <_dtoa_r+0xa88>
   45300:	d9800b17 	ldw	r6,44(sp)
   45304:	3001e526 	beq	r6,zero,45a9c <_dtoa_r+0x11d4>
   45308:	05400e0e 	bge	zero,r21,45344 <_dtoa_r+0xa7c>
   4530c:	880b883a 	mov	r5,r17
   45310:	8009883a 	mov	r4,r16
   45314:	a80d883a 	mov	r6,r21
   45318:	00485f80 	call	485f8 <__pow5mult>
   4531c:	e00d883a 	mov	r6,fp
   45320:	8009883a 	mov	r4,r16
   45324:	100b883a 	mov	r5,r2
   45328:	1023883a 	mov	r17,r2
   4532c:	00483680 	call	48368 <__multiply>
   45330:	102f883a 	mov	r23,r2
   45334:	e00b883a 	mov	r5,fp
   45338:	8009883a 	mov	r4,r16
   4533c:	0047fac0 	call	47fac <_Bfree>
   45340:	b839883a 	mov	fp,r23
   45344:	d8800917 	ldw	r2,36(sp)
   45348:	154dc83a 	sub	r6,r2,r21
   4534c:	3001281e 	bne	r6,zero,457f0 <_dtoa_r+0xf28>
   45350:	05c00044 	movi	r23,1
   45354:	8009883a 	mov	r4,r16
   45358:	b80b883a 	mov	r5,r23
   4535c:	004832c0 	call	4832c <__i2b>
   45360:	d8c00a17 	ldw	r3,40(sp)
   45364:	102b883a 	mov	r21,r2
   45368:	00c0310e 	bge	zero,r3,45430 <_dtoa_r+0xb68>
   4536c:	8009883a 	mov	r4,r16
   45370:	100b883a 	mov	r5,r2
   45374:	180d883a 	mov	r6,r3
   45378:	00485f80 	call	485f8 <__pow5mult>
   4537c:	d9000317 	ldw	r4,12(sp)
   45380:	102b883a 	mov	r21,r2
   45384:	b9011f0e 	bge	r23,r4,45804 <_dtoa_r+0xf3c>
   45388:	0027883a 	mov	r19,zero
   4538c:	a8800417 	ldw	r2,16(r21)
   45390:	10800104 	addi	r2,r2,4
   45394:	1085883a 	add	r2,r2,r2
   45398:	1085883a 	add	r2,r2,r2
   4539c:	a885883a 	add	r2,r21,r2
   453a0:	11000017 	ldw	r4,0(r2)
   453a4:	00482140 	call	48214 <__hi0bits>
   453a8:	00c00804 	movi	r3,32
   453ac:	1885c83a 	sub	r2,r3,r2
   453b0:	00002506 	br	45448 <_dtoa_r+0xb80>
   453b4:	01800044 	movi	r6,1
   453b8:	d9800c15 	stw	r6,48(sp)
   453bc:	003dec06 	br	44b70 <__alt_data_end+0xfffc4b70>
   453c0:	d8c00817 	ldw	r3,32(sp)
   453c4:	d9000517 	ldw	r4,20(sp)
   453c8:	d8000a15 	stw	zero,40(sp)
   453cc:	1907c83a 	sub	r3,r3,r4
   453d0:	010dc83a 	sub	r6,zero,r4
   453d4:	d8c00815 	stw	r3,32(sp)
   453d8:	d9800915 	stw	r6,36(sp)
   453dc:	003ded06 	br	44b94 <__alt_data_end+0xfffc4b94>
   453e0:	05adc83a 	sub	r22,zero,r22
   453e4:	dd800815 	stw	r22,32(sp)
   453e8:	002d883a 	mov	r22,zero
   453ec:	003de406 	br	44b80 <__alt_data_end+0xfffc4b80>
   453f0:	d9000517 	ldw	r4,20(sp)
   453f4:	004ea100 	call	4ea10 <__floatsidf>
   453f8:	1009883a 	mov	r4,r2
   453fc:	180b883a 	mov	r5,r3
   45400:	b00d883a 	mov	r6,r22
   45404:	a80f883a 	mov	r7,r21
   45408:	004d6080 	call	4d608 <__eqdf2>
   4540c:	103dc726 	beq	r2,zero,44b2c <__alt_data_end+0xfffc4b2c>
   45410:	d8800517 	ldw	r2,20(sp)
   45414:	10bfffc4 	addi	r2,r2,-1
   45418:	d8800515 	stw	r2,20(sp)
   4541c:	003dc306 	br	44b2c <__alt_data_end+0xfffc4b2c>
   45420:	dd400917 	ldw	r21,36(sp)
   45424:	dd000817 	ldw	r20,32(sp)
   45428:	0023883a 	mov	r17,zero
   4542c:	003fa906 	br	452d4 <__alt_data_end+0xfffc52d4>
   45430:	d9800317 	ldw	r6,12(sp)
   45434:	b981670e 	bge	r23,r6,459d4 <_dtoa_r+0x110c>
   45438:	0027883a 	mov	r19,zero
   4543c:	d8c00a17 	ldw	r3,40(sp)
   45440:	183fd21e 	bne	r3,zero,4538c <__alt_data_end+0xfffc538c>
   45444:	00800044 	movi	r2,1
   45448:	1585883a 	add	r2,r2,r22
   4544c:	108007cc 	andi	r2,r2,31
   45450:	10005f26 	beq	r2,zero,455d0 <_dtoa_r+0xd08>
   45454:	00c00804 	movi	r3,32
   45458:	1887c83a 	sub	r3,r3,r2
   4545c:	01000104 	movi	r4,4
   45460:	20c2dd0e 	bge	r4,r3,45fd8 <_dtoa_r+0x1710>
   45464:	d9000817 	ldw	r4,32(sp)
   45468:	00c00704 	movi	r3,28
   4546c:	1885c83a 	sub	r2,r3,r2
   45470:	2089883a 	add	r4,r4,r2
   45474:	d9000815 	stw	r4,32(sp)
   45478:	a0a9883a 	add	r20,r20,r2
   4547c:	b0ad883a 	add	r22,r22,r2
   45480:	d8800817 	ldw	r2,32(sp)
   45484:	0080050e 	bge	zero,r2,4549c <_dtoa_r+0xbd4>
   45488:	e00b883a 	mov	r5,fp
   4548c:	8009883a 	mov	r4,r16
   45490:	100d883a 	mov	r6,r2
   45494:	00487380 	call	48738 <__lshift>
   45498:	1039883a 	mov	fp,r2
   4549c:	0580050e 	bge	zero,r22,454b4 <_dtoa_r+0xbec>
   454a0:	a80b883a 	mov	r5,r21
   454a4:	8009883a 	mov	r4,r16
   454a8:	b00d883a 	mov	r6,r22
   454ac:	00487380 	call	48738 <__lshift>
   454b0:	102b883a 	mov	r21,r2
   454b4:	d8c00c17 	ldw	r3,48(sp)
   454b8:	1801161e 	bne	r3,zero,45914 <_dtoa_r+0x104c>
   454bc:	d8c00617 	ldw	r3,24(sp)
   454c0:	00c12d0e 	bge	zero,r3,45978 <_dtoa_r+0x10b0>
   454c4:	d8c00b17 	ldw	r3,44(sp)
   454c8:	1800571e 	bne	r3,zero,45628 <_dtoa_r+0xd60>
   454cc:	dc800717 	ldw	r18,28(sp)
   454d0:	dcc00617 	ldw	r19,24(sp)
   454d4:	9029883a 	mov	r20,r18
   454d8:	00000206 	br	454e4 <_dtoa_r+0xc1c>
   454dc:	0047fd40 	call	47fd4 <__multadd>
   454e0:	1039883a 	mov	fp,r2
   454e4:	e009883a 	mov	r4,fp
   454e8:	a80b883a 	mov	r5,r21
   454ec:	00446a00 	call	446a0 <quorem>
   454f0:	10800c04 	addi	r2,r2,48
   454f4:	90800005 	stb	r2,0(r18)
   454f8:	94800044 	addi	r18,r18,1
   454fc:	9507c83a 	sub	r3,r18,r20
   45500:	8009883a 	mov	r4,r16
   45504:	e00b883a 	mov	r5,fp
   45508:	01800284 	movi	r6,10
   4550c:	000f883a 	mov	r7,zero
   45510:	1cfff216 	blt	r3,r19,454dc <__alt_data_end+0xfffc54dc>
   45514:	1011883a 	mov	r8,r2
   45518:	d8800617 	ldw	r2,24(sp)
   4551c:	00822e0e 	bge	zero,r2,45dd8 <_dtoa_r+0x1510>
   45520:	d9000717 	ldw	r4,28(sp)
   45524:	0025883a 	mov	r18,zero
   45528:	20af883a 	add	r23,r4,r2
   4552c:	e00b883a 	mov	r5,fp
   45530:	01800044 	movi	r6,1
   45534:	8009883a 	mov	r4,r16
   45538:	da001715 	stw	r8,92(sp)
   4553c:	00487380 	call	48738 <__lshift>
   45540:	1009883a 	mov	r4,r2
   45544:	a80b883a 	mov	r5,r21
   45548:	1039883a 	mov	fp,r2
   4554c:	00488800 	call	48880 <__mcmp>
   45550:	da001717 	ldw	r8,92(sp)
   45554:	00816e0e 	bge	zero,r2,45b10 <_dtoa_r+0x1248>
   45558:	b93fffc3 	ldbu	r4,-1(r23)
   4555c:	b8bfffc4 	addi	r2,r23,-1
   45560:	1007883a 	mov	r3,r2
   45564:	01800e44 	movi	r6,57
   45568:	d9c00717 	ldw	r7,28(sp)
   4556c:	00000506 	br	45584 <_dtoa_r+0xcbc>
   45570:	18ffffc4 	addi	r3,r3,-1
   45574:	38811926 	beq	r7,r2,459dc <_dtoa_r+0x1114>
   45578:	19000003 	ldbu	r4,0(r3)
   4557c:	102f883a 	mov	r23,r2
   45580:	10bfffc4 	addi	r2,r2,-1
   45584:	21403fcc 	andi	r5,r4,255
   45588:	2940201c 	xori	r5,r5,128
   4558c:	297fe004 	addi	r5,r5,-128
   45590:	29bff726 	beq	r5,r6,45570 <__alt_data_end+0xfffc5570>
   45594:	21000044 	addi	r4,r4,1
   45598:	11000005 	stb	r4,0(r2)
   4559c:	8009883a 	mov	r4,r16
   455a0:	a80b883a 	mov	r5,r21
   455a4:	0047fac0 	call	47fac <_Bfree>
   455a8:	883e7526 	beq	r17,zero,44f80 <__alt_data_end+0xfffc4f80>
   455ac:	90000426 	beq	r18,zero,455c0 <_dtoa_r+0xcf8>
   455b0:	94400326 	beq	r18,r17,455c0 <_dtoa_r+0xcf8>
   455b4:	8009883a 	mov	r4,r16
   455b8:	900b883a 	mov	r5,r18
   455bc:	0047fac0 	call	47fac <_Bfree>
   455c0:	8009883a 	mov	r4,r16
   455c4:	880b883a 	mov	r5,r17
   455c8:	0047fac0 	call	47fac <_Bfree>
   455cc:	003e6c06 	br	44f80 <__alt_data_end+0xfffc4f80>
   455d0:	00800704 	movi	r2,28
   455d4:	d9800817 	ldw	r6,32(sp)
   455d8:	a0a9883a 	add	r20,r20,r2
   455dc:	b0ad883a 	add	r22,r22,r2
   455e0:	308d883a 	add	r6,r6,r2
   455e4:	d9800815 	stw	r6,32(sp)
   455e8:	003fa506 	br	45480 <__alt_data_end+0xfffc5480>
   455ec:	013efb84 	movi	r4,-1042
   455f0:	246bc83a 	sub	r21,r4,r17
   455f4:	9548983a 	sll	r4,r18,r21
   455f8:	003d1806 	br	44a5c <__alt_data_end+0xfffc4a5c>
   455fc:	d8000c15 	stw	zero,48(sp)
   45600:	003d5b06 	br	44b70 <__alt_data_end+0xfffc4b70>
   45604:	880b883a 	mov	r5,r17
   45608:	8009883a 	mov	r4,r16
   4560c:	01800284 	movi	r6,10
   45610:	000f883a 	mov	r7,zero
   45614:	0047fd40 	call	47fd4 <__multadd>
   45618:	1023883a 	mov	r17,r2
   4561c:	d8800d17 	ldw	r2,52(sp)
   45620:	0082550e 	bge	zero,r2,45f78 <_dtoa_r+0x16b0>
   45624:	d8800615 	stw	r2,24(sp)
   45628:	0500050e 	bge	zero,r20,45640 <_dtoa_r+0xd78>
   4562c:	880b883a 	mov	r5,r17
   45630:	8009883a 	mov	r4,r16
   45634:	a00d883a 	mov	r6,r20
   45638:	00487380 	call	48738 <__lshift>
   4563c:	1023883a 	mov	r17,r2
   45640:	98016a1e 	bne	r19,zero,45bec <_dtoa_r+0x1324>
   45644:	8829883a 	mov	r20,r17
   45648:	d9000617 	ldw	r4,24(sp)
   4564c:	dcc00717 	ldw	r19,28(sp)
   45650:	9480004c 	andi	r18,r18,1
   45654:	20bfffc4 	addi	r2,r4,-1
   45658:	9885883a 	add	r2,r19,r2
   4565c:	d8800415 	stw	r2,16(sp)
   45660:	dc800615 	stw	r18,24(sp)
   45664:	e009883a 	mov	r4,fp
   45668:	a80b883a 	mov	r5,r21
   4566c:	00446a00 	call	446a0 <quorem>
   45670:	e009883a 	mov	r4,fp
   45674:	880b883a 	mov	r5,r17
   45678:	102f883a 	mov	r23,r2
   4567c:	00488800 	call	48880 <__mcmp>
   45680:	8009883a 	mov	r4,r16
   45684:	a80b883a 	mov	r5,r21
   45688:	a00d883a 	mov	r6,r20
   4568c:	102d883a 	mov	r22,r2
   45690:	00488e00 	call	488e0 <__mdiff>
   45694:	1007883a 	mov	r3,r2
   45698:	10800317 	ldw	r2,12(r2)
   4569c:	bc800c04 	addi	r18,r23,48
   456a0:	1000971e 	bne	r2,zero,45900 <_dtoa_r+0x1038>
   456a4:	180b883a 	mov	r5,r3
   456a8:	e009883a 	mov	r4,fp
   456ac:	d8c01515 	stw	r3,84(sp)
   456b0:	00488800 	call	48880 <__mcmp>
   456b4:	d8c01517 	ldw	r3,84(sp)
   456b8:	8009883a 	mov	r4,r16
   456bc:	d8801515 	stw	r2,84(sp)
   456c0:	180b883a 	mov	r5,r3
   456c4:	0047fac0 	call	47fac <_Bfree>
   456c8:	d8801517 	ldw	r2,84(sp)
   456cc:	1000041e 	bne	r2,zero,456e0 <_dtoa_r+0xe18>
   456d0:	d9800317 	ldw	r6,12(sp)
   456d4:	3000021e 	bne	r6,zero,456e0 <_dtoa_r+0xe18>
   456d8:	d8c00617 	ldw	r3,24(sp)
   456dc:	18007626 	beq	r3,zero,458b8 <_dtoa_r+0xff0>
   456e0:	b0005b16 	blt	r22,zero,45850 <_dtoa_r+0xf88>
   456e4:	b000041e 	bne	r22,zero,456f8 <_dtoa_r+0xe30>
   456e8:	d9000317 	ldw	r4,12(sp)
   456ec:	2000021e 	bne	r4,zero,456f8 <_dtoa_r+0xe30>
   456f0:	d8c00617 	ldw	r3,24(sp)
   456f4:	18005626 	beq	r3,zero,45850 <_dtoa_r+0xf88>
   456f8:	00814d16 	blt	zero,r2,45c30 <_dtoa_r+0x1368>
   456fc:	d8c00417 	ldw	r3,16(sp)
   45700:	9d800044 	addi	r22,r19,1
   45704:	9c800005 	stb	r18,0(r19)
   45708:	b02f883a 	mov	r23,r22
   4570c:	98c14c26 	beq	r19,r3,45c40 <_dtoa_r+0x1378>
   45710:	e00b883a 	mov	r5,fp
   45714:	8009883a 	mov	r4,r16
   45718:	01800284 	movi	r6,10
   4571c:	000f883a 	mov	r7,zero
   45720:	0047fd40 	call	47fd4 <__multadd>
   45724:	1039883a 	mov	fp,r2
   45728:	8d006d26 	beq	r17,r20,458e0 <_dtoa_r+0x1018>
   4572c:	880b883a 	mov	r5,r17
   45730:	01800284 	movi	r6,10
   45734:	000f883a 	mov	r7,zero
   45738:	8009883a 	mov	r4,r16
   4573c:	0047fd40 	call	47fd4 <__multadd>
   45740:	a00b883a 	mov	r5,r20
   45744:	8009883a 	mov	r4,r16
   45748:	01800284 	movi	r6,10
   4574c:	000f883a 	mov	r7,zero
   45750:	1023883a 	mov	r17,r2
   45754:	0047fd40 	call	47fd4 <__multadd>
   45758:	1029883a 	mov	r20,r2
   4575c:	b027883a 	mov	r19,r22
   45760:	003fc006 	br	45664 <__alt_data_end+0xfffc5664>
   45764:	a005883a 	mov	r2,r20
   45768:	003ede06 	br	452e4 <__alt_data_end+0xfffc52e4>
   4576c:	01000044 	movi	r4,1
   45770:	d9000b15 	stw	r4,44(sp)
   45774:	d9802217 	ldw	r6,136(sp)
   45778:	0180dc0e 	bge	zero,r6,45aec <_dtoa_r+0x1224>
   4577c:	3023883a 	mov	r17,r6
   45780:	d9800d15 	stw	r6,52(sp)
   45784:	d9800615 	stw	r6,24(sp)
   45788:	003d1e06 	br	44c04 <__alt_data_end+0xfffc4c04>
   4578c:	d8800617 	ldw	r2,24(sp)
   45790:	00be3716 	blt	zero,r2,45070 <__alt_data_end+0xfffc5070>
   45794:	1000be1e 	bne	r2,zero,45a90 <_dtoa_r+0x11c8>
   45798:	8809883a 	mov	r4,r17
   4579c:	a00b883a 	mov	r5,r20
   457a0:	000d883a 	mov	r6,zero
   457a4:	01d00534 	movhi	r7,16404
   457a8:	004d84c0 	call	4d84c <__muldf3>
   457ac:	1009883a 	mov	r4,r2
   457b0:	180b883a 	mov	r5,r3
   457b4:	900d883a 	mov	r6,r18
   457b8:	980f883a 	mov	r7,r19
   457bc:	004d68c0 	call	4d68c <__gedf2>
   457c0:	002b883a 	mov	r21,zero
   457c4:	0023883a 	mov	r17,zero
   457c8:	10007a16 	blt	r2,zero,459b4 <_dtoa_r+0x10ec>
   457cc:	d9002217 	ldw	r4,136(sp)
   457d0:	ddc00717 	ldw	r23,28(sp)
   457d4:	0108303a 	nor	r4,zero,r4
   457d8:	d9000515 	stw	r4,20(sp)
   457dc:	8009883a 	mov	r4,r16
   457e0:	a80b883a 	mov	r5,r21
   457e4:	0047fac0 	call	47fac <_Bfree>
   457e8:	883f751e 	bne	r17,zero,455c0 <__alt_data_end+0xfffc55c0>
   457ec:	003de406 	br	44f80 <__alt_data_end+0xfffc4f80>
   457f0:	e00b883a 	mov	r5,fp
   457f4:	8009883a 	mov	r4,r16
   457f8:	00485f80 	call	485f8 <__pow5mult>
   457fc:	1039883a 	mov	fp,r2
   45800:	003ed306 	br	45350 <__alt_data_end+0xfffc5350>
   45804:	903ee01e 	bne	r18,zero,45388 <__alt_data_end+0xfffc5388>
   45808:	00800434 	movhi	r2,16
   4580c:	10bfffc4 	addi	r2,r2,-1
   45810:	9884703a 	and	r2,r19,r2
   45814:	103f081e 	bne	r2,zero,45438 <__alt_data_end+0xfffc5438>
   45818:	9cdffc2c 	andhi	r19,r19,32752
   4581c:	983f0626 	beq	r19,zero,45438 <__alt_data_end+0xfffc5438>
   45820:	d8800817 	ldw	r2,32(sp)
   45824:	b5800044 	addi	r22,r22,1
   45828:	04c00044 	movi	r19,1
   4582c:	10800044 	addi	r2,r2,1
   45830:	d8800815 	stw	r2,32(sp)
   45834:	003f0106 	br	4543c <__alt_data_end+0xfffc543c>
   45838:	d9800f17 	ldw	r6,60(sp)
   4583c:	30016826 	beq	r6,zero,45de0 <_dtoa_r+0x1518>
   45840:	10810cc4 	addi	r2,r2,1075
   45844:	dd400917 	ldw	r21,36(sp)
   45848:	dd000817 	ldw	r20,32(sp)
   4584c:	003e9906 	br	452b4 <__alt_data_end+0xfffc52b4>
   45850:	9011883a 	mov	r8,r18
   45854:	4007883a 	mov	r3,r8
   45858:	e02d883a 	mov	r22,fp
   4585c:	0080100e 	bge	zero,r2,458a0 <_dtoa_r+0xfd8>
   45860:	01800044 	movi	r6,1
   45864:	8009883a 	mov	r4,r16
   45868:	e00b883a 	mov	r5,fp
   4586c:	da001515 	stw	r8,84(sp)
   45870:	da001715 	stw	r8,92(sp)
   45874:	00487380 	call	48738 <__lshift>
   45878:	1009883a 	mov	r4,r2
   4587c:	a80b883a 	mov	r5,r21
   45880:	102d883a 	mov	r22,r2
   45884:	00488800 	call	48880 <__mcmp>
   45888:	d8c01517 	ldw	r3,84(sp)
   4588c:	da001717 	ldw	r8,92(sp)
   45890:	0081a50e 	bge	zero,r2,45f28 <_dtoa_r+0x1660>
   45894:	00800e44 	movi	r2,57
   45898:	40817b26 	beq	r8,r2,45e88 <_dtoa_r+0x15c0>
   4589c:	40c00044 	addi	r3,r8,1
   458a0:	8825883a 	mov	r18,r17
   458a4:	9dc00044 	addi	r23,r19,1
   458a8:	98c00005 	stb	r3,0(r19)
   458ac:	a023883a 	mov	r17,r20
   458b0:	b039883a 	mov	fp,r22
   458b4:	003f3906 	br	4559c <__alt_data_end+0xfffc559c>
   458b8:	00800e44 	movi	r2,57
   458bc:	9011883a 	mov	r8,r18
   458c0:	90817226 	beq	r18,r2,45e8c <_dtoa_r+0x15c4>
   458c4:	0580010e 	bge	zero,r22,458cc <_dtoa_r+0x1004>
   458c8:	ba000c44 	addi	r8,r23,49
   458cc:	8825883a 	mov	r18,r17
   458d0:	9dc00044 	addi	r23,r19,1
   458d4:	9a000005 	stb	r8,0(r19)
   458d8:	a023883a 	mov	r17,r20
   458dc:	003f2f06 	br	4559c <__alt_data_end+0xfffc559c>
   458e0:	880b883a 	mov	r5,r17
   458e4:	8009883a 	mov	r4,r16
   458e8:	01800284 	movi	r6,10
   458ec:	000f883a 	mov	r7,zero
   458f0:	0047fd40 	call	47fd4 <__multadd>
   458f4:	1023883a 	mov	r17,r2
   458f8:	1029883a 	mov	r20,r2
   458fc:	003f9706 	br	4575c <__alt_data_end+0xfffc575c>
   45900:	8009883a 	mov	r4,r16
   45904:	180b883a 	mov	r5,r3
   45908:	0047fac0 	call	47fac <_Bfree>
   4590c:	00800044 	movi	r2,1
   45910:	003f7306 	br	456e0 <__alt_data_end+0xfffc56e0>
   45914:	e009883a 	mov	r4,fp
   45918:	a80b883a 	mov	r5,r21
   4591c:	00488800 	call	48880 <__mcmp>
   45920:	103ee60e 	bge	r2,zero,454bc <__alt_data_end+0xfffc54bc>
   45924:	8009883a 	mov	r4,r16
   45928:	e00b883a 	mov	r5,fp
   4592c:	01800284 	movi	r6,10
   45930:	000f883a 	mov	r7,zero
   45934:	0047fd40 	call	47fd4 <__multadd>
   45938:	d9000517 	ldw	r4,20(sp)
   4593c:	d9800b17 	ldw	r6,44(sp)
   45940:	1039883a 	mov	fp,r2
   45944:	213fffc4 	addi	r4,r4,-1
   45948:	d9000515 	stw	r4,20(sp)
   4594c:	303f2d1e 	bne	r6,zero,45604 <__alt_data_end+0xfffc5604>
   45950:	d9000d17 	ldw	r4,52(sp)
   45954:	0101780e 	bge	zero,r4,45f38 <_dtoa_r+0x1670>
   45958:	d9000615 	stw	r4,24(sp)
   4595c:	003edb06 	br	454cc <__alt_data_end+0xfffc54cc>
   45960:	00800084 	movi	r2,2
   45964:	30818e1e 	bne	r6,r2,45fa0 <_dtoa_r+0x16d8>
   45968:	d8000b15 	stw	zero,44(sp)
   4596c:	003f8106 	br	45774 <__alt_data_end+0xfffc5774>
   45970:	d8800717 	ldw	r2,28(sp)
   45974:	003c0306 	br	44984 <__alt_data_end+0xfffc4984>
   45978:	d9000317 	ldw	r4,12(sp)
   4597c:	00800084 	movi	r2,2
   45980:	113ed00e 	bge	r2,r4,454c4 <__alt_data_end+0xfffc54c4>
   45984:	d8c00617 	ldw	r3,24(sp)
   45988:	183f901e 	bne	r3,zero,457cc <__alt_data_end+0xfffc57cc>
   4598c:	a80b883a 	mov	r5,r21
   45990:	8009883a 	mov	r4,r16
   45994:	01800144 	movi	r6,5
   45998:	000f883a 	mov	r7,zero
   4599c:	0047fd40 	call	47fd4 <__multadd>
   459a0:	e009883a 	mov	r4,fp
   459a4:	100b883a 	mov	r5,r2
   459a8:	102b883a 	mov	r21,r2
   459ac:	00488800 	call	48880 <__mcmp>
   459b0:	00bf860e 	bge	zero,r2,457cc <__alt_data_end+0xfffc57cc>
   459b4:	d9800717 	ldw	r6,28(sp)
   459b8:	00800c44 	movi	r2,49
   459bc:	30800005 	stb	r2,0(r6)
   459c0:	d8800517 	ldw	r2,20(sp)
   459c4:	35c00044 	addi	r23,r6,1
   459c8:	10800044 	addi	r2,r2,1
   459cc:	d8800515 	stw	r2,20(sp)
   459d0:	003f8206 	br	457dc <__alt_data_end+0xfffc57dc>
   459d4:	903e981e 	bne	r18,zero,45438 <__alt_data_end+0xfffc5438>
   459d8:	003f8b06 	br	45808 <__alt_data_end+0xfffc5808>
   459dc:	d9800517 	ldw	r6,20(sp)
   459e0:	d8c00717 	ldw	r3,28(sp)
   459e4:	00800c44 	movi	r2,49
   459e8:	31800044 	addi	r6,r6,1
   459ec:	d9800515 	stw	r6,20(sp)
   459f0:	18800005 	stb	r2,0(r3)
   459f4:	003ee906 	br	4559c <__alt_data_end+0xfffc559c>
   459f8:	dc000317 	ldw	r16,12(sp)
   459fc:	003d6006 	br	44f80 <__alt_data_end+0xfffc4f80>
   45a00:	8809883a 	mov	r4,r17
   45a04:	004ea100 	call	4ea10 <__floatsidf>
   45a08:	a009883a 	mov	r4,r20
   45a0c:	a80b883a 	mov	r5,r21
   45a10:	100d883a 	mov	r6,r2
   45a14:	180f883a 	mov	r7,r3
   45a18:	004d84c0 	call	4d84c <__muldf3>
   45a1c:	1009883a 	mov	r4,r2
   45a20:	180b883a 	mov	r5,r3
   45a24:	000d883a 	mov	r6,zero
   45a28:	01d00734 	movhi	r7,16412
   45a2c:	004c3ec0 	call	4c3ec <__adddf3>
   45a30:	1023883a 	mov	r17,r2
   45a34:	00bf3034 	movhi	r2,64704
   45a38:	1885883a 	add	r2,r3,r2
   45a3c:	d8800e15 	stw	r2,56(sp)
   45a40:	a009883a 	mov	r4,r20
   45a44:	a80b883a 	mov	r5,r21
   45a48:	000d883a 	mov	r6,zero
   45a4c:	01d00534 	movhi	r7,16404
   45a50:	004e0b80 	call	4e0b8 <__subdf3>
   45a54:	d9c00e17 	ldw	r7,56(sp)
   45a58:	1009883a 	mov	r4,r2
   45a5c:	180b883a 	mov	r5,r3
   45a60:	880d883a 	mov	r6,r17
   45a64:	102b883a 	mov	r21,r2
   45a68:	1829883a 	mov	r20,r3
   45a6c:	004d68c0 	call	4d68c <__gedf2>
   45a70:	00807716 	blt	zero,r2,45c50 <_dtoa_r+0x1388>
   45a74:	d8800e17 	ldw	r2,56(sp)
   45a78:	a809883a 	mov	r4,r21
   45a7c:	a00b883a 	mov	r5,r20
   45a80:	11e0003c 	xorhi	r7,r2,32768
   45a84:	880d883a 	mov	r6,r17
   45a88:	004d76c0 	call	4d76c <__ledf2>
   45a8c:	103d6b0e 	bge	r2,zero,4503c <__alt_data_end+0xfffc503c>
   45a90:	002b883a 	mov	r21,zero
   45a94:	0023883a 	mov	r17,zero
   45a98:	003f4c06 	br	457cc <__alt_data_end+0xfffc57cc>
   45a9c:	d9800917 	ldw	r6,36(sp)
   45aa0:	e00b883a 	mov	r5,fp
   45aa4:	8009883a 	mov	r4,r16
   45aa8:	00485f80 	call	485f8 <__pow5mult>
   45aac:	1039883a 	mov	fp,r2
   45ab0:	003e2706 	br	45350 <__alt_data_end+0xfffc5350>
   45ab4:	d8000b15 	stw	zero,44(sp)
   45ab8:	003c4906 	br	44be0 <__alt_data_end+0xfffc4be0>
   45abc:	d9000917 	ldw	r4,36(sp)
   45ac0:	d9800a17 	ldw	r6,40(sp)
   45ac4:	dd400915 	stw	r21,36(sp)
   45ac8:	a905c83a 	sub	r2,r21,r4
   45acc:	308d883a 	add	r6,r6,r2
   45ad0:	d9800a15 	stw	r6,40(sp)
   45ad4:	002b883a 	mov	r21,zero
   45ad8:	003df206 	br	452a4 <__alt_data_end+0xfffc52a4>
   45adc:	dc800e15 	stw	r18,56(sp)
   45ae0:	982b883a 	mov	r21,r19
   45ae4:	04400084 	movi	r17,2
   45ae8:	003c7406 	br	44cbc <__alt_data_end+0xfffc4cbc>
   45aec:	04400044 	movi	r17,1
   45af0:	dc400d15 	stw	r17,52(sp)
   45af4:	dc400615 	stw	r17,24(sp)
   45af8:	dc402215 	stw	r17,136(sp)
   45afc:	80001115 	stw	zero,68(r16)
   45b00:	000b883a 	mov	r5,zero
   45b04:	003c4a06 	br	44c30 <__alt_data_end+0xfffc4c30>
   45b08:	3023883a 	mov	r17,r6
   45b0c:	003ffb06 	br	45afc <__alt_data_end+0xfffc5afc>
   45b10:	1000021e 	bne	r2,zero,45b1c <_dtoa_r+0x1254>
   45b14:	4200004c 	andi	r8,r8,1
   45b18:	403e8f1e 	bne	r8,zero,45558 <__alt_data_end+0xfffc5558>
   45b1c:	01000c04 	movi	r4,48
   45b20:	00000106 	br	45b28 <_dtoa_r+0x1260>
   45b24:	102f883a 	mov	r23,r2
   45b28:	b8bfffc4 	addi	r2,r23,-1
   45b2c:	10c00007 	ldb	r3,0(r2)
   45b30:	193ffc26 	beq	r3,r4,45b24 <__alt_data_end+0xfffc5b24>
   45b34:	003e9906 	br	4559c <__alt_data_end+0xfffc559c>
   45b38:	d9000517 	ldw	r4,20(sp)
   45b3c:	012fc83a 	sub	r23,zero,r4
   45b40:	b800ad26 	beq	r23,zero,45df8 <_dtoa_r+0x1530>
   45b44:	b88003cc 	andi	r2,r23,15
   45b48:	100490fa 	slli	r2,r2,3
   45b4c:	00c00174 	movhi	r3,5
   45b50:	18c72a04 	addi	r3,r3,7336
   45b54:	1885883a 	add	r2,r3,r2
   45b58:	11800017 	ldw	r6,0(r2)
   45b5c:	11c00117 	ldw	r7,4(r2)
   45b60:	b82fd13a 	srai	r23,r23,4
   45b64:	9009883a 	mov	r4,r18
   45b68:	980b883a 	mov	r5,r19
   45b6c:	004d84c0 	call	4d84c <__muldf3>
   45b70:	1029883a 	mov	r20,r2
   45b74:	182b883a 	mov	r21,r3
   45b78:	b800f426 	beq	r23,zero,45f4c <_dtoa_r+0x1684>
   45b7c:	02000174 	movhi	r8,5
   45b80:	42072004 	addi	r8,r8,7296
   45b84:	8029883a 	mov	r20,r16
   45b88:	04400084 	movi	r17,2
   45b8c:	4021883a 	mov	r16,r8
   45b90:	b980004c 	andi	r6,r23,1
   45b94:	1009883a 	mov	r4,r2
   45b98:	b82fd07a 	srai	r23,r23,1
   45b9c:	180b883a 	mov	r5,r3
   45ba0:	30000426 	beq	r6,zero,45bb4 <_dtoa_r+0x12ec>
   45ba4:	81800017 	ldw	r6,0(r16)
   45ba8:	81c00117 	ldw	r7,4(r16)
   45bac:	8c400044 	addi	r17,r17,1
   45bb0:	004d84c0 	call	4d84c <__muldf3>
   45bb4:	84000204 	addi	r16,r16,8
   45bb8:	b83ff51e 	bne	r23,zero,45b90 <__alt_data_end+0xfffc5b90>
   45bbc:	a021883a 	mov	r16,r20
   45bc0:	182b883a 	mov	r21,r3
   45bc4:	1029883a 	mov	r20,r2
   45bc8:	003c5506 	br	44d20 <__alt_data_end+0xfffc4d20>
   45bcc:	d9800517 	ldw	r6,20(sp)
   45bd0:	d9000717 	ldw	r4,28(sp)
   45bd4:	00c00c04 	movi	r3,48
   45bd8:	31800044 	addi	r6,r6,1
   45bdc:	d9800515 	stw	r6,20(sp)
   45be0:	20c00005 	stb	r3,0(r4)
   45be4:	02000c44 	movi	r8,49
   45be8:	003da206 	br	45274 <__alt_data_end+0xfffc5274>
   45bec:	89400117 	ldw	r5,4(r17)
   45bf0:	8009883a 	mov	r4,r16
   45bf4:	0047f040 	call	47f04 <_Balloc>
   45bf8:	89800417 	ldw	r6,16(r17)
   45bfc:	11000304 	addi	r4,r2,12
   45c00:	89400304 	addi	r5,r17,12
   45c04:	31800084 	addi	r6,r6,2
   45c08:	318d883a 	add	r6,r6,r6
   45c0c:	318d883a 	add	r6,r6,r6
   45c10:	1027883a 	mov	r19,r2
   45c14:	0047b4c0 	call	47b4c <memcpy>
   45c18:	8009883a 	mov	r4,r16
   45c1c:	980b883a 	mov	r5,r19
   45c20:	01800044 	movi	r6,1
   45c24:	00487380 	call	48738 <__lshift>
   45c28:	1029883a 	mov	r20,r2
   45c2c:	003e8606 	br	45648 <__alt_data_end+0xfffc5648>
   45c30:	00800e44 	movi	r2,57
   45c34:	90809526 	beq	r18,r2,45e8c <_dtoa_r+0x15c4>
   45c38:	92000044 	addi	r8,r18,1
   45c3c:	003f2306 	br	458cc <__alt_data_end+0xfffc58cc>
   45c40:	9011883a 	mov	r8,r18
   45c44:	8825883a 	mov	r18,r17
   45c48:	a023883a 	mov	r17,r20
   45c4c:	003e3706 	br	4552c <__alt_data_end+0xfffc552c>
   45c50:	002b883a 	mov	r21,zero
   45c54:	0023883a 	mov	r17,zero
   45c58:	003f5606 	br	459b4 <__alt_data_end+0xfffc59b4>
   45c5c:	51bfffc4 	addi	r6,r10,-1
   45c60:	300490fa 	slli	r2,r6,3
   45c64:	00c00174 	movhi	r3,5
   45c68:	18c72a04 	addi	r3,r3,7336
   45c6c:	1885883a 	add	r2,r3,r2
   45c70:	d9c00e17 	ldw	r7,56(sp)
   45c74:	11000017 	ldw	r4,0(r2)
   45c78:	11400117 	ldw	r5,4(r2)
   45c7c:	d8800717 	ldw	r2,28(sp)
   45c80:	d9801015 	stw	r6,64(sp)
   45c84:	880d883a 	mov	r6,r17
   45c88:	da801615 	stw	r10,88(sp)
   45c8c:	15c00044 	addi	r23,r2,1
   45c90:	004d84c0 	call	4d84c <__muldf3>
   45c94:	a80b883a 	mov	r5,r21
   45c98:	a009883a 	mov	r4,r20
   45c9c:	d8c01115 	stw	r3,68(sp)
   45ca0:	d8800e15 	stw	r2,56(sp)
   45ca4:	004e9880 	call	4e988 <__fixdfsi>
   45ca8:	1009883a 	mov	r4,r2
   45cac:	1023883a 	mov	r17,r2
   45cb0:	004ea100 	call	4ea10 <__floatsidf>
   45cb4:	a009883a 	mov	r4,r20
   45cb8:	a80b883a 	mov	r5,r21
   45cbc:	100d883a 	mov	r6,r2
   45cc0:	180f883a 	mov	r7,r3
   45cc4:	004e0b80 	call	4e0b8 <__subdf3>
   45cc8:	1813883a 	mov	r9,r3
   45ccc:	d8c00717 	ldw	r3,28(sp)
   45cd0:	8c400c04 	addi	r17,r17,48
   45cd4:	1011883a 	mov	r8,r2
   45cd8:	1c400005 	stb	r17,0(r3)
   45cdc:	da801617 	ldw	r10,88(sp)
   45ce0:	00800044 	movi	r2,1
   45ce4:	50802326 	beq	r10,r2,45d74 <_dtoa_r+0x14ac>
   45ce8:	d8800717 	ldw	r2,28(sp)
   45cec:	b82b883a 	mov	r21,r23
   45cf0:	dc001315 	stw	r16,76(sp)
   45cf4:	12a9883a 	add	r20,r2,r10
   45cf8:	4807883a 	mov	r3,r9
   45cfc:	4005883a 	mov	r2,r8
   45d00:	dc801415 	stw	r18,80(sp)
   45d04:	000d883a 	mov	r6,zero
   45d08:	01d00934 	movhi	r7,16420
   45d0c:	1009883a 	mov	r4,r2
   45d10:	180b883a 	mov	r5,r3
   45d14:	004d84c0 	call	4d84c <__muldf3>
   45d18:	180b883a 	mov	r5,r3
   45d1c:	1009883a 	mov	r4,r2
   45d20:	1821883a 	mov	r16,r3
   45d24:	1025883a 	mov	r18,r2
   45d28:	004e9880 	call	4e988 <__fixdfsi>
   45d2c:	1009883a 	mov	r4,r2
   45d30:	1023883a 	mov	r17,r2
   45d34:	004ea100 	call	4ea10 <__floatsidf>
   45d38:	9009883a 	mov	r4,r18
   45d3c:	800b883a 	mov	r5,r16
   45d40:	100d883a 	mov	r6,r2
   45d44:	180f883a 	mov	r7,r3
   45d48:	8c400c04 	addi	r17,r17,48
   45d4c:	004e0b80 	call	4e0b8 <__subdf3>
   45d50:	ad400044 	addi	r21,r21,1
   45d54:	ac7fffc5 	stb	r17,-1(r21)
   45d58:	ad3fea1e 	bne	r21,r20,45d04 <__alt_data_end+0xfffc5d04>
   45d5c:	1813883a 	mov	r9,r3
   45d60:	d8c01017 	ldw	r3,64(sp)
   45d64:	dc001317 	ldw	r16,76(sp)
   45d68:	dc801417 	ldw	r18,80(sp)
   45d6c:	1011883a 	mov	r8,r2
   45d70:	b8ef883a 	add	r23,r23,r3
   45d74:	d9000e17 	ldw	r4,56(sp)
   45d78:	d9401117 	ldw	r5,68(sp)
   45d7c:	000d883a 	mov	r6,zero
   45d80:	01cff834 	movhi	r7,16352
   45d84:	da001715 	stw	r8,92(sp)
   45d88:	da401515 	stw	r9,84(sp)
   45d8c:	004c3ec0 	call	4c3ec <__adddf3>
   45d90:	da001717 	ldw	r8,92(sp)
   45d94:	da401517 	ldw	r9,84(sp)
   45d98:	1009883a 	mov	r4,r2
   45d9c:	400d883a 	mov	r6,r8
   45da0:	480f883a 	mov	r7,r9
   45da4:	180b883a 	mov	r5,r3
   45da8:	004d76c0 	call	4d76c <__ledf2>
   45dac:	da001717 	ldw	r8,92(sp)
   45db0:	da401517 	ldw	r9,84(sp)
   45db4:	10003b0e 	bge	r2,zero,45ea4 <_dtoa_r+0x15dc>
   45db8:	d9001217 	ldw	r4,72(sp)
   45dbc:	bd7fffc3 	ldbu	r21,-1(r23)
   45dc0:	d9000515 	stw	r4,20(sp)
   45dc4:	003d1c06 	br	45238 <__alt_data_end+0xfffc5238>
   45dc8:	d8c00817 	ldw	r3,32(sp)
   45dcc:	18a9c83a 	sub	r20,r3,r2
   45dd0:	0005883a 	mov	r2,zero
   45dd4:	003d3706 	br	452b4 <__alt_data_end+0xfffc52b4>
   45dd8:	00800044 	movi	r2,1
   45ddc:	003dd006 	br	45520 <__alt_data_end+0xfffc5520>
   45de0:	d8c00217 	ldw	r3,8(sp)
   45de4:	00800d84 	movi	r2,54
   45de8:	dd400917 	ldw	r21,36(sp)
   45dec:	10c5c83a 	sub	r2,r2,r3
   45df0:	dd000817 	ldw	r20,32(sp)
   45df4:	003d2f06 	br	452b4 <__alt_data_end+0xfffc52b4>
   45df8:	9029883a 	mov	r20,r18
   45dfc:	982b883a 	mov	r21,r19
   45e00:	04400084 	movi	r17,2
   45e04:	003bc606 	br	44d20 <__alt_data_end+0xfffc4d20>
   45e08:	d8800617 	ldw	r2,24(sp)
   45e0c:	103efc26 	beq	r2,zero,45a00 <__alt_data_end+0xfffc5a00>
   45e10:	d8c00d17 	ldw	r3,52(sp)
   45e14:	00fc890e 	bge	zero,r3,4503c <__alt_data_end+0xfffc503c>
   45e18:	a80b883a 	mov	r5,r21
   45e1c:	a009883a 	mov	r4,r20
   45e20:	000d883a 	mov	r6,zero
   45e24:	01d00934 	movhi	r7,16420
   45e28:	004d84c0 	call	4d84c <__muldf3>
   45e2c:	89000044 	addi	r4,r17,1
   45e30:	1029883a 	mov	r20,r2
   45e34:	182b883a 	mov	r21,r3
   45e38:	004ea100 	call	4ea10 <__floatsidf>
   45e3c:	a009883a 	mov	r4,r20
   45e40:	a80b883a 	mov	r5,r21
   45e44:	100d883a 	mov	r6,r2
   45e48:	180f883a 	mov	r7,r3
   45e4c:	004d84c0 	call	4d84c <__muldf3>
   45e50:	1009883a 	mov	r4,r2
   45e54:	180b883a 	mov	r5,r3
   45e58:	000d883a 	mov	r6,zero
   45e5c:	01d00734 	movhi	r7,16412
   45e60:	004c3ec0 	call	4c3ec <__adddf3>
   45e64:	d9000517 	ldw	r4,20(sp)
   45e68:	1023883a 	mov	r17,r2
   45e6c:	00bf3034 	movhi	r2,64704
   45e70:	213fffc4 	addi	r4,r4,-1
   45e74:	1885883a 	add	r2,r3,r2
   45e78:	d9001215 	stw	r4,72(sp)
   45e7c:	d8800e15 	stw	r2,56(sp)
   45e80:	da800d17 	ldw	r10,52(sp)
   45e84:	003bc306 	br	44d94 <__alt_data_end+0xfffc4d94>
   45e88:	b039883a 	mov	fp,r22
   45e8c:	01000e44 	movi	r4,57
   45e90:	8825883a 	mov	r18,r17
   45e94:	9dc00044 	addi	r23,r19,1
   45e98:	99000005 	stb	r4,0(r19)
   45e9c:	a023883a 	mov	r17,r20
   45ea0:	003dae06 	br	4555c <__alt_data_end+0xfffc555c>
   45ea4:	d9800e17 	ldw	r6,56(sp)
   45ea8:	d9c01117 	ldw	r7,68(sp)
   45eac:	0009883a 	mov	r4,zero
   45eb0:	014ff834 	movhi	r5,16352
   45eb4:	da001715 	stw	r8,92(sp)
   45eb8:	da401515 	stw	r9,84(sp)
   45ebc:	004e0b80 	call	4e0b8 <__subdf3>
   45ec0:	da001717 	ldw	r8,92(sp)
   45ec4:	da401517 	ldw	r9,84(sp)
   45ec8:	1009883a 	mov	r4,r2
   45ecc:	180b883a 	mov	r5,r3
   45ed0:	400d883a 	mov	r6,r8
   45ed4:	480f883a 	mov	r7,r9
   45ed8:	004d68c0 	call	4d68c <__gedf2>
   45edc:	00bc570e 	bge	zero,r2,4503c <__alt_data_end+0xfffc503c>
   45ee0:	01000c04 	movi	r4,48
   45ee4:	00000106 	br	45eec <_dtoa_r+0x1624>
   45ee8:	102f883a 	mov	r23,r2
   45eec:	b8bfffc4 	addi	r2,r23,-1
   45ef0:	10c00007 	ldb	r3,0(r2)
   45ef4:	193ffc26 	beq	r3,r4,45ee8 <__alt_data_end+0xfffc5ee8>
   45ef8:	d9801217 	ldw	r6,72(sp)
   45efc:	d9800515 	stw	r6,20(sp)
   45f00:	003c1f06 	br	44f80 <__alt_data_end+0xfffc4f80>
   45f04:	d8801217 	ldw	r2,72(sp)
   45f08:	dc001117 	ldw	r16,68(sp)
   45f0c:	d8800515 	stw	r2,20(sp)
   45f10:	003cc906 	br	45238 <__alt_data_end+0xfffc5238>
   45f14:	dd801317 	ldw	r22,76(sp)
   45f18:	dc001117 	ldw	r16,68(sp)
   45f1c:	dcc01417 	ldw	r19,80(sp)
   45f20:	dc801017 	ldw	r18,64(sp)
   45f24:	003c4506 	br	4503c <__alt_data_end+0xfffc503c>
   45f28:	103e5d1e 	bne	r2,zero,458a0 <__alt_data_end+0xfffc58a0>
   45f2c:	4080004c 	andi	r2,r8,1
   45f30:	103e5b26 	beq	r2,zero,458a0 <__alt_data_end+0xfffc58a0>
   45f34:	003e5706 	br	45894 <__alt_data_end+0xfffc5894>
   45f38:	d8c00317 	ldw	r3,12(sp)
   45f3c:	00800084 	movi	r2,2
   45f40:	10c00a16 	blt	r2,r3,45f6c <_dtoa_r+0x16a4>
   45f44:	d9000d17 	ldw	r4,52(sp)
   45f48:	003e8306 	br	45958 <__alt_data_end+0xfffc5958>
   45f4c:	04400084 	movi	r17,2
   45f50:	003b7306 	br	44d20 <__alt_data_end+0xfffc4d20>
   45f54:	d9801217 	ldw	r6,72(sp)
   45f58:	d9800515 	stw	r6,20(sp)
   45f5c:	003cb606 	br	45238 <__alt_data_end+0xfffc5238>
   45f60:	d9001217 	ldw	r4,72(sp)
   45f64:	d9000515 	stw	r4,20(sp)
   45f68:	003c0506 	br	44f80 <__alt_data_end+0xfffc4f80>
   45f6c:	d9800d17 	ldw	r6,52(sp)
   45f70:	d9800615 	stw	r6,24(sp)
   45f74:	003e8306 	br	45984 <__alt_data_end+0xfffc5984>
   45f78:	d9800317 	ldw	r6,12(sp)
   45f7c:	00800084 	movi	r2,2
   45f80:	11800216 	blt	r2,r6,45f8c <_dtoa_r+0x16c4>
   45f84:	d8800d17 	ldw	r2,52(sp)
   45f88:	003da606 	br	45624 <__alt_data_end+0xfffc5624>
   45f8c:	d8800d17 	ldw	r2,52(sp)
   45f90:	d8800615 	stw	r2,24(sp)
   45f94:	003e7b06 	br	45984 <__alt_data_end+0xfffc5984>
   45f98:	05000044 	movi	r20,1
   45f9c:	003b0506 	br	44bb4 <__alt_data_end+0xfffc4bb4>
   45fa0:	8009883a 	mov	r4,r16
   45fa4:	80001115 	stw	zero,68(r16)
   45fa8:	000b883a 	mov	r5,zero
   45fac:	0047f040 	call	47f04 <_Balloc>
   45fb0:	d8800715 	stw	r2,28(sp)
   45fb4:	d8c00717 	ldw	r3,28(sp)
   45fb8:	00bfffc4 	movi	r2,-1
   45fbc:	01000044 	movi	r4,1
   45fc0:	d8800615 	stw	r2,24(sp)
   45fc4:	80c01015 	stw	r3,64(r16)
   45fc8:	d9000b15 	stw	r4,44(sp)
   45fcc:	d8002215 	stw	zero,136(sp)
   45fd0:	d8800d15 	stw	r2,52(sp)
   45fd4:	003c1906 	br	4503c <__alt_data_end+0xfffc503c>
   45fd8:	193d2926 	beq	r3,r4,45480 <__alt_data_end+0xfffc5480>
   45fdc:	00c00f04 	movi	r3,60
   45fe0:	1885c83a 	sub	r2,r3,r2
   45fe4:	003d7b06 	br	455d4 <__alt_data_end+0xfffc55d4>
   45fe8:	000b883a 	mov	r5,zero
   45fec:	003b1006 	br	44c30 <__alt_data_end+0xfffc4c30>

00045ff0 <_fflush_r>:
   45ff0:	defffb04 	addi	sp,sp,-20
   45ff4:	dcc00315 	stw	r19,12(sp)
   45ff8:	dc000015 	stw	r16,0(sp)
   45ffc:	dfc00415 	stw	ra,16(sp)
   46000:	dc800215 	stw	r18,8(sp)
   46004:	dc400115 	stw	r17,4(sp)
   46008:	2027883a 	mov	r19,r4
   4600c:	2821883a 	mov	r16,r5
   46010:	20000226 	beq	r4,zero,4601c <_fflush_r+0x2c>
   46014:	20800e17 	ldw	r2,56(r4)
   46018:	10005326 	beq	r2,zero,46168 <_fflush_r+0x178>
   4601c:	8080030b 	ldhu	r2,12(r16)
   46020:	10ffffcc 	andi	r3,r2,65535
   46024:	18e0001c 	xori	r3,r3,32768
   46028:	18e00004 	addi	r3,r3,-32768
   4602c:	18002c26 	beq	r3,zero,460e0 <_fflush_r+0xf0>
   46030:	10c0020c 	andi	r3,r2,8
   46034:	1800321e 	bne	r3,zero,46100 <_fflush_r+0x110>
   46038:	80c00117 	ldw	r3,4(r16)
   4603c:	10820014 	ori	r2,r2,2048
   46040:	8080030d 	sth	r2,12(r16)
   46044:	00c0570e 	bge	zero,r3,461a4 <_fflush_r+0x1b4>
   46048:	82000a17 	ldw	r8,40(r16)
   4604c:	40002426 	beq	r8,zero,460e0 <_fflush_r+0xf0>
   46050:	9c400017 	ldw	r17,0(r19)
   46054:	10c4000c 	andi	r3,r2,4096
   46058:	98000015 	stw	zero,0(r19)
   4605c:	18004626 	beq	r3,zero,46178 <_fflush_r+0x188>
   46060:	81801417 	ldw	r6,80(r16)
   46064:	10c0010c 	andi	r3,r2,4
   46068:	18000626 	beq	r3,zero,46084 <_fflush_r+0x94>
   4606c:	80c00117 	ldw	r3,4(r16)
   46070:	80800c17 	ldw	r2,48(r16)
   46074:	30cdc83a 	sub	r6,r6,r3
   46078:	10000226 	beq	r2,zero,46084 <_fflush_r+0x94>
   4607c:	80800f17 	ldw	r2,60(r16)
   46080:	308dc83a 	sub	r6,r6,r2
   46084:	81400717 	ldw	r5,28(r16)
   46088:	9809883a 	mov	r4,r19
   4608c:	000f883a 	mov	r7,zero
   46090:	403ee83a 	callr	r8
   46094:	00ffffc4 	movi	r3,-1
   46098:	10c04526 	beq	r2,r3,461b0 <_fflush_r+0x1c0>
   4609c:	80c0030b 	ldhu	r3,12(r16)
   460a0:	81000417 	ldw	r4,16(r16)
   460a4:	80000115 	stw	zero,4(r16)
   460a8:	197dffcc 	andi	r5,r3,63487
   460ac:	8140030d 	sth	r5,12(r16)
   460b0:	81000015 	stw	r4,0(r16)
   460b4:	18c4000c 	andi	r3,r3,4096
   460b8:	18000126 	beq	r3,zero,460c0 <_fflush_r+0xd0>
   460bc:	80801415 	stw	r2,80(r16)
   460c0:	81400c17 	ldw	r5,48(r16)
   460c4:	9c400015 	stw	r17,0(r19)
   460c8:	28000526 	beq	r5,zero,460e0 <_fflush_r+0xf0>
   460cc:	80801004 	addi	r2,r16,64
   460d0:	28800226 	beq	r5,r2,460dc <_fflush_r+0xec>
   460d4:	9809883a 	mov	r4,r19
   460d8:	00467200 	call	46720 <_free_r>
   460dc:	80000c15 	stw	zero,48(r16)
   460e0:	0005883a 	mov	r2,zero
   460e4:	dfc00417 	ldw	ra,16(sp)
   460e8:	dcc00317 	ldw	r19,12(sp)
   460ec:	dc800217 	ldw	r18,8(sp)
   460f0:	dc400117 	ldw	r17,4(sp)
   460f4:	dc000017 	ldw	r16,0(sp)
   460f8:	dec00504 	addi	sp,sp,20
   460fc:	f800283a 	ret
   46100:	84800417 	ldw	r18,16(r16)
   46104:	903ff626 	beq	r18,zero,460e0 <__alt_data_end+0xfffc60e0>
   46108:	84400017 	ldw	r17,0(r16)
   4610c:	108000cc 	andi	r2,r2,3
   46110:	84800015 	stw	r18,0(r16)
   46114:	8ca3c83a 	sub	r17,r17,r18
   46118:	10001526 	beq	r2,zero,46170 <_fflush_r+0x180>
   4611c:	0005883a 	mov	r2,zero
   46120:	80800215 	stw	r2,8(r16)
   46124:	04400316 	blt	zero,r17,46134 <_fflush_r+0x144>
   46128:	003fed06 	br	460e0 <__alt_data_end+0xfffc60e0>
   4612c:	90a5883a 	add	r18,r18,r2
   46130:	047feb0e 	bge	zero,r17,460e0 <__alt_data_end+0xfffc60e0>
   46134:	80800917 	ldw	r2,36(r16)
   46138:	81400717 	ldw	r5,28(r16)
   4613c:	880f883a 	mov	r7,r17
   46140:	900d883a 	mov	r6,r18
   46144:	9809883a 	mov	r4,r19
   46148:	103ee83a 	callr	r2
   4614c:	88a3c83a 	sub	r17,r17,r2
   46150:	00bff616 	blt	zero,r2,4612c <__alt_data_end+0xfffc612c>
   46154:	80c0030b 	ldhu	r3,12(r16)
   46158:	00bfffc4 	movi	r2,-1
   4615c:	18c01014 	ori	r3,r3,64
   46160:	80c0030d 	sth	r3,12(r16)
   46164:	003fdf06 	br	460e4 <__alt_data_end+0xfffc60e4>
   46168:	00465ac0 	call	465ac <__sinit>
   4616c:	003fab06 	br	4601c <__alt_data_end+0xfffc601c>
   46170:	80800517 	ldw	r2,20(r16)
   46174:	003fea06 	br	46120 <__alt_data_end+0xfffc6120>
   46178:	81400717 	ldw	r5,28(r16)
   4617c:	000d883a 	mov	r6,zero
   46180:	9809883a 	mov	r4,r19
   46184:	01c00044 	movi	r7,1
   46188:	403ee83a 	callr	r8
   4618c:	100d883a 	mov	r6,r2
   46190:	00bfffc4 	movi	r2,-1
   46194:	30801326 	beq	r6,r2,461e4 <_fflush_r+0x1f4>
   46198:	8080030b 	ldhu	r2,12(r16)
   4619c:	82000a17 	ldw	r8,40(r16)
   461a0:	003fb006 	br	46064 <__alt_data_end+0xfffc6064>
   461a4:	80c00f17 	ldw	r3,60(r16)
   461a8:	00ffa716 	blt	zero,r3,46048 <__alt_data_end+0xfffc6048>
   461ac:	003fcc06 	br	460e0 <__alt_data_end+0xfffc60e0>
   461b0:	98c00017 	ldw	r3,0(r19)
   461b4:	183fb926 	beq	r3,zero,4609c <__alt_data_end+0xfffc609c>
   461b8:	01000744 	movi	r4,29
   461bc:	19000226 	beq	r3,r4,461c8 <_fflush_r+0x1d8>
   461c0:	01000584 	movi	r4,22
   461c4:	1900101e 	bne	r3,r4,46208 <_fflush_r+0x218>
   461c8:	8080030b 	ldhu	r2,12(r16)
   461cc:	80c00417 	ldw	r3,16(r16)
   461d0:	80000115 	stw	zero,4(r16)
   461d4:	10bdffcc 	andi	r2,r2,63487
   461d8:	8080030d 	sth	r2,12(r16)
   461dc:	80c00015 	stw	r3,0(r16)
   461e0:	003fb706 	br	460c0 <__alt_data_end+0xfffc60c0>
   461e4:	98800017 	ldw	r2,0(r19)
   461e8:	103feb26 	beq	r2,zero,46198 <__alt_data_end+0xfffc6198>
   461ec:	00c00744 	movi	r3,29
   461f0:	10c00226 	beq	r2,r3,461fc <_fflush_r+0x20c>
   461f4:	00c00584 	movi	r3,22
   461f8:	10ffd61e 	bne	r2,r3,46154 <__alt_data_end+0xfffc6154>
   461fc:	9c400015 	stw	r17,0(r19)
   46200:	0005883a 	mov	r2,zero
   46204:	003fb706 	br	460e4 <__alt_data_end+0xfffc60e4>
   46208:	80c0030b 	ldhu	r3,12(r16)
   4620c:	18c01014 	ori	r3,r3,64
   46210:	80c0030d 	sth	r3,12(r16)
   46214:	003fb306 	br	460e4 <__alt_data_end+0xfffc60e4>

00046218 <fflush>:
   46218:	20000526 	beq	r4,zero,46230 <fflush+0x18>
   4621c:	00800174 	movhi	r2,5
   46220:	108e5d04 	addi	r2,r2,14708
   46224:	200b883a 	mov	r5,r4
   46228:	11000017 	ldw	r4,0(r2)
   4622c:	0045ff01 	jmpi	45ff0 <_fflush_r>
   46230:	00800174 	movhi	r2,5
   46234:	108e5c04 	addi	r2,r2,14704
   46238:	11000017 	ldw	r4,0(r2)
   4623c:	01400134 	movhi	r5,4
   46240:	2957fc04 	addi	r5,r5,24560
   46244:	0046f6c1 	jmpi	46f6c <_fwalk_reent>

00046248 <__fp_lock>:
   46248:	0005883a 	mov	r2,zero
   4624c:	f800283a 	ret

00046250 <__fp_unlock>:
   46250:	0005883a 	mov	r2,zero
   46254:	f800283a 	ret

00046258 <_cleanup_r>:
   46258:	01400174 	movhi	r5,5
   4625c:	296bde04 	addi	r5,r5,-20616
   46260:	0046eb41 	jmpi	46eb4 <_fwalk>

00046264 <__sinit.part.1>:
   46264:	defff604 	addi	sp,sp,-40
   46268:	00c00134 	movhi	r3,4
   4626c:	dfc00915 	stw	ra,36(sp)
   46270:	df000815 	stw	fp,32(sp)
   46274:	ddc00715 	stw	r23,28(sp)
   46278:	dd800615 	stw	r22,24(sp)
   4627c:	dd400515 	stw	r21,20(sp)
   46280:	dd000415 	stw	r20,16(sp)
   46284:	dcc00315 	stw	r19,12(sp)
   46288:	dc800215 	stw	r18,8(sp)
   4628c:	dc400115 	stw	r17,4(sp)
   46290:	dc000015 	stw	r16,0(sp)
   46294:	18d89604 	addi	r3,r3,25176
   46298:	24000117 	ldw	r16,4(r4)
   4629c:	20c00f15 	stw	r3,60(r4)
   462a0:	07000044 	movi	fp,1
   462a4:	00c000c4 	movi	r3,3
   462a8:	2080bb04 	addi	r2,r4,748
   462ac:	20c0b915 	stw	r3,740(r4)
   462b0:	27000e15 	stw	fp,56(r4)
   462b4:	2080ba15 	stw	r2,744(r4)
   462b8:	2000b815 	stw	zero,736(r4)
   462bc:	05c00204 	movi	r23,8
   462c0:	00800104 	movi	r2,4
   462c4:	2025883a 	mov	r18,r4
   462c8:	b80d883a 	mov	r6,r23
   462cc:	81001704 	addi	r4,r16,92
   462d0:	000b883a 	mov	r5,zero
   462d4:	80000015 	stw	zero,0(r16)
   462d8:	80000115 	stw	zero,4(r16)
   462dc:	80000215 	stw	zero,8(r16)
   462e0:	8080030d 	sth	r2,12(r16)
   462e4:	80001915 	stw	zero,100(r16)
   462e8:	8000038d 	sth	zero,14(r16)
   462ec:	80000415 	stw	zero,16(r16)
   462f0:	80000515 	stw	zero,20(r16)
   462f4:	80000615 	stw	zero,24(r16)
   462f8:	0047de00 	call	47de0 <memset>
   462fc:	05800174 	movhi	r22,5
   46300:	94400217 	ldw	r17,8(r18)
   46304:	05400174 	movhi	r21,5
   46308:	05000174 	movhi	r20,5
   4630c:	04c00174 	movhi	r19,5
   46310:	b5a56d04 	addi	r22,r22,-27212
   46314:	ad658404 	addi	r21,r21,-27120
   46318:	a525a304 	addi	r20,r20,-26996
   4631c:	9ce5ba04 	addi	r19,r19,-26904
   46320:	85800815 	stw	r22,32(r16)
   46324:	85400915 	stw	r21,36(r16)
   46328:	85000a15 	stw	r20,40(r16)
   4632c:	84c00b15 	stw	r19,44(r16)
   46330:	84000715 	stw	r16,28(r16)
   46334:	00800284 	movi	r2,10
   46338:	89001704 	addi	r4,r17,92
   4633c:	b80d883a 	mov	r6,r23
   46340:	000b883a 	mov	r5,zero
   46344:	88000015 	stw	zero,0(r17)
   46348:	88000115 	stw	zero,4(r17)
   4634c:	88000215 	stw	zero,8(r17)
   46350:	8880030d 	sth	r2,12(r17)
   46354:	88001915 	stw	zero,100(r17)
   46358:	8f00038d 	sth	fp,14(r17)
   4635c:	88000415 	stw	zero,16(r17)
   46360:	88000515 	stw	zero,20(r17)
   46364:	88000615 	stw	zero,24(r17)
   46368:	0047de00 	call	47de0 <memset>
   4636c:	94000317 	ldw	r16,12(r18)
   46370:	00800484 	movi	r2,18
   46374:	8c400715 	stw	r17,28(r17)
   46378:	8d800815 	stw	r22,32(r17)
   4637c:	8d400915 	stw	r21,36(r17)
   46380:	8d000a15 	stw	r20,40(r17)
   46384:	8cc00b15 	stw	r19,44(r17)
   46388:	8080030d 	sth	r2,12(r16)
   4638c:	00800084 	movi	r2,2
   46390:	80000015 	stw	zero,0(r16)
   46394:	80000115 	stw	zero,4(r16)
   46398:	80000215 	stw	zero,8(r16)
   4639c:	80001915 	stw	zero,100(r16)
   463a0:	8080038d 	sth	r2,14(r16)
   463a4:	80000415 	stw	zero,16(r16)
   463a8:	80000515 	stw	zero,20(r16)
   463ac:	80000615 	stw	zero,24(r16)
   463b0:	81001704 	addi	r4,r16,92
   463b4:	000b883a 	mov	r5,zero
   463b8:	b80d883a 	mov	r6,r23
   463bc:	0047de00 	call	47de0 <memset>
   463c0:	84000715 	stw	r16,28(r16)
   463c4:	85800815 	stw	r22,32(r16)
   463c8:	85400915 	stw	r21,36(r16)
   463cc:	85000a15 	stw	r20,40(r16)
   463d0:	84c00b15 	stw	r19,44(r16)
   463d4:	dfc00917 	ldw	ra,36(sp)
   463d8:	df000817 	ldw	fp,32(sp)
   463dc:	ddc00717 	ldw	r23,28(sp)
   463e0:	dd800617 	ldw	r22,24(sp)
   463e4:	dd400517 	ldw	r21,20(sp)
   463e8:	dd000417 	ldw	r20,16(sp)
   463ec:	dcc00317 	ldw	r19,12(sp)
   463f0:	dc800217 	ldw	r18,8(sp)
   463f4:	dc400117 	ldw	r17,4(sp)
   463f8:	dc000017 	ldw	r16,0(sp)
   463fc:	dec00a04 	addi	sp,sp,40
   46400:	f800283a 	ret

00046404 <__sfmoreglue>:
   46404:	defffc04 	addi	sp,sp,-16
   46408:	dc800215 	stw	r18,8(sp)
   4640c:	2825883a 	mov	r18,r5
   46410:	dc000015 	stw	r16,0(sp)
   46414:	01401a04 	movi	r5,104
   46418:	2021883a 	mov	r16,r4
   4641c:	9009883a 	mov	r4,r18
   46420:	dfc00315 	stw	ra,12(sp)
   46424:	dc400115 	stw	r17,4(sp)
   46428:	004c3c40 	call	4c3c4 <__mulsi3>
   4642c:	8009883a 	mov	r4,r16
   46430:	11400304 	addi	r5,r2,12
   46434:	1023883a 	mov	r17,r2
   46438:	00472bc0 	call	472bc <_malloc_r>
   4643c:	1021883a 	mov	r16,r2
   46440:	10000726 	beq	r2,zero,46460 <__sfmoreglue+0x5c>
   46444:	11000304 	addi	r4,r2,12
   46448:	10000015 	stw	zero,0(r2)
   4644c:	14800115 	stw	r18,4(r2)
   46450:	11000215 	stw	r4,8(r2)
   46454:	000b883a 	mov	r5,zero
   46458:	880d883a 	mov	r6,r17
   4645c:	0047de00 	call	47de0 <memset>
   46460:	8005883a 	mov	r2,r16
   46464:	dfc00317 	ldw	ra,12(sp)
   46468:	dc800217 	ldw	r18,8(sp)
   4646c:	dc400117 	ldw	r17,4(sp)
   46470:	dc000017 	ldw	r16,0(sp)
   46474:	dec00404 	addi	sp,sp,16
   46478:	f800283a 	ret

0004647c <__sfp>:
   4647c:	00800174 	movhi	r2,5
   46480:	defffb04 	addi	sp,sp,-20
   46484:	108e5c04 	addi	r2,r2,14704
   46488:	dc800215 	stw	r18,8(sp)
   4648c:	14800017 	ldw	r18,0(r2)
   46490:	dcc00315 	stw	r19,12(sp)
   46494:	dfc00415 	stw	ra,16(sp)
   46498:	90800e17 	ldw	r2,56(r18)
   4649c:	dc400115 	stw	r17,4(sp)
   464a0:	dc000015 	stw	r16,0(sp)
   464a4:	2027883a 	mov	r19,r4
   464a8:	1000021e 	bne	r2,zero,464b4 <__sfp+0x38>
   464ac:	9009883a 	mov	r4,r18
   464b0:	00462640 	call	46264 <__sinit.part.1>
   464b4:	9480b804 	addi	r18,r18,736
   464b8:	047fffc4 	movi	r17,-1
   464bc:	91400117 	ldw	r5,4(r18)
   464c0:	94000217 	ldw	r16,8(r18)
   464c4:	297fffc4 	addi	r5,r5,-1
   464c8:	28000a16 	blt	r5,zero,464f4 <__sfp+0x78>
   464cc:	8080030f 	ldh	r2,12(r16)
   464d0:	10000c26 	beq	r2,zero,46504 <__sfp+0x88>
   464d4:	80c01d04 	addi	r3,r16,116
   464d8:	00000206 	br	464e4 <__sfp+0x68>
   464dc:	18bfe60f 	ldh	r2,-104(r3)
   464e0:	10000826 	beq	r2,zero,46504 <__sfp+0x88>
   464e4:	297fffc4 	addi	r5,r5,-1
   464e8:	1c3ffd04 	addi	r16,r3,-12
   464ec:	18c01a04 	addi	r3,r3,104
   464f0:	2c7ffa1e 	bne	r5,r17,464dc <__alt_data_end+0xfffc64dc>
   464f4:	90800017 	ldw	r2,0(r18)
   464f8:	10001d26 	beq	r2,zero,46570 <__sfp+0xf4>
   464fc:	1025883a 	mov	r18,r2
   46500:	003fee06 	br	464bc <__alt_data_end+0xfffc64bc>
   46504:	00bfffc4 	movi	r2,-1
   46508:	8080038d 	sth	r2,14(r16)
   4650c:	00800044 	movi	r2,1
   46510:	8080030d 	sth	r2,12(r16)
   46514:	80001915 	stw	zero,100(r16)
   46518:	80000015 	stw	zero,0(r16)
   4651c:	80000215 	stw	zero,8(r16)
   46520:	80000115 	stw	zero,4(r16)
   46524:	80000415 	stw	zero,16(r16)
   46528:	80000515 	stw	zero,20(r16)
   4652c:	80000615 	stw	zero,24(r16)
   46530:	81001704 	addi	r4,r16,92
   46534:	000b883a 	mov	r5,zero
   46538:	01800204 	movi	r6,8
   4653c:	0047de00 	call	47de0 <memset>
   46540:	8005883a 	mov	r2,r16
   46544:	80000c15 	stw	zero,48(r16)
   46548:	80000d15 	stw	zero,52(r16)
   4654c:	80001115 	stw	zero,68(r16)
   46550:	80001215 	stw	zero,72(r16)
   46554:	dfc00417 	ldw	ra,16(sp)
   46558:	dcc00317 	ldw	r19,12(sp)
   4655c:	dc800217 	ldw	r18,8(sp)
   46560:	dc400117 	ldw	r17,4(sp)
   46564:	dc000017 	ldw	r16,0(sp)
   46568:	dec00504 	addi	sp,sp,20
   4656c:	f800283a 	ret
   46570:	9809883a 	mov	r4,r19
   46574:	01400104 	movi	r5,4
   46578:	00464040 	call	46404 <__sfmoreglue>
   4657c:	90800015 	stw	r2,0(r18)
   46580:	103fde1e 	bne	r2,zero,464fc <__alt_data_end+0xfffc64fc>
   46584:	00800304 	movi	r2,12
   46588:	98800015 	stw	r2,0(r19)
   4658c:	0005883a 	mov	r2,zero
   46590:	003ff006 	br	46554 <__alt_data_end+0xfffc6554>

00046594 <_cleanup>:
   46594:	00800174 	movhi	r2,5
   46598:	108e5c04 	addi	r2,r2,14704
   4659c:	11000017 	ldw	r4,0(r2)
   465a0:	01400174 	movhi	r5,5
   465a4:	296bde04 	addi	r5,r5,-20616
   465a8:	0046eb41 	jmpi	46eb4 <_fwalk>

000465ac <__sinit>:
   465ac:	20800e17 	ldw	r2,56(r4)
   465b0:	10000126 	beq	r2,zero,465b8 <__sinit+0xc>
   465b4:	f800283a 	ret
   465b8:	00462641 	jmpi	46264 <__sinit.part.1>

000465bc <__sfp_lock_acquire>:
   465bc:	f800283a 	ret

000465c0 <__sfp_lock_release>:
   465c0:	f800283a 	ret

000465c4 <__sinit_lock_acquire>:
   465c4:	f800283a 	ret

000465c8 <__sinit_lock_release>:
   465c8:	f800283a 	ret

000465cc <__fp_lock_all>:
   465cc:	00800174 	movhi	r2,5
   465d0:	108e5d04 	addi	r2,r2,14708
   465d4:	11000017 	ldw	r4,0(r2)
   465d8:	01400134 	movhi	r5,4
   465dc:	29589204 	addi	r5,r5,25160
   465e0:	0046eb41 	jmpi	46eb4 <_fwalk>

000465e4 <__fp_unlock_all>:
   465e4:	00800174 	movhi	r2,5
   465e8:	108e5d04 	addi	r2,r2,14708
   465ec:	11000017 	ldw	r4,0(r2)
   465f0:	01400134 	movhi	r5,4
   465f4:	29589404 	addi	r5,r5,25168
   465f8:	0046eb41 	jmpi	46eb4 <_fwalk>

000465fc <_malloc_trim_r>:
   465fc:	defffb04 	addi	sp,sp,-20
   46600:	dcc00315 	stw	r19,12(sp)
   46604:	04c00174 	movhi	r19,5
   46608:	dc800215 	stw	r18,8(sp)
   4660c:	dc400115 	stw	r17,4(sp)
   46610:	dc000015 	stw	r16,0(sp)
   46614:	dfc00415 	stw	ra,16(sp)
   46618:	2821883a 	mov	r16,r5
   4661c:	9cc8d804 	addi	r19,r19,9056
   46620:	2025883a 	mov	r18,r4
   46624:	004f1c80 	call	4f1c8 <__malloc_lock>
   46628:	98800217 	ldw	r2,8(r19)
   4662c:	14400117 	ldw	r17,4(r2)
   46630:	00bfff04 	movi	r2,-4
   46634:	88a2703a 	and	r17,r17,r2
   46638:	8c21c83a 	sub	r16,r17,r16
   4663c:	8403fbc4 	addi	r16,r16,4079
   46640:	8020d33a 	srli	r16,r16,12
   46644:	0083ffc4 	movi	r2,4095
   46648:	843fffc4 	addi	r16,r16,-1
   4664c:	8020933a 	slli	r16,r16,12
   46650:	1400060e 	bge	r2,r16,4666c <_malloc_trim_r+0x70>
   46654:	9009883a 	mov	r4,r18
   46658:	000b883a 	mov	r5,zero
   4665c:	00495600 	call	49560 <_sbrk_r>
   46660:	98c00217 	ldw	r3,8(r19)
   46664:	1c47883a 	add	r3,r3,r17
   46668:	10c00a26 	beq	r2,r3,46694 <_malloc_trim_r+0x98>
   4666c:	9009883a 	mov	r4,r18
   46670:	004f1e80 	call	4f1e8 <__malloc_unlock>
   46674:	0005883a 	mov	r2,zero
   46678:	dfc00417 	ldw	ra,16(sp)
   4667c:	dcc00317 	ldw	r19,12(sp)
   46680:	dc800217 	ldw	r18,8(sp)
   46684:	dc400117 	ldw	r17,4(sp)
   46688:	dc000017 	ldw	r16,0(sp)
   4668c:	dec00504 	addi	sp,sp,20
   46690:	f800283a 	ret
   46694:	9009883a 	mov	r4,r18
   46698:	040bc83a 	sub	r5,zero,r16
   4669c:	00495600 	call	49560 <_sbrk_r>
   466a0:	00ffffc4 	movi	r3,-1
   466a4:	10c00d26 	beq	r2,r3,466dc <_malloc_trim_r+0xe0>
   466a8:	00c00174 	movhi	r3,5
   466ac:	18d53504 	addi	r3,r3,21716
   466b0:	18800017 	ldw	r2,0(r3)
   466b4:	99000217 	ldw	r4,8(r19)
   466b8:	8c23c83a 	sub	r17,r17,r16
   466bc:	8c400054 	ori	r17,r17,1
   466c0:	1421c83a 	sub	r16,r2,r16
   466c4:	24400115 	stw	r17,4(r4)
   466c8:	9009883a 	mov	r4,r18
   466cc:	1c000015 	stw	r16,0(r3)
   466d0:	004f1e80 	call	4f1e8 <__malloc_unlock>
   466d4:	00800044 	movi	r2,1
   466d8:	003fe706 	br	46678 <__alt_data_end+0xfffc6678>
   466dc:	9009883a 	mov	r4,r18
   466e0:	000b883a 	mov	r5,zero
   466e4:	00495600 	call	49560 <_sbrk_r>
   466e8:	99000217 	ldw	r4,8(r19)
   466ec:	014003c4 	movi	r5,15
   466f0:	1107c83a 	sub	r3,r2,r4
   466f4:	28ffdd0e 	bge	r5,r3,4666c <__alt_data_end+0xfffc666c>
   466f8:	01400174 	movhi	r5,5
   466fc:	294e5f04 	addi	r5,r5,14716
   46700:	29400017 	ldw	r5,0(r5)
   46704:	18c00054 	ori	r3,r3,1
   46708:	20c00115 	stw	r3,4(r4)
   4670c:	00c00174 	movhi	r3,5
   46710:	1145c83a 	sub	r2,r2,r5
   46714:	18d53504 	addi	r3,r3,21716
   46718:	18800015 	stw	r2,0(r3)
   4671c:	003fd306 	br	4666c <__alt_data_end+0xfffc666c>

00046720 <_free_r>:
   46720:	28004c26 	beq	r5,zero,46854 <_free_r+0x134>
   46724:	defffd04 	addi	sp,sp,-12
   46728:	dc400115 	stw	r17,4(sp)
   4672c:	dc000015 	stw	r16,0(sp)
   46730:	2023883a 	mov	r17,r4
   46734:	2821883a 	mov	r16,r5
   46738:	dfc00215 	stw	ra,8(sp)
   4673c:	004f1c80 	call	4f1c8 <__malloc_lock>
   46740:	813fff17 	ldw	r4,-4(r16)
   46744:	00bfff84 	movi	r2,-2
   46748:	02400174 	movhi	r9,5
   4674c:	81bffe04 	addi	r6,r16,-8
   46750:	2084703a 	and	r2,r4,r2
   46754:	4a48d804 	addi	r9,r9,9056
   46758:	308b883a 	add	r5,r6,r2
   4675c:	2a000117 	ldw	r8,4(r5)
   46760:	49c00217 	ldw	r7,8(r9)
   46764:	00ffff04 	movi	r3,-4
   46768:	40c6703a 	and	r3,r8,r3
   4676c:	39405326 	beq	r7,r5,468bc <_free_r+0x19c>
   46770:	28c00115 	stw	r3,4(r5)
   46774:	2100004c 	andi	r4,r4,1
   46778:	2000091e 	bne	r4,zero,467a0 <_free_r+0x80>
   4677c:	81fffe17 	ldw	r7,-8(r16)
   46780:	4a000204 	addi	r8,r9,8
   46784:	31cdc83a 	sub	r6,r6,r7
   46788:	31000217 	ldw	r4,8(r6)
   4678c:	11c5883a 	add	r2,r2,r7
   46790:	22006126 	beq	r4,r8,46918 <_free_r+0x1f8>
   46794:	31c00317 	ldw	r7,12(r6)
   46798:	21c00315 	stw	r7,12(r4)
   4679c:	39000215 	stw	r4,8(r7)
   467a0:	28c9883a 	add	r4,r5,r3
   467a4:	21c00117 	ldw	r7,4(r4)
   467a8:	39c0004c 	andi	r7,r7,1
   467ac:	38000d1e 	bne	r7,zero,467e4 <_free_r+0xc4>
   467b0:	29000217 	ldw	r4,8(r5)
   467b4:	10c5883a 	add	r2,r2,r3
   467b8:	00c00174 	movhi	r3,5
   467bc:	18c8da04 	addi	r3,r3,9064
   467c0:	20c07526 	beq	r4,r3,46998 <_free_r+0x278>
   467c4:	29c00317 	ldw	r7,12(r5)
   467c8:	11400054 	ori	r5,r2,1
   467cc:	3087883a 	add	r3,r6,r2
   467d0:	21c00315 	stw	r7,12(r4)
   467d4:	39000215 	stw	r4,8(r7)
   467d8:	31400115 	stw	r5,4(r6)
   467dc:	18800015 	stw	r2,0(r3)
   467e0:	00000406 	br	467f4 <_free_r+0xd4>
   467e4:	10c00054 	ori	r3,r2,1
   467e8:	30c00115 	stw	r3,4(r6)
   467ec:	3087883a 	add	r3,r6,r2
   467f0:	18800015 	stw	r2,0(r3)
   467f4:	00c07fc4 	movi	r3,511
   467f8:	18801736 	bltu	r3,r2,46858 <_free_r+0x138>
   467fc:	1004d0fa 	srli	r2,r2,3
   46800:	01400044 	movi	r5,1
   46804:	49000117 	ldw	r4,4(r9)
   46808:	1087883a 	add	r3,r2,r2
   4680c:	18c7883a 	add	r3,r3,r3
   46810:	1005d0ba 	srai	r2,r2,2
   46814:	18c7883a 	add	r3,r3,r3
   46818:	1a47883a 	add	r3,r3,r9
   4681c:	19c00217 	ldw	r7,8(r3)
   46820:	2884983a 	sll	r2,r5,r2
   46824:	30c00315 	stw	r3,12(r6)
   46828:	31c00215 	stw	r7,8(r6)
   4682c:	1104b03a 	or	r2,r2,r4
   46830:	19800215 	stw	r6,8(r3)
   46834:	48800115 	stw	r2,4(r9)
   46838:	39800315 	stw	r6,12(r7)
   4683c:	8809883a 	mov	r4,r17
   46840:	dfc00217 	ldw	ra,8(sp)
   46844:	dc400117 	ldw	r17,4(sp)
   46848:	dc000017 	ldw	r16,0(sp)
   4684c:	dec00304 	addi	sp,sp,12
   46850:	004f1e81 	jmpi	4f1e8 <__malloc_unlock>
   46854:	f800283a 	ret
   46858:	1006d27a 	srli	r3,r2,9
   4685c:	01000104 	movi	r4,4
   46860:	20c04036 	bltu	r4,r3,46964 <_free_r+0x244>
   46864:	1006d1ba 	srli	r3,r2,6
   46868:	19400e04 	addi	r5,r3,56
   4686c:	2947883a 	add	r3,r5,r5
   46870:	18c7883a 	add	r3,r3,r3
   46874:	18c7883a 	add	r3,r3,r3
   46878:	1a49883a 	add	r4,r3,r9
   4687c:	20c00217 	ldw	r3,8(r4)
   46880:	01c00174 	movhi	r7,5
   46884:	39c8d804 	addi	r7,r7,9056
   46888:	19003b26 	beq	r3,r4,46978 <_free_r+0x258>
   4688c:	01ffff04 	movi	r7,-4
   46890:	19400117 	ldw	r5,4(r3)
   46894:	29ca703a 	and	r5,r5,r7
   46898:	1140022e 	bgeu	r2,r5,468a4 <_free_r+0x184>
   4689c:	18c00217 	ldw	r3,8(r3)
   468a0:	20fffb1e 	bne	r4,r3,46890 <__alt_data_end+0xfffc6890>
   468a4:	18800317 	ldw	r2,12(r3)
   468a8:	30800315 	stw	r2,12(r6)
   468ac:	30c00215 	stw	r3,8(r6)
   468b0:	11800215 	stw	r6,8(r2)
   468b4:	19800315 	stw	r6,12(r3)
   468b8:	003fe006 	br	4683c <__alt_data_end+0xfffc683c>
   468bc:	2100004c 	andi	r4,r4,1
   468c0:	1885883a 	add	r2,r3,r2
   468c4:	2000071e 	bne	r4,zero,468e4 <_free_r+0x1c4>
   468c8:	817ffe17 	ldw	r5,-8(r16)
   468cc:	314dc83a 	sub	r6,r6,r5
   468d0:	30c00317 	ldw	r3,12(r6)
   468d4:	31000217 	ldw	r4,8(r6)
   468d8:	1145883a 	add	r2,r2,r5
   468dc:	20c00315 	stw	r3,12(r4)
   468e0:	19000215 	stw	r4,8(r3)
   468e4:	10c00054 	ori	r3,r2,1
   468e8:	30c00115 	stw	r3,4(r6)
   468ec:	00c00174 	movhi	r3,5
   468f0:	18ce6004 	addi	r3,r3,14720
   468f4:	18c00017 	ldw	r3,0(r3)
   468f8:	49800215 	stw	r6,8(r9)
   468fc:	10ffcf36 	bltu	r2,r3,4683c <__alt_data_end+0xfffc683c>
   46900:	00800174 	movhi	r2,5
   46904:	10952d04 	addi	r2,r2,21684
   46908:	11400017 	ldw	r5,0(r2)
   4690c:	8809883a 	mov	r4,r17
   46910:	00465fc0 	call	465fc <_malloc_trim_r>
   46914:	003fc906 	br	4683c <__alt_data_end+0xfffc683c>
   46918:	28c9883a 	add	r4,r5,r3
   4691c:	21000117 	ldw	r4,4(r4)
   46920:	2100004c 	andi	r4,r4,1
   46924:	20000a1e 	bne	r4,zero,46950 <_free_r+0x230>
   46928:	29000317 	ldw	r4,12(r5)
   4692c:	29400217 	ldw	r5,8(r5)
   46930:	10c5883a 	add	r2,r2,r3
   46934:	10c00054 	ori	r3,r2,1
   46938:	29000315 	stw	r4,12(r5)
   4693c:	21400215 	stw	r5,8(r4)
   46940:	30c00115 	stw	r3,4(r6)
   46944:	308d883a 	add	r6,r6,r2
   46948:	30800015 	stw	r2,0(r6)
   4694c:	003fbb06 	br	4683c <__alt_data_end+0xfffc683c>
   46950:	10c00054 	ori	r3,r2,1
   46954:	30c00115 	stw	r3,4(r6)
   46958:	308d883a 	add	r6,r6,r2
   4695c:	30800015 	stw	r2,0(r6)
   46960:	003fb606 	br	4683c <__alt_data_end+0xfffc683c>
   46964:	01000504 	movi	r4,20
   46968:	20c01436 	bltu	r4,r3,469bc <_free_r+0x29c>
   4696c:	194016c4 	addi	r5,r3,91
   46970:	2947883a 	add	r3,r5,r5
   46974:	003fbe06 	br	46870 <__alt_data_end+0xfffc6870>
   46978:	280bd0ba 	srai	r5,r5,2
   4697c:	00800044 	movi	r2,1
   46980:	39000117 	ldw	r4,4(r7)
   46984:	114a983a 	sll	r5,r2,r5
   46988:	1805883a 	mov	r2,r3
   4698c:	2908b03a 	or	r4,r5,r4
   46990:	39000115 	stw	r4,4(r7)
   46994:	003fc406 	br	468a8 <__alt_data_end+0xfffc68a8>
   46998:	49800515 	stw	r6,20(r9)
   4699c:	49800415 	stw	r6,16(r9)
   469a0:	10c00054 	ori	r3,r2,1
   469a4:	31000315 	stw	r4,12(r6)
   469a8:	31000215 	stw	r4,8(r6)
   469ac:	30c00115 	stw	r3,4(r6)
   469b0:	308d883a 	add	r6,r6,r2
   469b4:	30800015 	stw	r2,0(r6)
   469b8:	003fa006 	br	4683c <__alt_data_end+0xfffc683c>
   469bc:	01001504 	movi	r4,84
   469c0:	20c00436 	bltu	r4,r3,469d4 <_free_r+0x2b4>
   469c4:	1006d33a 	srli	r3,r2,12
   469c8:	19401b84 	addi	r5,r3,110
   469cc:	2947883a 	add	r3,r5,r5
   469d0:	003fa706 	br	46870 <__alt_data_end+0xfffc6870>
   469d4:	01005504 	movi	r4,340
   469d8:	20c00436 	bltu	r4,r3,469ec <_free_r+0x2cc>
   469dc:	1006d3fa 	srli	r3,r2,15
   469e0:	19401dc4 	addi	r5,r3,119
   469e4:	2947883a 	add	r3,r5,r5
   469e8:	003fa106 	br	46870 <__alt_data_end+0xfffc6870>
   469ec:	01015504 	movi	r4,1364
   469f0:	20c00436 	bltu	r4,r3,46a04 <_free_r+0x2e4>
   469f4:	1006d4ba 	srli	r3,r2,18
   469f8:	19401f04 	addi	r5,r3,124
   469fc:	2947883a 	add	r3,r5,r5
   46a00:	003f9b06 	br	46870 <__alt_data_end+0xfffc6870>
   46a04:	00c03f04 	movi	r3,252
   46a08:	01401f84 	movi	r5,126
   46a0c:	003f9806 	br	46870 <__alt_data_end+0xfffc6870>

00046a10 <__sfvwrite_r>:
   46a10:	30800217 	ldw	r2,8(r6)
   46a14:	10004526 	beq	r2,zero,46b2c <__sfvwrite_r+0x11c>
   46a18:	28c0030b 	ldhu	r3,12(r5)
   46a1c:	defff404 	addi	sp,sp,-48
   46a20:	dd400715 	stw	r21,28(sp)
   46a24:	dcc00515 	stw	r19,20(sp)
   46a28:	dc000215 	stw	r16,8(sp)
   46a2c:	dfc00b15 	stw	ra,44(sp)
   46a30:	df000a15 	stw	fp,40(sp)
   46a34:	ddc00915 	stw	r23,36(sp)
   46a38:	dd800815 	stw	r22,32(sp)
   46a3c:	dd000615 	stw	r20,24(sp)
   46a40:	dc800415 	stw	r18,16(sp)
   46a44:	dc400315 	stw	r17,12(sp)
   46a48:	1880020c 	andi	r2,r3,8
   46a4c:	2821883a 	mov	r16,r5
   46a50:	202b883a 	mov	r21,r4
   46a54:	3027883a 	mov	r19,r6
   46a58:	10002526 	beq	r2,zero,46af0 <__sfvwrite_r+0xe0>
   46a5c:	28800417 	ldw	r2,16(r5)
   46a60:	10002326 	beq	r2,zero,46af0 <__sfvwrite_r+0xe0>
   46a64:	1880008c 	andi	r2,r3,2
   46a68:	9c400017 	ldw	r17,0(r19)
   46a6c:	10003126 	beq	r2,zero,46b34 <__sfvwrite_r+0x124>
   46a70:	0029883a 	mov	r20,zero
   46a74:	0025883a 	mov	r18,zero
   46a78:	05810004 	movi	r22,1024
   46a7c:	a00d883a 	mov	r6,r20
   46a80:	a809883a 	mov	r4,r21
   46a84:	90002526 	beq	r18,zero,46b1c <__sfvwrite_r+0x10c>
   46a88:	900f883a 	mov	r7,r18
   46a8c:	81400717 	ldw	r5,28(r16)
   46a90:	b480012e 	bgeu	r22,r18,46a98 <__sfvwrite_r+0x88>
   46a94:	01c10004 	movi	r7,1024
   46a98:	80800917 	ldw	r2,36(r16)
   46a9c:	103ee83a 	callr	r2
   46aa0:	0080510e 	bge	zero,r2,46be8 <__sfvwrite_r+0x1d8>
   46aa4:	98c00217 	ldw	r3,8(r19)
   46aa8:	a0a9883a 	add	r20,r20,r2
   46aac:	90a5c83a 	sub	r18,r18,r2
   46ab0:	1885c83a 	sub	r2,r3,r2
   46ab4:	98800215 	stw	r2,8(r19)
   46ab8:	103ff01e 	bne	r2,zero,46a7c <__alt_data_end+0xfffc6a7c>
   46abc:	0005883a 	mov	r2,zero
   46ac0:	dfc00b17 	ldw	ra,44(sp)
   46ac4:	df000a17 	ldw	fp,40(sp)
   46ac8:	ddc00917 	ldw	r23,36(sp)
   46acc:	dd800817 	ldw	r22,32(sp)
   46ad0:	dd400717 	ldw	r21,28(sp)
   46ad4:	dd000617 	ldw	r20,24(sp)
   46ad8:	dcc00517 	ldw	r19,20(sp)
   46adc:	dc800417 	ldw	r18,16(sp)
   46ae0:	dc400317 	ldw	r17,12(sp)
   46ae4:	dc000217 	ldw	r16,8(sp)
   46ae8:	dec00c04 	addi	sp,sp,48
   46aec:	f800283a 	ret
   46af0:	a809883a 	mov	r4,r21
   46af4:	800b883a 	mov	r5,r16
   46af8:	00445700 	call	44570 <__swsetup_r>
   46afc:	80c0030b 	ldhu	r3,12(r16)
   46b00:	103fd826 	beq	r2,zero,46a64 <__alt_data_end+0xfffc6a64>
   46b04:	18c01014 	ori	r3,r3,64
   46b08:	80c0030d 	sth	r3,12(r16)
   46b0c:	00c00244 	movi	r3,9
   46b10:	00bfffc4 	movi	r2,-1
   46b14:	a8c00015 	stw	r3,0(r21)
   46b18:	003fe906 	br	46ac0 <__alt_data_end+0xfffc6ac0>
   46b1c:	8d000017 	ldw	r20,0(r17)
   46b20:	8c800117 	ldw	r18,4(r17)
   46b24:	8c400204 	addi	r17,r17,8
   46b28:	003fd406 	br	46a7c <__alt_data_end+0xfffc6a7c>
   46b2c:	0005883a 	mov	r2,zero
   46b30:	f800283a 	ret
   46b34:	1880004c 	andi	r2,r3,1
   46b38:	1000301e 	bne	r2,zero,46bfc <__sfvwrite_r+0x1ec>
   46b3c:	002f883a 	mov	r23,zero
   46b40:	0025883a 	mov	r18,zero
   46b44:	90001c26 	beq	r18,zero,46bb8 <__sfvwrite_r+0x1a8>
   46b48:	1880800c 	andi	r2,r3,512
   46b4c:	85000217 	ldw	r20,8(r16)
   46b50:	10006c26 	beq	r2,zero,46d04 <__sfvwrite_r+0x2f4>
   46b54:	a02d883a 	mov	r22,r20
   46b58:	95008536 	bltu	r18,r20,46d70 <__sfvwrite_r+0x360>
   46b5c:	1881200c 	andi	r2,r3,1152
   46b60:	10009d1e 	bne	r2,zero,46dd8 <__sfvwrite_r+0x3c8>
   46b64:	81000017 	ldw	r4,0(r16)
   46b68:	a039883a 	mov	fp,r20
   46b6c:	9029883a 	mov	r20,r18
   46b70:	b80b883a 	mov	r5,r23
   46b74:	b00d883a 	mov	r6,r22
   46b78:	0047c840 	call	47c84 <memmove>
   46b7c:	80c00217 	ldw	r3,8(r16)
   46b80:	81000017 	ldw	r4,0(r16)
   46b84:	9005883a 	mov	r2,r18
   46b88:	1f39c83a 	sub	fp,r3,fp
   46b8c:	258f883a 	add	r7,r4,r22
   46b90:	87000215 	stw	fp,8(r16)
   46b94:	81c00015 	stw	r7,0(r16)
   46b98:	98c00217 	ldw	r3,8(r19)
   46b9c:	b8af883a 	add	r23,r23,r2
   46ba0:	90a5c83a 	sub	r18,r18,r2
   46ba4:	1d05c83a 	sub	r2,r3,r20
   46ba8:	98800215 	stw	r2,8(r19)
   46bac:	103fc326 	beq	r2,zero,46abc <__alt_data_end+0xfffc6abc>
   46bb0:	80c0030b 	ldhu	r3,12(r16)
   46bb4:	903fe41e 	bne	r18,zero,46b48 <__alt_data_end+0xfffc6b48>
   46bb8:	8dc00017 	ldw	r23,0(r17)
   46bbc:	8c800117 	ldw	r18,4(r17)
   46bc0:	8c400204 	addi	r17,r17,8
   46bc4:	003fdf06 	br	46b44 <__alt_data_end+0xfffc6b44>
   46bc8:	0048f4c0 	call	48f4c <_realloc_r>
   46bcc:	102d883a 	mov	r22,r2
   46bd0:	1000a01e 	bne	r2,zero,46e54 <__sfvwrite_r+0x444>
   46bd4:	81400417 	ldw	r5,16(r16)
   46bd8:	a809883a 	mov	r4,r21
   46bdc:	00467200 	call	46720 <_free_r>
   46be0:	00800304 	movi	r2,12
   46be4:	a8800015 	stw	r2,0(r21)
   46be8:	80c0030b 	ldhu	r3,12(r16)
   46bec:	00bfffc4 	movi	r2,-1
   46bf0:	18c01014 	ori	r3,r3,64
   46bf4:	80c0030d 	sth	r3,12(r16)
   46bf8:	003fb106 	br	46ac0 <__alt_data_end+0xfffc6ac0>
   46bfc:	0029883a 	mov	r20,zero
   46c00:	0011883a 	mov	r8,zero
   46c04:	0039883a 	mov	fp,zero
   46c08:	0025883a 	mov	r18,zero
   46c0c:	90001f26 	beq	r18,zero,46c8c <__sfvwrite_r+0x27c>
   46c10:	40006826 	beq	r8,zero,46db4 <__sfvwrite_r+0x3a4>
   46c14:	a02f883a 	mov	r23,r20
   46c18:	9500012e 	bgeu	r18,r20,46c20 <__sfvwrite_r+0x210>
   46c1c:	902f883a 	mov	r23,r18
   46c20:	81000017 	ldw	r4,0(r16)
   46c24:	80800417 	ldw	r2,16(r16)
   46c28:	b82d883a 	mov	r22,r23
   46c2c:	81800217 	ldw	r6,8(r16)
   46c30:	81c00517 	ldw	r7,20(r16)
   46c34:	1100022e 	bgeu	r2,r4,46c40 <__sfvwrite_r+0x230>
   46c38:	31c7883a 	add	r3,r6,r7
   46c3c:	1dc01816 	blt	r3,r23,46ca0 <__sfvwrite_r+0x290>
   46c40:	b9c03f16 	blt	r23,r7,46d40 <__sfvwrite_r+0x330>
   46c44:	80800917 	ldw	r2,36(r16)
   46c48:	81400717 	ldw	r5,28(r16)
   46c4c:	a809883a 	mov	r4,r21
   46c50:	da000115 	stw	r8,4(sp)
   46c54:	e00d883a 	mov	r6,fp
   46c58:	103ee83a 	callr	r2
   46c5c:	102d883a 	mov	r22,r2
   46c60:	da000117 	ldw	r8,4(sp)
   46c64:	00bfe00e 	bge	zero,r2,46be8 <__alt_data_end+0xfffc6be8>
   46c68:	a5a9c83a 	sub	r20,r20,r22
   46c6c:	a0001f26 	beq	r20,zero,46cec <__sfvwrite_r+0x2dc>
   46c70:	98800217 	ldw	r2,8(r19)
   46c74:	e5b9883a 	add	fp,fp,r22
   46c78:	95a5c83a 	sub	r18,r18,r22
   46c7c:	15adc83a 	sub	r22,r2,r22
   46c80:	9d800215 	stw	r22,8(r19)
   46c84:	b03f8d26 	beq	r22,zero,46abc <__alt_data_end+0xfffc6abc>
   46c88:	903fe11e 	bne	r18,zero,46c10 <__alt_data_end+0xfffc6c10>
   46c8c:	8f000017 	ldw	fp,0(r17)
   46c90:	8c800117 	ldw	r18,4(r17)
   46c94:	0011883a 	mov	r8,zero
   46c98:	8c400204 	addi	r17,r17,8
   46c9c:	003fdb06 	br	46c0c <__alt_data_end+0xfffc6c0c>
   46ca0:	180d883a 	mov	r6,r3
   46ca4:	e00b883a 	mov	r5,fp
   46ca8:	da000115 	stw	r8,4(sp)
   46cac:	d8c00015 	stw	r3,0(sp)
   46cb0:	0047c840 	call	47c84 <memmove>
   46cb4:	d8c00017 	ldw	r3,0(sp)
   46cb8:	80800017 	ldw	r2,0(r16)
   46cbc:	a809883a 	mov	r4,r21
   46cc0:	800b883a 	mov	r5,r16
   46cc4:	10c5883a 	add	r2,r2,r3
   46cc8:	80800015 	stw	r2,0(r16)
   46ccc:	d8c00015 	stw	r3,0(sp)
   46cd0:	0045ff00 	call	45ff0 <_fflush_r>
   46cd4:	d8c00017 	ldw	r3,0(sp)
   46cd8:	da000117 	ldw	r8,4(sp)
   46cdc:	103fc21e 	bne	r2,zero,46be8 <__alt_data_end+0xfffc6be8>
   46ce0:	182d883a 	mov	r22,r3
   46ce4:	a5a9c83a 	sub	r20,r20,r22
   46ce8:	a03fe11e 	bne	r20,zero,46c70 <__alt_data_end+0xfffc6c70>
   46cec:	a809883a 	mov	r4,r21
   46cf0:	800b883a 	mov	r5,r16
   46cf4:	0045ff00 	call	45ff0 <_fflush_r>
   46cf8:	103fbb1e 	bne	r2,zero,46be8 <__alt_data_end+0xfffc6be8>
   46cfc:	0011883a 	mov	r8,zero
   46d00:	003fdb06 	br	46c70 <__alt_data_end+0xfffc6c70>
   46d04:	81000017 	ldw	r4,0(r16)
   46d08:	80800417 	ldw	r2,16(r16)
   46d0c:	1100012e 	bgeu	r2,r4,46d14 <__sfvwrite_r+0x304>
   46d10:	a4805a36 	bltu	r20,r18,46e7c <__sfvwrite_r+0x46c>
   46d14:	81c00517 	ldw	r7,20(r16)
   46d18:	91c01a36 	bltu	r18,r7,46d84 <__sfvwrite_r+0x374>
   46d1c:	80800917 	ldw	r2,36(r16)
   46d20:	81400717 	ldw	r5,28(r16)
   46d24:	a809883a 	mov	r4,r21
   46d28:	b80d883a 	mov	r6,r23
   46d2c:	103ee83a 	callr	r2
   46d30:	1029883a 	mov	r20,r2
   46d34:	00bfac0e 	bge	zero,r2,46be8 <__alt_data_end+0xfffc6be8>
   46d38:	a005883a 	mov	r2,r20
   46d3c:	003f9606 	br	46b98 <__alt_data_end+0xfffc6b98>
   46d40:	b80d883a 	mov	r6,r23
   46d44:	e00b883a 	mov	r5,fp
   46d48:	da000115 	stw	r8,4(sp)
   46d4c:	0047c840 	call	47c84 <memmove>
   46d50:	80800217 	ldw	r2,8(r16)
   46d54:	80c00017 	ldw	r3,0(r16)
   46d58:	da000117 	ldw	r8,4(sp)
   46d5c:	15c5c83a 	sub	r2,r2,r23
   46d60:	1def883a 	add	r23,r3,r23
   46d64:	80800215 	stw	r2,8(r16)
   46d68:	85c00015 	stw	r23,0(r16)
   46d6c:	003fbe06 	br	46c68 <__alt_data_end+0xfffc6c68>
   46d70:	81000017 	ldw	r4,0(r16)
   46d74:	9039883a 	mov	fp,r18
   46d78:	9029883a 	mov	r20,r18
   46d7c:	902d883a 	mov	r22,r18
   46d80:	003f7b06 	br	46b70 <__alt_data_end+0xfffc6b70>
   46d84:	b80b883a 	mov	r5,r23
   46d88:	900d883a 	mov	r6,r18
   46d8c:	0047c840 	call	47c84 <memmove>
   46d90:	80c00217 	ldw	r3,8(r16)
   46d94:	80800017 	ldw	r2,0(r16)
   46d98:	9029883a 	mov	r20,r18
   46d9c:	1c87c83a 	sub	r3,r3,r18
   46da0:	1485883a 	add	r2,r2,r18
   46da4:	80800015 	stw	r2,0(r16)
   46da8:	80c00215 	stw	r3,8(r16)
   46dac:	9005883a 	mov	r2,r18
   46db0:	003f7906 	br	46b98 <__alt_data_end+0xfffc6b98>
   46db4:	e009883a 	mov	r4,fp
   46db8:	01400284 	movi	r5,10
   46dbc:	900d883a 	mov	r6,r18
   46dc0:	0047a640 	call	47a64 <memchr>
   46dc4:	10003826 	beq	r2,zero,46ea8 <__sfvwrite_r+0x498>
   46dc8:	10800044 	addi	r2,r2,1
   46dcc:	1729c83a 	sub	r20,r2,fp
   46dd0:	02000044 	movi	r8,1
   46dd4:	003f8f06 	br	46c14 <__alt_data_end+0xfffc6c14>
   46dd8:	80800517 	ldw	r2,20(r16)
   46ddc:	81400417 	ldw	r5,16(r16)
   46de0:	87000017 	ldw	fp,0(r16)
   46de4:	10a9883a 	add	r20,r2,r2
   46de8:	a085883a 	add	r2,r20,r2
   46dec:	1028d7fa 	srli	r20,r2,31
   46df0:	e179c83a 	sub	fp,fp,r5
   46df4:	e1000044 	addi	r4,fp,1
   46df8:	a085883a 	add	r2,r20,r2
   46dfc:	1029d07a 	srai	r20,r2,1
   46e00:	2485883a 	add	r2,r4,r18
   46e04:	a00d883a 	mov	r6,r20
   46e08:	a080022e 	bgeu	r20,r2,46e14 <__sfvwrite_r+0x404>
   46e0c:	1029883a 	mov	r20,r2
   46e10:	100d883a 	mov	r6,r2
   46e14:	18c1000c 	andi	r3,r3,1024
   46e18:	a809883a 	mov	r4,r21
   46e1c:	183f6a26 	beq	r3,zero,46bc8 <__alt_data_end+0xfffc6bc8>
   46e20:	300b883a 	mov	r5,r6
   46e24:	00472bc0 	call	472bc <_malloc_r>
   46e28:	102d883a 	mov	r22,r2
   46e2c:	103f6c26 	beq	r2,zero,46be0 <__alt_data_end+0xfffc6be0>
   46e30:	81400417 	ldw	r5,16(r16)
   46e34:	1009883a 	mov	r4,r2
   46e38:	e00d883a 	mov	r6,fp
   46e3c:	0047b4c0 	call	47b4c <memcpy>
   46e40:	8080030b 	ldhu	r2,12(r16)
   46e44:	00fedfc4 	movi	r3,-1153
   46e48:	10c4703a 	and	r2,r2,r3
   46e4c:	10802014 	ori	r2,r2,128
   46e50:	8080030d 	sth	r2,12(r16)
   46e54:	b709883a 	add	r4,r22,fp
   46e58:	a707c83a 	sub	r3,r20,fp
   46e5c:	85800415 	stw	r22,16(r16)
   46e60:	85000515 	stw	r20,20(r16)
   46e64:	81000015 	stw	r4,0(r16)
   46e68:	9039883a 	mov	fp,r18
   46e6c:	80c00215 	stw	r3,8(r16)
   46e70:	9029883a 	mov	r20,r18
   46e74:	902d883a 	mov	r22,r18
   46e78:	003f3d06 	br	46b70 <__alt_data_end+0xfffc6b70>
   46e7c:	b80b883a 	mov	r5,r23
   46e80:	a00d883a 	mov	r6,r20
   46e84:	0047c840 	call	47c84 <memmove>
   46e88:	80800017 	ldw	r2,0(r16)
   46e8c:	a809883a 	mov	r4,r21
   46e90:	800b883a 	mov	r5,r16
   46e94:	1505883a 	add	r2,r2,r20
   46e98:	80800015 	stw	r2,0(r16)
   46e9c:	0045ff00 	call	45ff0 <_fflush_r>
   46ea0:	103fa526 	beq	r2,zero,46d38 <__alt_data_end+0xfffc6d38>
   46ea4:	003f5006 	br	46be8 <__alt_data_end+0xfffc6be8>
   46ea8:	95000044 	addi	r20,r18,1
   46eac:	02000044 	movi	r8,1
   46eb0:	003f5806 	br	46c14 <__alt_data_end+0xfffc6c14>

00046eb4 <_fwalk>:
   46eb4:	defff804 	addi	sp,sp,-32
   46eb8:	dd400515 	stw	r21,20(sp)
   46ebc:	2540b804 	addi	r21,r4,736
   46ec0:	dd800615 	stw	r22,24(sp)
   46ec4:	dd000415 	stw	r20,16(sp)
   46ec8:	dfc00715 	stw	ra,28(sp)
   46ecc:	dcc00315 	stw	r19,12(sp)
   46ed0:	dc800215 	stw	r18,8(sp)
   46ed4:	dc400115 	stw	r17,4(sp)
   46ed8:	dc000015 	stw	r16,0(sp)
   46edc:	2829883a 	mov	r20,r5
   46ee0:	002d883a 	mov	r22,zero
   46ee4:	00465bc0 	call	465bc <__sfp_lock_acquire>
   46ee8:	a8001426 	beq	r21,zero,46f3c <_fwalk+0x88>
   46eec:	04ffffc4 	movi	r19,-1
   46ef0:	ac400117 	ldw	r17,4(r21)
   46ef4:	ac800217 	ldw	r18,8(r21)
   46ef8:	8c7fffc4 	addi	r17,r17,-1
   46efc:	88000d16 	blt	r17,zero,46f34 <_fwalk+0x80>
   46f00:	94000304 	addi	r16,r18,12
   46f04:	94800384 	addi	r18,r18,14
   46f08:	80c0000f 	ldh	r3,0(r16)
   46f0c:	8c7fffc4 	addi	r17,r17,-1
   46f10:	813ffd04 	addi	r4,r16,-12
   46f14:	18000426 	beq	r3,zero,46f28 <_fwalk+0x74>
   46f18:	90c0000f 	ldh	r3,0(r18)
   46f1c:	1cc00226 	beq	r3,r19,46f28 <_fwalk+0x74>
   46f20:	a03ee83a 	callr	r20
   46f24:	b0acb03a 	or	r22,r22,r2
   46f28:	84001a04 	addi	r16,r16,104
   46f2c:	94801a04 	addi	r18,r18,104
   46f30:	8cfff51e 	bne	r17,r19,46f08 <__alt_data_end+0xfffc6f08>
   46f34:	ad400017 	ldw	r21,0(r21)
   46f38:	a83fed1e 	bne	r21,zero,46ef0 <__alt_data_end+0xfffc6ef0>
   46f3c:	00465c00 	call	465c0 <__sfp_lock_release>
   46f40:	b005883a 	mov	r2,r22
   46f44:	dfc00717 	ldw	ra,28(sp)
   46f48:	dd800617 	ldw	r22,24(sp)
   46f4c:	dd400517 	ldw	r21,20(sp)
   46f50:	dd000417 	ldw	r20,16(sp)
   46f54:	dcc00317 	ldw	r19,12(sp)
   46f58:	dc800217 	ldw	r18,8(sp)
   46f5c:	dc400117 	ldw	r17,4(sp)
   46f60:	dc000017 	ldw	r16,0(sp)
   46f64:	dec00804 	addi	sp,sp,32
   46f68:	f800283a 	ret

00046f6c <_fwalk_reent>:
   46f6c:	defff804 	addi	sp,sp,-32
   46f70:	dd400515 	stw	r21,20(sp)
   46f74:	2540b804 	addi	r21,r4,736
   46f78:	dd800615 	stw	r22,24(sp)
   46f7c:	dd000415 	stw	r20,16(sp)
   46f80:	dcc00315 	stw	r19,12(sp)
   46f84:	dfc00715 	stw	ra,28(sp)
   46f88:	dc800215 	stw	r18,8(sp)
   46f8c:	dc400115 	stw	r17,4(sp)
   46f90:	dc000015 	stw	r16,0(sp)
   46f94:	2027883a 	mov	r19,r4
   46f98:	2829883a 	mov	r20,r5
   46f9c:	002d883a 	mov	r22,zero
   46fa0:	00465bc0 	call	465bc <__sfp_lock_acquire>
   46fa4:	a8001326 	beq	r21,zero,46ff4 <_fwalk_reent+0x88>
   46fa8:	04bfffc4 	movi	r18,-1
   46fac:	ac400117 	ldw	r17,4(r21)
   46fb0:	ac000217 	ldw	r16,8(r21)
   46fb4:	8c7fffc4 	addi	r17,r17,-1
   46fb8:	88000c16 	blt	r17,zero,46fec <_fwalk_reent+0x80>
   46fbc:	84000304 	addi	r16,r16,12
   46fc0:	80c0000f 	ldh	r3,0(r16)
   46fc4:	8c7fffc4 	addi	r17,r17,-1
   46fc8:	817ffd04 	addi	r5,r16,-12
   46fcc:	18000526 	beq	r3,zero,46fe4 <_fwalk_reent+0x78>
   46fd0:	80c0008f 	ldh	r3,2(r16)
   46fd4:	9809883a 	mov	r4,r19
   46fd8:	1c800226 	beq	r3,r18,46fe4 <_fwalk_reent+0x78>
   46fdc:	a03ee83a 	callr	r20
   46fe0:	b0acb03a 	or	r22,r22,r2
   46fe4:	84001a04 	addi	r16,r16,104
   46fe8:	8cbff51e 	bne	r17,r18,46fc0 <__alt_data_end+0xfffc6fc0>
   46fec:	ad400017 	ldw	r21,0(r21)
   46ff0:	a83fee1e 	bne	r21,zero,46fac <__alt_data_end+0xfffc6fac>
   46ff4:	00465c00 	call	465c0 <__sfp_lock_release>
   46ff8:	b005883a 	mov	r2,r22
   46ffc:	dfc00717 	ldw	ra,28(sp)
   47000:	dd800617 	ldw	r22,24(sp)
   47004:	dd400517 	ldw	r21,20(sp)
   47008:	dd000417 	ldw	r20,16(sp)
   4700c:	dcc00317 	ldw	r19,12(sp)
   47010:	dc800217 	ldw	r18,8(sp)
   47014:	dc400117 	ldw	r17,4(sp)
   47018:	dc000017 	ldw	r16,0(sp)
   4701c:	dec00804 	addi	sp,sp,32
   47020:	f800283a 	ret

00047024 <_setlocale_r>:
   47024:	30001b26 	beq	r6,zero,47094 <_setlocale_r+0x70>
   47028:	01400174 	movhi	r5,5
   4702c:	defffe04 	addi	sp,sp,-8
   47030:	29471004 	addi	r5,r5,7232
   47034:	3009883a 	mov	r4,r6
   47038:	dc000015 	stw	r16,0(sp)
   4703c:	dfc00115 	stw	ra,4(sp)
   47040:	3021883a 	mov	r16,r6
   47044:	00496f00 	call	496f0 <strcmp>
   47048:	1000061e 	bne	r2,zero,47064 <_setlocale_r+0x40>
   4704c:	00800174 	movhi	r2,5
   47050:	10870f04 	addi	r2,r2,7228
   47054:	dfc00117 	ldw	ra,4(sp)
   47058:	dc000017 	ldw	r16,0(sp)
   4705c:	dec00204 	addi	sp,sp,8
   47060:	f800283a 	ret
   47064:	01400174 	movhi	r5,5
   47068:	29470f04 	addi	r5,r5,7228
   4706c:	8009883a 	mov	r4,r16
   47070:	00496f00 	call	496f0 <strcmp>
   47074:	103ff526 	beq	r2,zero,4704c <__alt_data_end+0xfffc704c>
   47078:	01400174 	movhi	r5,5
   4707c:	2946fa04 	addi	r5,r5,7144
   47080:	8009883a 	mov	r4,r16
   47084:	00496f00 	call	496f0 <strcmp>
   47088:	103ff026 	beq	r2,zero,4704c <__alt_data_end+0xfffc704c>
   4708c:	0005883a 	mov	r2,zero
   47090:	003ff006 	br	47054 <__alt_data_end+0xfffc7054>
   47094:	00800174 	movhi	r2,5
   47098:	10870f04 	addi	r2,r2,7228
   4709c:	f800283a 	ret

000470a0 <__locale_charset>:
   470a0:	00800174 	movhi	r2,5
   470a4:	1088c204 	addi	r2,r2,8968
   470a8:	f800283a 	ret

000470ac <__locale_mb_cur_max>:
   470ac:	00800174 	movhi	r2,5
   470b0:	108e5e04 	addi	r2,r2,14712
   470b4:	10800017 	ldw	r2,0(r2)
   470b8:	f800283a 	ret

000470bc <__locale_msgcharset>:
   470bc:	00800174 	movhi	r2,5
   470c0:	1088ba04 	addi	r2,r2,8936
   470c4:	f800283a 	ret

000470c8 <__locale_cjk_lang>:
   470c8:	0005883a 	mov	r2,zero
   470cc:	f800283a 	ret

000470d0 <_localeconv_r>:
   470d0:	00800174 	movhi	r2,5
   470d4:	1088ca04 	addi	r2,r2,9000
   470d8:	f800283a 	ret

000470dc <setlocale>:
   470dc:	00c00174 	movhi	r3,5
   470e0:	18ce5d04 	addi	r3,r3,14708
   470e4:	2005883a 	mov	r2,r4
   470e8:	19000017 	ldw	r4,0(r3)
   470ec:	280d883a 	mov	r6,r5
   470f0:	100b883a 	mov	r5,r2
   470f4:	00470241 	jmpi	47024 <_setlocale_r>

000470f8 <localeconv>:
   470f8:	00800174 	movhi	r2,5
   470fc:	1088ca04 	addi	r2,r2,9000
   47100:	f800283a 	ret

00047104 <__smakebuf_r>:
   47104:	2880030b 	ldhu	r2,12(r5)
   47108:	10c0008c 	andi	r3,r2,2
   4710c:	1800401e 	bne	r3,zero,47210 <__smakebuf_r+0x10c>
   47110:	deffec04 	addi	sp,sp,-80
   47114:	dc000f15 	stw	r16,60(sp)
   47118:	2821883a 	mov	r16,r5
   4711c:	2940038f 	ldh	r5,14(r5)
   47120:	dc401015 	stw	r17,64(sp)
   47124:	dfc01315 	stw	ra,76(sp)
   47128:	dcc01215 	stw	r19,72(sp)
   4712c:	dc801115 	stw	r18,68(sp)
   47130:	2023883a 	mov	r17,r4
   47134:	28001b16 	blt	r5,zero,471a4 <__smakebuf_r+0xa0>
   47138:	d80d883a 	mov	r6,sp
   4713c:	004b1680 	call	4b168 <_fstat_r>
   47140:	10001716 	blt	r2,zero,471a0 <__smakebuf_r+0x9c>
   47144:	d8800117 	ldw	r2,4(sp)
   47148:	00e00014 	movui	r3,32768
   4714c:	10bc000c 	andi	r2,r2,61440
   47150:	10c03726 	beq	r2,r3,47230 <__smakebuf_r+0x12c>
   47154:	80c0030b 	ldhu	r3,12(r16)
   47158:	18c20014 	ori	r3,r3,2048
   4715c:	80c0030d 	sth	r3,12(r16)
   47160:	00c80004 	movi	r3,8192
   47164:	10c03c1e 	bne	r2,r3,47258 <__smakebuf_r+0x154>
   47168:	8140038f 	ldh	r5,14(r16)
   4716c:	8809883a 	mov	r4,r17
   47170:	004b1c00 	call	4b1c0 <_isatty_r>
   47174:	10004e26 	beq	r2,zero,472b0 <__smakebuf_r+0x1ac>
   47178:	8080030b 	ldhu	r2,12(r16)
   4717c:	04c00044 	movi	r19,1
   47180:	80c010c4 	addi	r3,r16,67
   47184:	14c4b03a 	or	r2,r2,r19
   47188:	8080030d 	sth	r2,12(r16)
   4718c:	80c00015 	stw	r3,0(r16)
   47190:	80c00415 	stw	r3,16(r16)
   47194:	84c00515 	stw	r19,20(r16)
   47198:	04810004 	movi	r18,1024
   4719c:	00000706 	br	471bc <__smakebuf_r+0xb8>
   471a0:	8080030b 	ldhu	r2,12(r16)
   471a4:	10c0200c 	andi	r3,r2,128
   471a8:	18001f1e 	bne	r3,zero,47228 <__smakebuf_r+0x124>
   471ac:	04810004 	movi	r18,1024
   471b0:	10820014 	ori	r2,r2,2048
   471b4:	8080030d 	sth	r2,12(r16)
   471b8:	0027883a 	mov	r19,zero
   471bc:	8809883a 	mov	r4,r17
   471c0:	900b883a 	mov	r5,r18
   471c4:	00472bc0 	call	472bc <_malloc_r>
   471c8:	10002e26 	beq	r2,zero,47284 <__smakebuf_r+0x180>
   471cc:	80c0030b 	ldhu	r3,12(r16)
   471d0:	01000134 	movhi	r4,4
   471d4:	21189604 	addi	r4,r4,25176
   471d8:	89000f15 	stw	r4,60(r17)
   471dc:	18c02014 	ori	r3,r3,128
   471e0:	80c0030d 	sth	r3,12(r16)
   471e4:	80800015 	stw	r2,0(r16)
   471e8:	80800415 	stw	r2,16(r16)
   471ec:	84800515 	stw	r18,20(r16)
   471f0:	98001c1e 	bne	r19,zero,47264 <__smakebuf_r+0x160>
   471f4:	dfc01317 	ldw	ra,76(sp)
   471f8:	dcc01217 	ldw	r19,72(sp)
   471fc:	dc801117 	ldw	r18,68(sp)
   47200:	dc401017 	ldw	r17,64(sp)
   47204:	dc000f17 	ldw	r16,60(sp)
   47208:	dec01404 	addi	sp,sp,80
   4720c:	f800283a 	ret
   47210:	288010c4 	addi	r2,r5,67
   47214:	28800015 	stw	r2,0(r5)
   47218:	28800415 	stw	r2,16(r5)
   4721c:	00800044 	movi	r2,1
   47220:	28800515 	stw	r2,20(r5)
   47224:	f800283a 	ret
   47228:	04801004 	movi	r18,64
   4722c:	003fe006 	br	471b0 <__alt_data_end+0xfffc71b0>
   47230:	81000a17 	ldw	r4,40(r16)
   47234:	00c00174 	movhi	r3,5
   47238:	18e5a304 	addi	r3,r3,-26996
   4723c:	20ffc51e 	bne	r4,r3,47154 <__alt_data_end+0xfffc7154>
   47240:	80c0030b 	ldhu	r3,12(r16)
   47244:	01010004 	movi	r4,1024
   47248:	81001315 	stw	r4,76(r16)
   4724c:	1906b03a 	or	r3,r3,r4
   47250:	80c0030d 	sth	r3,12(r16)
   47254:	003fc206 	br	47160 <__alt_data_end+0xfffc7160>
   47258:	0027883a 	mov	r19,zero
   4725c:	04810004 	movi	r18,1024
   47260:	003fd606 	br	471bc <__alt_data_end+0xfffc71bc>
   47264:	8140038f 	ldh	r5,14(r16)
   47268:	8809883a 	mov	r4,r17
   4726c:	004b1c00 	call	4b1c0 <_isatty_r>
   47270:	103fe026 	beq	r2,zero,471f4 <__alt_data_end+0xfffc71f4>
   47274:	8080030b 	ldhu	r2,12(r16)
   47278:	10800054 	ori	r2,r2,1
   4727c:	8080030d 	sth	r2,12(r16)
   47280:	003fdc06 	br	471f4 <__alt_data_end+0xfffc71f4>
   47284:	8080030b 	ldhu	r2,12(r16)
   47288:	10c0800c 	andi	r3,r2,512
   4728c:	183fd91e 	bne	r3,zero,471f4 <__alt_data_end+0xfffc71f4>
   47290:	10800094 	ori	r2,r2,2
   47294:	80c010c4 	addi	r3,r16,67
   47298:	8080030d 	sth	r2,12(r16)
   4729c:	00800044 	movi	r2,1
   472a0:	80c00015 	stw	r3,0(r16)
   472a4:	80c00415 	stw	r3,16(r16)
   472a8:	80800515 	stw	r2,20(r16)
   472ac:	003fd106 	br	471f4 <__alt_data_end+0xfffc71f4>
   472b0:	04c00044 	movi	r19,1
   472b4:	04810004 	movi	r18,1024
   472b8:	003fc006 	br	471bc <__alt_data_end+0xfffc71bc>

000472bc <_malloc_r>:
   472bc:	defff504 	addi	sp,sp,-44
   472c0:	dc800315 	stw	r18,12(sp)
   472c4:	dfc00a15 	stw	ra,40(sp)
   472c8:	df000915 	stw	fp,36(sp)
   472cc:	ddc00815 	stw	r23,32(sp)
   472d0:	dd800715 	stw	r22,28(sp)
   472d4:	dd400615 	stw	r21,24(sp)
   472d8:	dd000515 	stw	r20,20(sp)
   472dc:	dcc00415 	stw	r19,16(sp)
   472e0:	dc400215 	stw	r17,8(sp)
   472e4:	dc000115 	stw	r16,4(sp)
   472e8:	288002c4 	addi	r2,r5,11
   472ec:	00c00584 	movi	r3,22
   472f0:	2025883a 	mov	r18,r4
   472f4:	18802a2e 	bgeu	r3,r2,473a0 <_malloc_r+0xe4>
   472f8:	047ffe04 	movi	r17,-8
   472fc:	1462703a 	and	r17,r2,r17
   47300:	88009e16 	blt	r17,zero,4757c <_malloc_r+0x2c0>
   47304:	89409d36 	bltu	r17,r5,4757c <_malloc_r+0x2c0>
   47308:	004f1c80 	call	4f1c8 <__malloc_lock>
   4730c:	00807dc4 	movi	r2,503
   47310:	14402736 	bltu	r2,r17,473b0 <_malloc_r+0xf4>
   47314:	8806d0fa 	srli	r3,r17,3
   47318:	04c00174 	movhi	r19,5
   4731c:	9cc8d804 	addi	r19,r19,9056
   47320:	18c5883a 	add	r2,r3,r3
   47324:	1085883a 	add	r2,r2,r2
   47328:	1085883a 	add	r2,r2,r2
   4732c:	9885883a 	add	r2,r19,r2
   47330:	14000317 	ldw	r16,12(r2)
   47334:	80814a26 	beq	r16,r2,47860 <_malloc_r+0x5a4>
   47338:	80c00117 	ldw	r3,4(r16)
   4733c:	81000317 	ldw	r4,12(r16)
   47340:	00bfff04 	movi	r2,-4
   47344:	1884703a 	and	r2,r3,r2
   47348:	81400217 	ldw	r5,8(r16)
   4734c:	8085883a 	add	r2,r16,r2
   47350:	10c00117 	ldw	r3,4(r2)
   47354:	29000315 	stw	r4,12(r5)
   47358:	21400215 	stw	r5,8(r4)
   4735c:	18c00054 	ori	r3,r3,1
   47360:	10c00115 	stw	r3,4(r2)
   47364:	9009883a 	mov	r4,r18
   47368:	004f1e80 	call	4f1e8 <__malloc_unlock>
   4736c:	80800204 	addi	r2,r16,8
   47370:	dfc00a17 	ldw	ra,40(sp)
   47374:	df000917 	ldw	fp,36(sp)
   47378:	ddc00817 	ldw	r23,32(sp)
   4737c:	dd800717 	ldw	r22,28(sp)
   47380:	dd400617 	ldw	r21,24(sp)
   47384:	dd000517 	ldw	r20,20(sp)
   47388:	dcc00417 	ldw	r19,16(sp)
   4738c:	dc800317 	ldw	r18,12(sp)
   47390:	dc400217 	ldw	r17,8(sp)
   47394:	dc000117 	ldw	r16,4(sp)
   47398:	dec00b04 	addi	sp,sp,44
   4739c:	f800283a 	ret
   473a0:	04400404 	movi	r17,16
   473a4:	89407536 	bltu	r17,r5,4757c <_malloc_r+0x2c0>
   473a8:	004f1c80 	call	4f1c8 <__malloc_lock>
   473ac:	003fd906 	br	47314 <__alt_data_end+0xfffc7314>
   473b0:	8806d27a 	srli	r3,r17,9
   473b4:	18007526 	beq	r3,zero,4758c <_malloc_r+0x2d0>
   473b8:	00800104 	movi	r2,4
   473bc:	10c0ef36 	bltu	r2,r3,4777c <_malloc_r+0x4c0>
   473c0:	8806d1ba 	srli	r3,r17,6
   473c4:	19c00e04 	addi	r7,r3,56
   473c8:	39cb883a 	add	r5,r7,r7
   473cc:	04c00174 	movhi	r19,5
   473d0:	294b883a 	add	r5,r5,r5
   473d4:	9cc8d804 	addi	r19,r19,9056
   473d8:	294b883a 	add	r5,r5,r5
   473dc:	994b883a 	add	r5,r19,r5
   473e0:	2c000317 	ldw	r16,12(r5)
   473e4:	2c000e26 	beq	r5,r16,47420 <_malloc_r+0x164>
   473e8:	80800117 	ldw	r2,4(r16)
   473ec:	01bfff04 	movi	r6,-4
   473f0:	010003c4 	movi	r4,15
   473f4:	1184703a 	and	r2,r2,r6
   473f8:	1447c83a 	sub	r3,r2,r17
   473fc:	20c00716 	blt	r4,r3,4741c <_malloc_r+0x160>
   47400:	1800650e 	bge	r3,zero,47598 <_malloc_r+0x2dc>
   47404:	84000317 	ldw	r16,12(r16)
   47408:	2c000526 	beq	r5,r16,47420 <_malloc_r+0x164>
   4740c:	80800117 	ldw	r2,4(r16)
   47410:	1184703a 	and	r2,r2,r6
   47414:	1447c83a 	sub	r3,r2,r17
   47418:	20fff90e 	bge	r4,r3,47400 <__alt_data_end+0xfffc7400>
   4741c:	39ffffc4 	addi	r7,r7,-1
   47420:	38c00044 	addi	r3,r7,1
   47424:	01800174 	movhi	r6,5
   47428:	9c000417 	ldw	r16,16(r19)
   4742c:	3188d804 	addi	r6,r6,9056
   47430:	32400204 	addi	r9,r6,8
   47434:	82410326 	beq	r16,r9,47844 <_malloc_r+0x588>
   47438:	81000117 	ldw	r4,4(r16)
   4743c:	00bfff04 	movi	r2,-4
   47440:	208e703a 	and	r7,r4,r2
   47444:	3c45c83a 	sub	r2,r7,r17
   47448:	010003c4 	movi	r4,15
   4744c:	2080ee16 	blt	r4,r2,47808 <_malloc_r+0x54c>
   47450:	32400515 	stw	r9,20(r6)
   47454:	32400415 	stw	r9,16(r6)
   47458:	1000510e 	bge	r2,zero,475a0 <_malloc_r+0x2e4>
   4745c:	00807fc4 	movi	r2,511
   47460:	11c0ce36 	bltu	r2,r7,4779c <_malloc_r+0x4e0>
   47464:	3808d0fa 	srli	r4,r7,3
   47468:	01c00044 	movi	r7,1
   4746c:	30800117 	ldw	r2,4(r6)
   47470:	210b883a 	add	r5,r4,r4
   47474:	294b883a 	add	r5,r5,r5
   47478:	2009d0ba 	srai	r4,r4,2
   4747c:	294b883a 	add	r5,r5,r5
   47480:	298b883a 	add	r5,r5,r6
   47484:	2a000217 	ldw	r8,8(r5)
   47488:	3908983a 	sll	r4,r7,r4
   4748c:	81400315 	stw	r5,12(r16)
   47490:	82000215 	stw	r8,8(r16)
   47494:	2088b03a 	or	r4,r4,r2
   47498:	2c000215 	stw	r16,8(r5)
   4749c:	31000115 	stw	r4,4(r6)
   474a0:	44000315 	stw	r16,12(r8)
   474a4:	1805d0ba 	srai	r2,r3,2
   474a8:	01400044 	movi	r5,1
   474ac:	288a983a 	sll	r5,r5,r2
   474b0:	21404336 	bltu	r4,r5,475c0 <_malloc_r+0x304>
   474b4:	2144703a 	and	r2,r4,r5
   474b8:	10000a1e 	bne	r2,zero,474e4 <_malloc_r+0x228>
   474bc:	00bfff04 	movi	r2,-4
   474c0:	294b883a 	add	r5,r5,r5
   474c4:	1886703a 	and	r3,r3,r2
   474c8:	2144703a 	and	r2,r4,r5
   474cc:	18c00104 	addi	r3,r3,4
   474d0:	1000041e 	bne	r2,zero,474e4 <_malloc_r+0x228>
   474d4:	294b883a 	add	r5,r5,r5
   474d8:	2144703a 	and	r2,r4,r5
   474dc:	18c00104 	addi	r3,r3,4
   474e0:	103ffc26 	beq	r2,zero,474d4 <__alt_data_end+0xfffc74d4>
   474e4:	023fff04 	movi	r8,-4
   474e8:	01c003c4 	movi	r7,15
   474ec:	18c5883a 	add	r2,r3,r3
   474f0:	1085883a 	add	r2,r2,r2
   474f4:	1085883a 	add	r2,r2,r2
   474f8:	9895883a 	add	r10,r19,r2
   474fc:	52c00304 	addi	r11,r10,12
   47500:	1819883a 	mov	r12,r3
   47504:	5c000017 	ldw	r16,0(r11)
   47508:	59bffd04 	addi	r6,r11,-12
   4750c:	8180041e 	bne	r16,r6,47520 <_malloc_r+0x264>
   47510:	0000ce06 	br	4784c <_malloc_r+0x590>
   47514:	2000d70e 	bge	r4,zero,47874 <_malloc_r+0x5b8>
   47518:	84000317 	ldw	r16,12(r16)
   4751c:	8180cb26 	beq	r16,r6,4784c <_malloc_r+0x590>
   47520:	80800117 	ldw	r2,4(r16)
   47524:	1204703a 	and	r2,r2,r8
   47528:	1449c83a 	sub	r4,r2,r17
   4752c:	393ff90e 	bge	r7,r4,47514 <__alt_data_end+0xfffc7514>
   47530:	80800317 	ldw	r2,12(r16)
   47534:	80c00217 	ldw	r3,8(r16)
   47538:	89400054 	ori	r5,r17,1
   4753c:	81400115 	stw	r5,4(r16)
   47540:	18800315 	stw	r2,12(r3)
   47544:	10c00215 	stw	r3,8(r2)
   47548:	8463883a 	add	r17,r16,r17
   4754c:	9c400515 	stw	r17,20(r19)
   47550:	9c400415 	stw	r17,16(r19)
   47554:	20800054 	ori	r2,r4,1
   47558:	88800115 	stw	r2,4(r17)
   4755c:	8a400315 	stw	r9,12(r17)
   47560:	8a400215 	stw	r9,8(r17)
   47564:	8923883a 	add	r17,r17,r4
   47568:	89000015 	stw	r4,0(r17)
   4756c:	9009883a 	mov	r4,r18
   47570:	004f1e80 	call	4f1e8 <__malloc_unlock>
   47574:	80800204 	addi	r2,r16,8
   47578:	003f7d06 	br	47370 <__alt_data_end+0xfffc7370>
   4757c:	00800304 	movi	r2,12
   47580:	90800015 	stw	r2,0(r18)
   47584:	0005883a 	mov	r2,zero
   47588:	003f7906 	br	47370 <__alt_data_end+0xfffc7370>
   4758c:	01401f84 	movi	r5,126
   47590:	01c00fc4 	movi	r7,63
   47594:	003f8d06 	br	473cc <__alt_data_end+0xfffc73cc>
   47598:	81000317 	ldw	r4,12(r16)
   4759c:	003f6a06 	br	47348 <__alt_data_end+0xfffc7348>
   475a0:	81c5883a 	add	r2,r16,r7
   475a4:	10c00117 	ldw	r3,4(r2)
   475a8:	9009883a 	mov	r4,r18
   475ac:	18c00054 	ori	r3,r3,1
   475b0:	10c00115 	stw	r3,4(r2)
   475b4:	004f1e80 	call	4f1e8 <__malloc_unlock>
   475b8:	80800204 	addi	r2,r16,8
   475bc:	003f6c06 	br	47370 <__alt_data_end+0xfffc7370>
   475c0:	9c000217 	ldw	r16,8(r19)
   475c4:	00bfff04 	movi	r2,-4
   475c8:	85800117 	ldw	r22,4(r16)
   475cc:	b0ac703a 	and	r22,r22,r2
   475d0:	b4400336 	bltu	r22,r17,475e0 <_malloc_r+0x324>
   475d4:	b445c83a 	sub	r2,r22,r17
   475d8:	00c003c4 	movi	r3,15
   475dc:	18805d16 	blt	r3,r2,47754 <_malloc_r+0x498>
   475e0:	05c00174 	movhi	r23,5
   475e4:	00800174 	movhi	r2,5
   475e8:	bdce5f04 	addi	r23,r23,14716
   475ec:	10952d04 	addi	r2,r2,21684
   475f0:	15400017 	ldw	r21,0(r2)
   475f4:	b9000017 	ldw	r4,0(r23)
   475f8:	00ffffc4 	movi	r3,-1
   475fc:	858d883a 	add	r6,r16,r22
   47600:	8d6b883a 	add	r21,r17,r21
   47604:	20c0e426 	beq	r4,r3,47998 <_malloc_r+0x6dc>
   47608:	ad4403c4 	addi	r21,r21,4111
   4760c:	00fc0004 	movi	r3,-4096
   47610:	a8ea703a 	and	r21,r21,r3
   47614:	9009883a 	mov	r4,r18
   47618:	a80b883a 	mov	r5,r21
   4761c:	d9800015 	stw	r6,0(sp)
   47620:	00495600 	call	49560 <_sbrk_r>
   47624:	00ffffc4 	movi	r3,-1
   47628:	1029883a 	mov	r20,r2
   4762c:	d9800017 	ldw	r6,0(sp)
   47630:	10c0a426 	beq	r2,r3,478c4 <_malloc_r+0x608>
   47634:	1180a236 	bltu	r2,r6,478c0 <_malloc_r+0x604>
   47638:	07000174 	movhi	fp,5
   4763c:	e7153504 	addi	fp,fp,21716
   47640:	e0c00017 	ldw	r3,0(fp)
   47644:	a8c7883a 	add	r3,r21,r3
   47648:	e0c00015 	stw	r3,0(fp)
   4764c:	3500da26 	beq	r6,r20,479b8 <_malloc_r+0x6fc>
   47650:	b9000017 	ldw	r4,0(r23)
   47654:	00bfffc4 	movi	r2,-1
   47658:	2080e426 	beq	r4,r2,479ec <_malloc_r+0x730>
   4765c:	a185c83a 	sub	r2,r20,r6
   47660:	1885883a 	add	r2,r3,r2
   47664:	e0800015 	stw	r2,0(fp)
   47668:	a0c001cc 	andi	r3,r20,7
   4766c:	1800b526 	beq	r3,zero,47944 <_malloc_r+0x688>
   47670:	a0e9c83a 	sub	r20,r20,r3
   47674:	00840204 	movi	r2,4104
   47678:	a5000204 	addi	r20,r20,8
   4767c:	10c7c83a 	sub	r3,r2,r3
   47680:	a545883a 	add	r2,r20,r21
   47684:	1083ffcc 	andi	r2,r2,4095
   47688:	18abc83a 	sub	r21,r3,r2
   4768c:	9009883a 	mov	r4,r18
   47690:	a80b883a 	mov	r5,r21
   47694:	00495600 	call	49560 <_sbrk_r>
   47698:	00ffffc4 	movi	r3,-1
   4769c:	10c0d026 	beq	r2,r3,479e0 <_malloc_r+0x724>
   476a0:	1507c83a 	sub	r3,r2,r20
   476a4:	a8c7883a 	add	r3,r21,r3
   476a8:	18c00054 	ori	r3,r3,1
   476ac:	e0800017 	ldw	r2,0(fp)
   476b0:	9d000215 	stw	r20,8(r19)
   476b4:	a0c00115 	stw	r3,4(r20)
   476b8:	a887883a 	add	r3,r21,r2
   476bc:	e0c00015 	stw	r3,0(fp)
   476c0:	84c00e26 	beq	r16,r19,476fc <_malloc_r+0x440>
   476c4:	018003c4 	movi	r6,15
   476c8:	3580a02e 	bgeu	r6,r22,4794c <_malloc_r+0x690>
   476cc:	81400117 	ldw	r5,4(r16)
   476d0:	013ffe04 	movi	r4,-8
   476d4:	b0bffd04 	addi	r2,r22,-12
   476d8:	1104703a 	and	r2,r2,r4
   476dc:	2900004c 	andi	r4,r5,1
   476e0:	1108b03a 	or	r4,r2,r4
   476e4:	81000115 	stw	r4,4(r16)
   476e8:	01400144 	movi	r5,5
   476ec:	8089883a 	add	r4,r16,r2
   476f0:	21400115 	stw	r5,4(r4)
   476f4:	21400215 	stw	r5,8(r4)
   476f8:	3080c036 	bltu	r6,r2,479fc <_malloc_r+0x740>
   476fc:	00800174 	movhi	r2,5
   47700:	10952c04 	addi	r2,r2,21680
   47704:	11000017 	ldw	r4,0(r2)
   47708:	20c0012e 	bgeu	r4,r3,47710 <_malloc_r+0x454>
   4770c:	10c00015 	stw	r3,0(r2)
   47710:	00800174 	movhi	r2,5
   47714:	10952b04 	addi	r2,r2,21676
   47718:	11000017 	ldw	r4,0(r2)
   4771c:	9c000217 	ldw	r16,8(r19)
   47720:	20c0012e 	bgeu	r4,r3,47728 <_malloc_r+0x46c>
   47724:	10c00015 	stw	r3,0(r2)
   47728:	80c00117 	ldw	r3,4(r16)
   4772c:	00bfff04 	movi	r2,-4
   47730:	1886703a 	and	r3,r3,r2
   47734:	1c45c83a 	sub	r2,r3,r17
   47738:	1c400236 	bltu	r3,r17,47744 <_malloc_r+0x488>
   4773c:	00c003c4 	movi	r3,15
   47740:	18800416 	blt	r3,r2,47754 <_malloc_r+0x498>
   47744:	9009883a 	mov	r4,r18
   47748:	004f1e80 	call	4f1e8 <__malloc_unlock>
   4774c:	0005883a 	mov	r2,zero
   47750:	003f0706 	br	47370 <__alt_data_end+0xfffc7370>
   47754:	88c00054 	ori	r3,r17,1
   47758:	80c00115 	stw	r3,4(r16)
   4775c:	8463883a 	add	r17,r16,r17
   47760:	10800054 	ori	r2,r2,1
   47764:	9c400215 	stw	r17,8(r19)
   47768:	88800115 	stw	r2,4(r17)
   4776c:	9009883a 	mov	r4,r18
   47770:	004f1e80 	call	4f1e8 <__malloc_unlock>
   47774:	80800204 	addi	r2,r16,8
   47778:	003efd06 	br	47370 <__alt_data_end+0xfffc7370>
   4777c:	00800504 	movi	r2,20
   47780:	10c0482e 	bgeu	r2,r3,478a4 <_malloc_r+0x5e8>
   47784:	00801504 	movi	r2,84
   47788:	10c06836 	bltu	r2,r3,4792c <_malloc_r+0x670>
   4778c:	8806d33a 	srli	r3,r17,12
   47790:	19c01b84 	addi	r7,r3,110
   47794:	39cb883a 	add	r5,r7,r7
   47798:	003f0c06 	br	473cc <__alt_data_end+0xfffc73cc>
   4779c:	3804d27a 	srli	r2,r7,9
   477a0:	01000104 	movi	r4,4
   477a4:	2080422e 	bgeu	r4,r2,478b0 <_malloc_r+0x5f4>
   477a8:	01000504 	movi	r4,20
   477ac:	20807c36 	bltu	r4,r2,479a0 <_malloc_r+0x6e4>
   477b0:	110016c4 	addi	r4,r2,91
   477b4:	210b883a 	add	r5,r4,r4
   477b8:	294b883a 	add	r5,r5,r5
   477bc:	294b883a 	add	r5,r5,r5
   477c0:	994b883a 	add	r5,r19,r5
   477c4:	28800217 	ldw	r2,8(r5)
   477c8:	02000174 	movhi	r8,5
   477cc:	4208d804 	addi	r8,r8,9056
   477d0:	11406326 	beq	r2,r5,47960 <_malloc_r+0x6a4>
   477d4:	01bfff04 	movi	r6,-4
   477d8:	11000117 	ldw	r4,4(r2)
   477dc:	2188703a 	and	r4,r4,r6
   477e0:	3900022e 	bgeu	r7,r4,477ec <_malloc_r+0x530>
   477e4:	10800217 	ldw	r2,8(r2)
   477e8:	28bffb1e 	bne	r5,r2,477d8 <__alt_data_end+0xfffc77d8>
   477ec:	11800317 	ldw	r6,12(r2)
   477f0:	99000117 	ldw	r4,4(r19)
   477f4:	81800315 	stw	r6,12(r16)
   477f8:	80800215 	stw	r2,8(r16)
   477fc:	34000215 	stw	r16,8(r6)
   47800:	14000315 	stw	r16,12(r2)
   47804:	003f2706 	br	474a4 <__alt_data_end+0xfffc74a4>
   47808:	88c00054 	ori	r3,r17,1
   4780c:	80c00115 	stw	r3,4(r16)
   47810:	8463883a 	add	r17,r16,r17
   47814:	34400515 	stw	r17,20(r6)
   47818:	34400415 	stw	r17,16(r6)
   4781c:	10c00054 	ori	r3,r2,1
   47820:	8a400315 	stw	r9,12(r17)
   47824:	8a400215 	stw	r9,8(r17)
   47828:	88c00115 	stw	r3,4(r17)
   4782c:	88a3883a 	add	r17,r17,r2
   47830:	88800015 	stw	r2,0(r17)
   47834:	9009883a 	mov	r4,r18
   47838:	004f1e80 	call	4f1e8 <__malloc_unlock>
   4783c:	80800204 	addi	r2,r16,8
   47840:	003ecb06 	br	47370 <__alt_data_end+0xfffc7370>
   47844:	31000117 	ldw	r4,4(r6)
   47848:	003f1606 	br	474a4 <__alt_data_end+0xfffc74a4>
   4784c:	63000044 	addi	r12,r12,1
   47850:	608000cc 	andi	r2,r12,3
   47854:	5ac00204 	addi	r11,r11,8
   47858:	103f2a1e 	bne	r2,zero,47504 <__alt_data_end+0xfffc7504>
   4785c:	00002106 	br	478e4 <_malloc_r+0x628>
   47860:	80800204 	addi	r2,r16,8
   47864:	84000517 	ldw	r16,20(r16)
   47868:	143eb31e 	bne	r2,r16,47338 <__alt_data_end+0xfffc7338>
   4786c:	18c00084 	addi	r3,r3,2
   47870:	003eec06 	br	47424 <__alt_data_end+0xfffc7424>
   47874:	8085883a 	add	r2,r16,r2
   47878:	10c00117 	ldw	r3,4(r2)
   4787c:	81000317 	ldw	r4,12(r16)
   47880:	81400217 	ldw	r5,8(r16)
   47884:	18c00054 	ori	r3,r3,1
   47888:	10c00115 	stw	r3,4(r2)
   4788c:	29000315 	stw	r4,12(r5)
   47890:	21400215 	stw	r5,8(r4)
   47894:	9009883a 	mov	r4,r18
   47898:	004f1e80 	call	4f1e8 <__malloc_unlock>
   4789c:	80800204 	addi	r2,r16,8
   478a0:	003eb306 	br	47370 <__alt_data_end+0xfffc7370>
   478a4:	19c016c4 	addi	r7,r3,91
   478a8:	39cb883a 	add	r5,r7,r7
   478ac:	003ec706 	br	473cc <__alt_data_end+0xfffc73cc>
   478b0:	3804d1ba 	srli	r2,r7,6
   478b4:	11000e04 	addi	r4,r2,56
   478b8:	210b883a 	add	r5,r4,r4
   478bc:	003fbe06 	br	477b8 <__alt_data_end+0xfffc77b8>
   478c0:	84ff5d26 	beq	r16,r19,47638 <__alt_data_end+0xfffc7638>
   478c4:	9c000217 	ldw	r16,8(r19)
   478c8:	00bfff04 	movi	r2,-4
   478cc:	80c00117 	ldw	r3,4(r16)
   478d0:	1886703a 	and	r3,r3,r2
   478d4:	003f9706 	br	47734 <__alt_data_end+0xfffc7734>
   478d8:	52800017 	ldw	r10,0(r10)
   478dc:	18ffffc4 	addi	r3,r3,-1
   478e0:	50805c1e 	bne	r10,r2,47a54 <_malloc_r+0x798>
   478e4:	190000cc 	andi	r4,r3,3
   478e8:	50bffe04 	addi	r2,r10,-8
   478ec:	203ffa1e 	bne	r4,zero,478d8 <__alt_data_end+0xfffc78d8>
   478f0:	98800117 	ldw	r2,4(r19)
   478f4:	0146303a 	nor	r3,zero,r5
   478f8:	1884703a 	and	r2,r3,r2
   478fc:	98800115 	stw	r2,4(r19)
   47900:	294b883a 	add	r5,r5,r5
   47904:	117f2e36 	bltu	r2,r5,475c0 <__alt_data_end+0xfffc75c0>
   47908:	283f2d26 	beq	r5,zero,475c0 <__alt_data_end+0xfffc75c0>
   4790c:	1146703a 	and	r3,r2,r5
   47910:	1800521e 	bne	r3,zero,47a5c <_malloc_r+0x7a0>
   47914:	6007883a 	mov	r3,r12
   47918:	294b883a 	add	r5,r5,r5
   4791c:	1148703a 	and	r4,r2,r5
   47920:	18c00104 	addi	r3,r3,4
   47924:	203ffc26 	beq	r4,zero,47918 <__alt_data_end+0xfffc7918>
   47928:	003ef006 	br	474ec <__alt_data_end+0xfffc74ec>
   4792c:	00805504 	movi	r2,340
   47930:	10c01336 	bltu	r2,r3,47980 <_malloc_r+0x6c4>
   47934:	8806d3fa 	srli	r3,r17,15
   47938:	19c01dc4 	addi	r7,r3,119
   4793c:	39cb883a 	add	r5,r7,r7
   47940:	003ea206 	br	473cc <__alt_data_end+0xfffc73cc>
   47944:	00c40004 	movi	r3,4096
   47948:	003f4d06 	br	47680 <__alt_data_end+0xfffc7680>
   4794c:	00800044 	movi	r2,1
   47950:	a0800115 	stw	r2,4(r20)
   47954:	a021883a 	mov	r16,r20
   47958:	0007883a 	mov	r3,zero
   4795c:	003f7506 	br	47734 <__alt_data_end+0xfffc7734>
   47960:	200bd0ba 	srai	r5,r4,2
   47964:	01800044 	movi	r6,1
   47968:	41000117 	ldw	r4,4(r8)
   4796c:	314a983a 	sll	r5,r6,r5
   47970:	100d883a 	mov	r6,r2
   47974:	2908b03a 	or	r4,r5,r4
   47978:	41000115 	stw	r4,4(r8)
   4797c:	003f9d06 	br	477f4 <__alt_data_end+0xfffc77f4>
   47980:	00815504 	movi	r2,1364
   47984:	10c01336 	bltu	r2,r3,479d4 <_malloc_r+0x718>
   47988:	8806d4ba 	srli	r3,r17,18
   4798c:	19c01f04 	addi	r7,r3,124
   47990:	39cb883a 	add	r5,r7,r7
   47994:	003e8d06 	br	473cc <__alt_data_end+0xfffc73cc>
   47998:	ad400404 	addi	r21,r21,16
   4799c:	003f1d06 	br	47614 <__alt_data_end+0xfffc7614>
   479a0:	01001504 	movi	r4,84
   479a4:	20801c36 	bltu	r4,r2,47a18 <_malloc_r+0x75c>
   479a8:	3804d33a 	srli	r2,r7,12
   479ac:	11001b84 	addi	r4,r2,110
   479b0:	210b883a 	add	r5,r4,r4
   479b4:	003f8006 	br	477b8 <__alt_data_end+0xfffc77b8>
   479b8:	3083ffcc 	andi	r2,r6,4095
   479bc:	103f241e 	bne	r2,zero,47650 <__alt_data_end+0xfffc7650>
   479c0:	99000217 	ldw	r4,8(r19)
   479c4:	ad85883a 	add	r2,r21,r22
   479c8:	10800054 	ori	r2,r2,1
   479cc:	20800115 	stw	r2,4(r4)
   479d0:	003f4a06 	br	476fc <__alt_data_end+0xfffc76fc>
   479d4:	01403f04 	movi	r5,252
   479d8:	01c01f84 	movi	r7,126
   479dc:	003e7b06 	br	473cc <__alt_data_end+0xfffc73cc>
   479e0:	00c00044 	movi	r3,1
   479e4:	002b883a 	mov	r21,zero
   479e8:	003f3006 	br	476ac <__alt_data_end+0xfffc76ac>
   479ec:	00800174 	movhi	r2,5
   479f0:	108e5f04 	addi	r2,r2,14716
   479f4:	15000015 	stw	r20,0(r2)
   479f8:	003f1b06 	br	47668 <__alt_data_end+0xfffc7668>
   479fc:	9009883a 	mov	r4,r18
   47a00:	81400204 	addi	r5,r16,8
   47a04:	00467200 	call	46720 <_free_r>
   47a08:	00800174 	movhi	r2,5
   47a0c:	10953504 	addi	r2,r2,21716
   47a10:	10c00017 	ldw	r3,0(r2)
   47a14:	003f3906 	br	476fc <__alt_data_end+0xfffc76fc>
   47a18:	01005504 	movi	r4,340
   47a1c:	20800436 	bltu	r4,r2,47a30 <_malloc_r+0x774>
   47a20:	3804d3fa 	srli	r2,r7,15
   47a24:	11001dc4 	addi	r4,r2,119
   47a28:	210b883a 	add	r5,r4,r4
   47a2c:	003f6206 	br	477b8 <__alt_data_end+0xfffc77b8>
   47a30:	01015504 	movi	r4,1364
   47a34:	20800436 	bltu	r4,r2,47a48 <_malloc_r+0x78c>
   47a38:	3804d4ba 	srli	r2,r7,18
   47a3c:	11001f04 	addi	r4,r2,124
   47a40:	210b883a 	add	r5,r4,r4
   47a44:	003f5c06 	br	477b8 <__alt_data_end+0xfffc77b8>
   47a48:	01403f04 	movi	r5,252
   47a4c:	01001f84 	movi	r4,126
   47a50:	003f5906 	br	477b8 <__alt_data_end+0xfffc77b8>
   47a54:	98800117 	ldw	r2,4(r19)
   47a58:	003fa906 	br	47900 <__alt_data_end+0xfffc7900>
   47a5c:	6007883a 	mov	r3,r12
   47a60:	003ea206 	br	474ec <__alt_data_end+0xfffc74ec>

00047a64 <memchr>:
   47a64:	208000cc 	andi	r2,r4,3
   47a68:	280f883a 	mov	r7,r5
   47a6c:	10003526 	beq	r2,zero,47b44 <memchr+0xe0>
   47a70:	30bfffc4 	addi	r2,r6,-1
   47a74:	30001b26 	beq	r6,zero,47ae4 <memchr+0x80>
   47a78:	21800003 	ldbu	r6,0(r4)
   47a7c:	28c03fcc 	andi	r3,r5,255
   47a80:	30c01a26 	beq	r6,r3,47aec <memchr+0x88>
   47a84:	180d883a 	mov	r6,r3
   47a88:	00000406 	br	47a9c <memchr+0x38>
   47a8c:	10001526 	beq	r2,zero,47ae4 <memchr+0x80>
   47a90:	20c00003 	ldbu	r3,0(r4)
   47a94:	10bfffc4 	addi	r2,r2,-1
   47a98:	19801426 	beq	r3,r6,47aec <memchr+0x88>
   47a9c:	21000044 	addi	r4,r4,1
   47aa0:	20c000cc 	andi	r3,r4,3
   47aa4:	183ff91e 	bne	r3,zero,47a8c <__alt_data_end+0xfffc7a8c>
   47aa8:	024000c4 	movi	r9,3
   47aac:	48801136 	bltu	r9,r2,47af4 <memchr+0x90>
   47ab0:	10000c26 	beq	r2,zero,47ae4 <memchr+0x80>
   47ab4:	20c00003 	ldbu	r3,0(r4)
   47ab8:	29403fcc 	andi	r5,r5,255
   47abc:	19400b26 	beq	r3,r5,47aec <memchr+0x88>
   47ac0:	20c00044 	addi	r3,r4,1
   47ac4:	2085883a 	add	r2,r4,r2
   47ac8:	39803fcc 	andi	r6,r7,255
   47acc:	00000306 	br	47adc <memchr+0x78>
   47ad0:	18c00044 	addi	r3,r3,1
   47ad4:	197fffc3 	ldbu	r5,-1(r3)
   47ad8:	29800426 	beq	r5,r6,47aec <memchr+0x88>
   47adc:	1809883a 	mov	r4,r3
   47ae0:	18bffb1e 	bne	r3,r2,47ad0 <__alt_data_end+0xfffc7ad0>
   47ae4:	0005883a 	mov	r2,zero
   47ae8:	f800283a 	ret
   47aec:	2005883a 	mov	r2,r4
   47af0:	f800283a 	ret
   47af4:	28c03fcc 	andi	r3,r5,255
   47af8:	1810923a 	slli	r8,r3,8
   47afc:	02ffbff4 	movhi	r11,65279
   47b00:	02a02074 	movhi	r10,32897
   47b04:	40c6b03a 	or	r3,r8,r3
   47b08:	1810943a 	slli	r8,r3,16
   47b0c:	5affbfc4 	addi	r11,r11,-257
   47b10:	52a02004 	addi	r10,r10,-32640
   47b14:	40d0b03a 	or	r8,r8,r3
   47b18:	20c00017 	ldw	r3,0(r4)
   47b1c:	40c6f03a 	xor	r3,r8,r3
   47b20:	1acd883a 	add	r6,r3,r11
   47b24:	00c6303a 	nor	r3,zero,r3
   47b28:	30c6703a 	and	r3,r6,r3
   47b2c:	1a86703a 	and	r3,r3,r10
   47b30:	183fdf1e 	bne	r3,zero,47ab0 <__alt_data_end+0xfffc7ab0>
   47b34:	10bfff04 	addi	r2,r2,-4
   47b38:	21000104 	addi	r4,r4,4
   47b3c:	48bff636 	bltu	r9,r2,47b18 <__alt_data_end+0xfffc7b18>
   47b40:	003fdb06 	br	47ab0 <__alt_data_end+0xfffc7ab0>
   47b44:	3005883a 	mov	r2,r6
   47b48:	003fd706 	br	47aa8 <__alt_data_end+0xfffc7aa8>

00047b4c <memcpy>:
   47b4c:	deffff04 	addi	sp,sp,-4
   47b50:	dc000015 	stw	r16,0(sp)
   47b54:	00c003c4 	movi	r3,15
   47b58:	2005883a 	mov	r2,r4
   47b5c:	1980432e 	bgeu	r3,r6,47c6c <memcpy+0x120>
   47b60:	2146b03a 	or	r3,r4,r5
   47b64:	18c000cc 	andi	r3,r3,3
   47b68:	1800421e 	bne	r3,zero,47c74 <memcpy+0x128>
   47b6c:	343ffc04 	addi	r16,r6,-16
   47b70:	8020d13a 	srli	r16,r16,4
   47b74:	28c00104 	addi	r3,r5,4
   47b78:	23400104 	addi	r13,r4,4
   47b7c:	801e913a 	slli	r15,r16,4
   47b80:	2b000204 	addi	r12,r5,8
   47b84:	22c00204 	addi	r11,r4,8
   47b88:	7bc00504 	addi	r15,r15,20
   47b8c:	2a800304 	addi	r10,r5,12
   47b90:	22400304 	addi	r9,r4,12
   47b94:	2bdf883a 	add	r15,r5,r15
   47b98:	2811883a 	mov	r8,r5
   47b9c:	200f883a 	mov	r7,r4
   47ba0:	41000017 	ldw	r4,0(r8)
   47ba4:	39c00404 	addi	r7,r7,16
   47ba8:	18c00404 	addi	r3,r3,16
   47bac:	393ffc15 	stw	r4,-16(r7)
   47bb0:	1bbffc17 	ldw	r14,-16(r3)
   47bb4:	6b400404 	addi	r13,r13,16
   47bb8:	5ac00404 	addi	r11,r11,16
   47bbc:	6bbffc15 	stw	r14,-16(r13)
   47bc0:	63800017 	ldw	r14,0(r12)
   47bc4:	4a400404 	addi	r9,r9,16
   47bc8:	42000404 	addi	r8,r8,16
   47bcc:	5bbffc15 	stw	r14,-16(r11)
   47bd0:	53800017 	ldw	r14,0(r10)
   47bd4:	63000404 	addi	r12,r12,16
   47bd8:	52800404 	addi	r10,r10,16
   47bdc:	4bbffc15 	stw	r14,-16(r9)
   47be0:	1bffef1e 	bne	r3,r15,47ba0 <__alt_data_end+0xfffc7ba0>
   47be4:	81c00044 	addi	r7,r16,1
   47be8:	380e913a 	slli	r7,r7,4
   47bec:	310003cc 	andi	r4,r6,15
   47bf0:	02c000c4 	movi	r11,3
   47bf4:	11c7883a 	add	r3,r2,r7
   47bf8:	29cb883a 	add	r5,r5,r7
   47bfc:	59001f2e 	bgeu	r11,r4,47c7c <memcpy+0x130>
   47c00:	1813883a 	mov	r9,r3
   47c04:	2811883a 	mov	r8,r5
   47c08:	200f883a 	mov	r7,r4
   47c0c:	42800017 	ldw	r10,0(r8)
   47c10:	4a400104 	addi	r9,r9,4
   47c14:	39ffff04 	addi	r7,r7,-4
   47c18:	4abfff15 	stw	r10,-4(r9)
   47c1c:	42000104 	addi	r8,r8,4
   47c20:	59fffa36 	bltu	r11,r7,47c0c <__alt_data_end+0xfffc7c0c>
   47c24:	213fff04 	addi	r4,r4,-4
   47c28:	2008d0ba 	srli	r4,r4,2
   47c2c:	318000cc 	andi	r6,r6,3
   47c30:	21000044 	addi	r4,r4,1
   47c34:	2109883a 	add	r4,r4,r4
   47c38:	2109883a 	add	r4,r4,r4
   47c3c:	1907883a 	add	r3,r3,r4
   47c40:	290b883a 	add	r5,r5,r4
   47c44:	30000626 	beq	r6,zero,47c60 <memcpy+0x114>
   47c48:	198d883a 	add	r6,r3,r6
   47c4c:	29c00003 	ldbu	r7,0(r5)
   47c50:	18c00044 	addi	r3,r3,1
   47c54:	29400044 	addi	r5,r5,1
   47c58:	19ffffc5 	stb	r7,-1(r3)
   47c5c:	19bffb1e 	bne	r3,r6,47c4c <__alt_data_end+0xfffc7c4c>
   47c60:	dc000017 	ldw	r16,0(sp)
   47c64:	dec00104 	addi	sp,sp,4
   47c68:	f800283a 	ret
   47c6c:	2007883a 	mov	r3,r4
   47c70:	003ff406 	br	47c44 <__alt_data_end+0xfffc7c44>
   47c74:	2007883a 	mov	r3,r4
   47c78:	003ff306 	br	47c48 <__alt_data_end+0xfffc7c48>
   47c7c:	200d883a 	mov	r6,r4
   47c80:	003ff006 	br	47c44 <__alt_data_end+0xfffc7c44>

00047c84 <memmove>:
   47c84:	2005883a 	mov	r2,r4
   47c88:	29000b2e 	bgeu	r5,r4,47cb8 <memmove+0x34>
   47c8c:	298f883a 	add	r7,r5,r6
   47c90:	21c0092e 	bgeu	r4,r7,47cb8 <memmove+0x34>
   47c94:	2187883a 	add	r3,r4,r6
   47c98:	198bc83a 	sub	r5,r3,r6
   47c9c:	30004b26 	beq	r6,zero,47dcc <memmove+0x148>
   47ca0:	39ffffc4 	addi	r7,r7,-1
   47ca4:	39000003 	ldbu	r4,0(r7)
   47ca8:	18ffffc4 	addi	r3,r3,-1
   47cac:	19000005 	stb	r4,0(r3)
   47cb0:	197ffb1e 	bne	r3,r5,47ca0 <__alt_data_end+0xfffc7ca0>
   47cb4:	f800283a 	ret
   47cb8:	00c003c4 	movi	r3,15
   47cbc:	1980412e 	bgeu	r3,r6,47dc4 <memmove+0x140>
   47cc0:	1146b03a 	or	r3,r2,r5
   47cc4:	18c000cc 	andi	r3,r3,3
   47cc8:	1800411e 	bne	r3,zero,47dd0 <memmove+0x14c>
   47ccc:	33fffc04 	addi	r15,r6,-16
   47cd0:	781ed13a 	srli	r15,r15,4
   47cd4:	28c00104 	addi	r3,r5,4
   47cd8:	13400104 	addi	r13,r2,4
   47cdc:	781c913a 	slli	r14,r15,4
   47ce0:	2b000204 	addi	r12,r5,8
   47ce4:	12c00204 	addi	r11,r2,8
   47ce8:	73800504 	addi	r14,r14,20
   47cec:	2a800304 	addi	r10,r5,12
   47cf0:	12400304 	addi	r9,r2,12
   47cf4:	2b9d883a 	add	r14,r5,r14
   47cf8:	2811883a 	mov	r8,r5
   47cfc:	100f883a 	mov	r7,r2
   47d00:	41000017 	ldw	r4,0(r8)
   47d04:	39c00404 	addi	r7,r7,16
   47d08:	18c00404 	addi	r3,r3,16
   47d0c:	393ffc15 	stw	r4,-16(r7)
   47d10:	193ffc17 	ldw	r4,-16(r3)
   47d14:	6b400404 	addi	r13,r13,16
   47d18:	5ac00404 	addi	r11,r11,16
   47d1c:	693ffc15 	stw	r4,-16(r13)
   47d20:	61000017 	ldw	r4,0(r12)
   47d24:	4a400404 	addi	r9,r9,16
   47d28:	42000404 	addi	r8,r8,16
   47d2c:	593ffc15 	stw	r4,-16(r11)
   47d30:	51000017 	ldw	r4,0(r10)
   47d34:	63000404 	addi	r12,r12,16
   47d38:	52800404 	addi	r10,r10,16
   47d3c:	493ffc15 	stw	r4,-16(r9)
   47d40:	1bbfef1e 	bne	r3,r14,47d00 <__alt_data_end+0xfffc7d00>
   47d44:	79000044 	addi	r4,r15,1
   47d48:	2008913a 	slli	r4,r4,4
   47d4c:	328003cc 	andi	r10,r6,15
   47d50:	02c000c4 	movi	r11,3
   47d54:	1107883a 	add	r3,r2,r4
   47d58:	290b883a 	add	r5,r5,r4
   47d5c:	5a801e2e 	bgeu	r11,r10,47dd8 <memmove+0x154>
   47d60:	1813883a 	mov	r9,r3
   47d64:	2811883a 	mov	r8,r5
   47d68:	500f883a 	mov	r7,r10
   47d6c:	41000017 	ldw	r4,0(r8)
   47d70:	4a400104 	addi	r9,r9,4
   47d74:	39ffff04 	addi	r7,r7,-4
   47d78:	493fff15 	stw	r4,-4(r9)
   47d7c:	42000104 	addi	r8,r8,4
   47d80:	59fffa36 	bltu	r11,r7,47d6c <__alt_data_end+0xfffc7d6c>
   47d84:	513fff04 	addi	r4,r10,-4
   47d88:	2008d0ba 	srli	r4,r4,2
   47d8c:	318000cc 	andi	r6,r6,3
   47d90:	21000044 	addi	r4,r4,1
   47d94:	2109883a 	add	r4,r4,r4
   47d98:	2109883a 	add	r4,r4,r4
   47d9c:	1907883a 	add	r3,r3,r4
   47da0:	290b883a 	add	r5,r5,r4
   47da4:	30000926 	beq	r6,zero,47dcc <memmove+0x148>
   47da8:	198d883a 	add	r6,r3,r6
   47dac:	29c00003 	ldbu	r7,0(r5)
   47db0:	18c00044 	addi	r3,r3,1
   47db4:	29400044 	addi	r5,r5,1
   47db8:	19ffffc5 	stb	r7,-1(r3)
   47dbc:	19bffb1e 	bne	r3,r6,47dac <__alt_data_end+0xfffc7dac>
   47dc0:	f800283a 	ret
   47dc4:	1007883a 	mov	r3,r2
   47dc8:	003ff606 	br	47da4 <__alt_data_end+0xfffc7da4>
   47dcc:	f800283a 	ret
   47dd0:	1007883a 	mov	r3,r2
   47dd4:	003ff406 	br	47da8 <__alt_data_end+0xfffc7da8>
   47dd8:	500d883a 	mov	r6,r10
   47ddc:	003ff106 	br	47da4 <__alt_data_end+0xfffc7da4>

00047de0 <memset>:
   47de0:	20c000cc 	andi	r3,r4,3
   47de4:	2005883a 	mov	r2,r4
   47de8:	18004326 	beq	r3,zero,47ef8 <memset+0x118>
   47dec:	31ffffc4 	addi	r7,r6,-1
   47df0:	30004026 	beq	r6,zero,47ef4 <memset+0x114>
   47df4:	2813883a 	mov	r9,r5
   47df8:	200d883a 	mov	r6,r4
   47dfc:	2007883a 	mov	r3,r4
   47e00:	00000406 	br	47e14 <memset+0x34>
   47e04:	3a3fffc4 	addi	r8,r7,-1
   47e08:	31800044 	addi	r6,r6,1
   47e0c:	38003926 	beq	r7,zero,47ef4 <memset+0x114>
   47e10:	400f883a 	mov	r7,r8
   47e14:	18c00044 	addi	r3,r3,1
   47e18:	32400005 	stb	r9,0(r6)
   47e1c:	1a0000cc 	andi	r8,r3,3
   47e20:	403ff81e 	bne	r8,zero,47e04 <__alt_data_end+0xfffc7e04>
   47e24:	010000c4 	movi	r4,3
   47e28:	21c02d2e 	bgeu	r4,r7,47ee0 <memset+0x100>
   47e2c:	29803fcc 	andi	r6,r5,255
   47e30:	3008923a 	slli	r4,r6,8
   47e34:	218cb03a 	or	r6,r4,r6
   47e38:	3008943a 	slli	r4,r6,16
   47e3c:	218cb03a 	or	r6,r4,r6
   47e40:	010003c4 	movi	r4,15
   47e44:	21c0182e 	bgeu	r4,r7,47ea8 <memset+0xc8>
   47e48:	3b3ffc04 	addi	r12,r7,-16
   47e4c:	6018d13a 	srli	r12,r12,4
   47e50:	1a000104 	addi	r8,r3,4
   47e54:	1ac00204 	addi	r11,r3,8
   47e58:	6008913a 	slli	r4,r12,4
   47e5c:	1a800304 	addi	r10,r3,12
   47e60:	1813883a 	mov	r9,r3
   47e64:	21000504 	addi	r4,r4,20
   47e68:	1909883a 	add	r4,r3,r4
   47e6c:	49800015 	stw	r6,0(r9)
   47e70:	41800015 	stw	r6,0(r8)
   47e74:	59800015 	stw	r6,0(r11)
   47e78:	51800015 	stw	r6,0(r10)
   47e7c:	42000404 	addi	r8,r8,16
   47e80:	4a400404 	addi	r9,r9,16
   47e84:	5ac00404 	addi	r11,r11,16
   47e88:	52800404 	addi	r10,r10,16
   47e8c:	413ff71e 	bne	r8,r4,47e6c <__alt_data_end+0xfffc7e6c>
   47e90:	63000044 	addi	r12,r12,1
   47e94:	6018913a 	slli	r12,r12,4
   47e98:	39c003cc 	andi	r7,r7,15
   47e9c:	010000c4 	movi	r4,3
   47ea0:	1b07883a 	add	r3,r3,r12
   47ea4:	21c00e2e 	bgeu	r4,r7,47ee0 <memset+0x100>
   47ea8:	1813883a 	mov	r9,r3
   47eac:	3811883a 	mov	r8,r7
   47eb0:	010000c4 	movi	r4,3
   47eb4:	49800015 	stw	r6,0(r9)
   47eb8:	423fff04 	addi	r8,r8,-4
   47ebc:	4a400104 	addi	r9,r9,4
   47ec0:	223ffc36 	bltu	r4,r8,47eb4 <__alt_data_end+0xfffc7eb4>
   47ec4:	393fff04 	addi	r4,r7,-4
   47ec8:	2008d0ba 	srli	r4,r4,2
   47ecc:	39c000cc 	andi	r7,r7,3
   47ed0:	21000044 	addi	r4,r4,1
   47ed4:	2109883a 	add	r4,r4,r4
   47ed8:	2109883a 	add	r4,r4,r4
   47edc:	1907883a 	add	r3,r3,r4
   47ee0:	38000426 	beq	r7,zero,47ef4 <memset+0x114>
   47ee4:	19cf883a 	add	r7,r3,r7
   47ee8:	19400005 	stb	r5,0(r3)
   47eec:	18c00044 	addi	r3,r3,1
   47ef0:	19fffd1e 	bne	r3,r7,47ee8 <__alt_data_end+0xfffc7ee8>
   47ef4:	f800283a 	ret
   47ef8:	2007883a 	mov	r3,r4
   47efc:	300f883a 	mov	r7,r6
   47f00:	003fc806 	br	47e24 <__alt_data_end+0xfffc7e24>

00047f04 <_Balloc>:
   47f04:	20801317 	ldw	r2,76(r4)
   47f08:	defffc04 	addi	sp,sp,-16
   47f0c:	dc400115 	stw	r17,4(sp)
   47f10:	dc000015 	stw	r16,0(sp)
   47f14:	dfc00315 	stw	ra,12(sp)
   47f18:	dc800215 	stw	r18,8(sp)
   47f1c:	2023883a 	mov	r17,r4
   47f20:	2821883a 	mov	r16,r5
   47f24:	10000f26 	beq	r2,zero,47f64 <_Balloc+0x60>
   47f28:	8407883a 	add	r3,r16,r16
   47f2c:	18c7883a 	add	r3,r3,r3
   47f30:	10c7883a 	add	r3,r2,r3
   47f34:	18800017 	ldw	r2,0(r3)
   47f38:	10001126 	beq	r2,zero,47f80 <_Balloc+0x7c>
   47f3c:	11000017 	ldw	r4,0(r2)
   47f40:	19000015 	stw	r4,0(r3)
   47f44:	10000415 	stw	zero,16(r2)
   47f48:	10000315 	stw	zero,12(r2)
   47f4c:	dfc00317 	ldw	ra,12(sp)
   47f50:	dc800217 	ldw	r18,8(sp)
   47f54:	dc400117 	ldw	r17,4(sp)
   47f58:	dc000017 	ldw	r16,0(sp)
   47f5c:	dec00404 	addi	sp,sp,16
   47f60:	f800283a 	ret
   47f64:	01400104 	movi	r5,4
   47f68:	01800844 	movi	r6,33
   47f6c:	004ada00 	call	4ada0 <_calloc_r>
   47f70:	88801315 	stw	r2,76(r17)
   47f74:	103fec1e 	bne	r2,zero,47f28 <__alt_data_end+0xfffc7f28>
   47f78:	0005883a 	mov	r2,zero
   47f7c:	003ff306 	br	47f4c <__alt_data_end+0xfffc7f4c>
   47f80:	01400044 	movi	r5,1
   47f84:	2c24983a 	sll	r18,r5,r16
   47f88:	8809883a 	mov	r4,r17
   47f8c:	91800144 	addi	r6,r18,5
   47f90:	318d883a 	add	r6,r6,r6
   47f94:	318d883a 	add	r6,r6,r6
   47f98:	004ada00 	call	4ada0 <_calloc_r>
   47f9c:	103ff626 	beq	r2,zero,47f78 <__alt_data_end+0xfffc7f78>
   47fa0:	14000115 	stw	r16,4(r2)
   47fa4:	14800215 	stw	r18,8(r2)
   47fa8:	003fe606 	br	47f44 <__alt_data_end+0xfffc7f44>

00047fac <_Bfree>:
   47fac:	28000826 	beq	r5,zero,47fd0 <_Bfree+0x24>
   47fb0:	28c00117 	ldw	r3,4(r5)
   47fb4:	20801317 	ldw	r2,76(r4)
   47fb8:	18c7883a 	add	r3,r3,r3
   47fbc:	18c7883a 	add	r3,r3,r3
   47fc0:	10c5883a 	add	r2,r2,r3
   47fc4:	10c00017 	ldw	r3,0(r2)
   47fc8:	28c00015 	stw	r3,0(r5)
   47fcc:	11400015 	stw	r5,0(r2)
   47fd0:	f800283a 	ret

00047fd4 <__multadd>:
   47fd4:	defff704 	addi	sp,sp,-36
   47fd8:	dc800215 	stw	r18,8(sp)
   47fdc:	2c800417 	ldw	r18,16(r5)
   47fe0:	ddc00715 	stw	r23,28(sp)
   47fe4:	dd800615 	stw	r22,24(sp)
   47fe8:	dd000415 	stw	r20,16(sp)
   47fec:	dcc00315 	stw	r19,12(sp)
   47ff0:	dc400115 	stw	r17,4(sp)
   47ff4:	dc000015 	stw	r16,0(sp)
   47ff8:	dfc00815 	stw	ra,32(sp)
   47ffc:	dd400515 	stw	r21,20(sp)
   48000:	2827883a 	mov	r19,r5
   48004:	2029883a 	mov	r20,r4
   48008:	3023883a 	mov	r17,r6
   4800c:	3821883a 	mov	r16,r7
   48010:	2d800504 	addi	r22,r5,20
   48014:	002f883a 	mov	r23,zero
   48018:	b5400017 	ldw	r21,0(r22)
   4801c:	880b883a 	mov	r5,r17
   48020:	bdc00044 	addi	r23,r23,1
   48024:	a93fffcc 	andi	r4,r21,65535
   48028:	004c3c40 	call	4c3c4 <__mulsi3>
   4802c:	1421883a 	add	r16,r2,r16
   48030:	a808d43a 	srli	r4,r21,16
   48034:	802ad43a 	srli	r21,r16,16
   48038:	880b883a 	mov	r5,r17
   4803c:	004c3c40 	call	4c3c4 <__mulsi3>
   48040:	a88f883a 	add	r7,r21,r2
   48044:	3804943a 	slli	r2,r7,16
   48048:	80ffffcc 	andi	r3,r16,65535
   4804c:	b5800104 	addi	r22,r22,4
   48050:	10c7883a 	add	r3,r2,r3
   48054:	b0ffff15 	stw	r3,-4(r22)
   48058:	3820d43a 	srli	r16,r7,16
   4805c:	bcbfee16 	blt	r23,r18,48018 <__alt_data_end+0xfffc8018>
   48060:	80000926 	beq	r16,zero,48088 <__multadd+0xb4>
   48064:	98800217 	ldw	r2,8(r19)
   48068:	9080130e 	bge	r18,r2,480b8 <__multadd+0xe4>
   4806c:	90800144 	addi	r2,r18,5
   48070:	1085883a 	add	r2,r2,r2
   48074:	1085883a 	add	r2,r2,r2
   48078:	9885883a 	add	r2,r19,r2
   4807c:	14000015 	stw	r16,0(r2)
   48080:	94800044 	addi	r18,r18,1
   48084:	9c800415 	stw	r18,16(r19)
   48088:	9805883a 	mov	r2,r19
   4808c:	dfc00817 	ldw	ra,32(sp)
   48090:	ddc00717 	ldw	r23,28(sp)
   48094:	dd800617 	ldw	r22,24(sp)
   48098:	dd400517 	ldw	r21,20(sp)
   4809c:	dd000417 	ldw	r20,16(sp)
   480a0:	dcc00317 	ldw	r19,12(sp)
   480a4:	dc800217 	ldw	r18,8(sp)
   480a8:	dc400117 	ldw	r17,4(sp)
   480ac:	dc000017 	ldw	r16,0(sp)
   480b0:	dec00904 	addi	sp,sp,36
   480b4:	f800283a 	ret
   480b8:	99400117 	ldw	r5,4(r19)
   480bc:	a009883a 	mov	r4,r20
   480c0:	29400044 	addi	r5,r5,1
   480c4:	0047f040 	call	47f04 <_Balloc>
   480c8:	99800417 	ldw	r6,16(r19)
   480cc:	99400304 	addi	r5,r19,12
   480d0:	11000304 	addi	r4,r2,12
   480d4:	31800084 	addi	r6,r6,2
   480d8:	318d883a 	add	r6,r6,r6
   480dc:	318d883a 	add	r6,r6,r6
   480e0:	1023883a 	mov	r17,r2
   480e4:	0047b4c0 	call	47b4c <memcpy>
   480e8:	99000117 	ldw	r4,4(r19)
   480ec:	a0c01317 	ldw	r3,76(r20)
   480f0:	2109883a 	add	r4,r4,r4
   480f4:	2109883a 	add	r4,r4,r4
   480f8:	1907883a 	add	r3,r3,r4
   480fc:	18800017 	ldw	r2,0(r3)
   48100:	98800015 	stw	r2,0(r19)
   48104:	1cc00015 	stw	r19,0(r3)
   48108:	8827883a 	mov	r19,r17
   4810c:	003fd706 	br	4806c <__alt_data_end+0xfffc806c>

00048110 <__s2b>:
   48110:	defff904 	addi	sp,sp,-28
   48114:	dc400115 	stw	r17,4(sp)
   48118:	dc000015 	stw	r16,0(sp)
   4811c:	2023883a 	mov	r17,r4
   48120:	2821883a 	mov	r16,r5
   48124:	39000204 	addi	r4,r7,8
   48128:	01400244 	movi	r5,9
   4812c:	dcc00315 	stw	r19,12(sp)
   48130:	dc800215 	stw	r18,8(sp)
   48134:	dfc00615 	stw	ra,24(sp)
   48138:	dd400515 	stw	r21,20(sp)
   4813c:	dd000415 	stw	r20,16(sp)
   48140:	3825883a 	mov	r18,r7
   48144:	3027883a 	mov	r19,r6
   48148:	004c3040 	call	4c304 <__divsi3>
   4814c:	00c00044 	movi	r3,1
   48150:	000b883a 	mov	r5,zero
   48154:	1880030e 	bge	r3,r2,48164 <__s2b+0x54>
   48158:	18c7883a 	add	r3,r3,r3
   4815c:	29400044 	addi	r5,r5,1
   48160:	18bffd16 	blt	r3,r2,48158 <__alt_data_end+0xfffc8158>
   48164:	8809883a 	mov	r4,r17
   48168:	0047f040 	call	47f04 <_Balloc>
   4816c:	d8c00717 	ldw	r3,28(sp)
   48170:	10c00515 	stw	r3,20(r2)
   48174:	00c00044 	movi	r3,1
   48178:	10c00415 	stw	r3,16(r2)
   4817c:	00c00244 	movi	r3,9
   48180:	1cc0210e 	bge	r3,r19,48208 <__s2b+0xf8>
   48184:	80eb883a 	add	r21,r16,r3
   48188:	a829883a 	mov	r20,r21
   4818c:	84e1883a 	add	r16,r16,r19
   48190:	a1c00007 	ldb	r7,0(r20)
   48194:	8809883a 	mov	r4,r17
   48198:	a5000044 	addi	r20,r20,1
   4819c:	100b883a 	mov	r5,r2
   481a0:	01800284 	movi	r6,10
   481a4:	39fff404 	addi	r7,r7,-48
   481a8:	0047fd40 	call	47fd4 <__multadd>
   481ac:	a43ff81e 	bne	r20,r16,48190 <__alt_data_end+0xfffc8190>
   481b0:	ace1883a 	add	r16,r21,r19
   481b4:	843ffe04 	addi	r16,r16,-8
   481b8:	9c800a0e 	bge	r19,r18,481e4 <__s2b+0xd4>
   481bc:	94e5c83a 	sub	r18,r18,r19
   481c0:	84a5883a 	add	r18,r16,r18
   481c4:	81c00007 	ldb	r7,0(r16)
   481c8:	8809883a 	mov	r4,r17
   481cc:	84000044 	addi	r16,r16,1
   481d0:	100b883a 	mov	r5,r2
   481d4:	01800284 	movi	r6,10
   481d8:	39fff404 	addi	r7,r7,-48
   481dc:	0047fd40 	call	47fd4 <__multadd>
   481e0:	84bff81e 	bne	r16,r18,481c4 <__alt_data_end+0xfffc81c4>
   481e4:	dfc00617 	ldw	ra,24(sp)
   481e8:	dd400517 	ldw	r21,20(sp)
   481ec:	dd000417 	ldw	r20,16(sp)
   481f0:	dcc00317 	ldw	r19,12(sp)
   481f4:	dc800217 	ldw	r18,8(sp)
   481f8:	dc400117 	ldw	r17,4(sp)
   481fc:	dc000017 	ldw	r16,0(sp)
   48200:	dec00704 	addi	sp,sp,28
   48204:	f800283a 	ret
   48208:	84000284 	addi	r16,r16,10
   4820c:	1827883a 	mov	r19,r3
   48210:	003fe906 	br	481b8 <__alt_data_end+0xfffc81b8>

00048214 <__hi0bits>:
   48214:	20bfffec 	andhi	r2,r4,65535
   48218:	1000141e 	bne	r2,zero,4826c <__hi0bits+0x58>
   4821c:	2008943a 	slli	r4,r4,16
   48220:	00800404 	movi	r2,16
   48224:	20ffc02c 	andhi	r3,r4,65280
   48228:	1800021e 	bne	r3,zero,48234 <__hi0bits+0x20>
   4822c:	2008923a 	slli	r4,r4,8
   48230:	10800204 	addi	r2,r2,8
   48234:	20fc002c 	andhi	r3,r4,61440
   48238:	1800021e 	bne	r3,zero,48244 <__hi0bits+0x30>
   4823c:	2008913a 	slli	r4,r4,4
   48240:	10800104 	addi	r2,r2,4
   48244:	20f0002c 	andhi	r3,r4,49152
   48248:	1800031e 	bne	r3,zero,48258 <__hi0bits+0x44>
   4824c:	2109883a 	add	r4,r4,r4
   48250:	10800084 	addi	r2,r2,2
   48254:	2109883a 	add	r4,r4,r4
   48258:	20000316 	blt	r4,zero,48268 <__hi0bits+0x54>
   4825c:	2110002c 	andhi	r4,r4,16384
   48260:	2000041e 	bne	r4,zero,48274 <__hi0bits+0x60>
   48264:	00800804 	movi	r2,32
   48268:	f800283a 	ret
   4826c:	0005883a 	mov	r2,zero
   48270:	003fec06 	br	48224 <__alt_data_end+0xfffc8224>
   48274:	10800044 	addi	r2,r2,1
   48278:	f800283a 	ret

0004827c <__lo0bits>:
   4827c:	20c00017 	ldw	r3,0(r4)
   48280:	188001cc 	andi	r2,r3,7
   48284:	10000826 	beq	r2,zero,482a8 <__lo0bits+0x2c>
   48288:	1880004c 	andi	r2,r3,1
   4828c:	1000211e 	bne	r2,zero,48314 <__lo0bits+0x98>
   48290:	1880008c 	andi	r2,r3,2
   48294:	1000211e 	bne	r2,zero,4831c <__lo0bits+0xa0>
   48298:	1806d0ba 	srli	r3,r3,2
   4829c:	00800084 	movi	r2,2
   482a0:	20c00015 	stw	r3,0(r4)
   482a4:	f800283a 	ret
   482a8:	18bfffcc 	andi	r2,r3,65535
   482ac:	10001326 	beq	r2,zero,482fc <__lo0bits+0x80>
   482b0:	0005883a 	mov	r2,zero
   482b4:	19403fcc 	andi	r5,r3,255
   482b8:	2800021e 	bne	r5,zero,482c4 <__lo0bits+0x48>
   482bc:	1806d23a 	srli	r3,r3,8
   482c0:	10800204 	addi	r2,r2,8
   482c4:	194003cc 	andi	r5,r3,15
   482c8:	2800021e 	bne	r5,zero,482d4 <__lo0bits+0x58>
   482cc:	1806d13a 	srli	r3,r3,4
   482d0:	10800104 	addi	r2,r2,4
   482d4:	194000cc 	andi	r5,r3,3
   482d8:	2800021e 	bne	r5,zero,482e4 <__lo0bits+0x68>
   482dc:	1806d0ba 	srli	r3,r3,2
   482e0:	10800084 	addi	r2,r2,2
   482e4:	1940004c 	andi	r5,r3,1
   482e8:	2800081e 	bne	r5,zero,4830c <__lo0bits+0x90>
   482ec:	1806d07a 	srli	r3,r3,1
   482f0:	1800051e 	bne	r3,zero,48308 <__lo0bits+0x8c>
   482f4:	00800804 	movi	r2,32
   482f8:	f800283a 	ret
   482fc:	1806d43a 	srli	r3,r3,16
   48300:	00800404 	movi	r2,16
   48304:	003feb06 	br	482b4 <__alt_data_end+0xfffc82b4>
   48308:	10800044 	addi	r2,r2,1
   4830c:	20c00015 	stw	r3,0(r4)
   48310:	f800283a 	ret
   48314:	0005883a 	mov	r2,zero
   48318:	f800283a 	ret
   4831c:	1806d07a 	srli	r3,r3,1
   48320:	00800044 	movi	r2,1
   48324:	20c00015 	stw	r3,0(r4)
   48328:	f800283a 	ret

0004832c <__i2b>:
   4832c:	defffd04 	addi	sp,sp,-12
   48330:	dc000015 	stw	r16,0(sp)
   48334:	04000044 	movi	r16,1
   48338:	dc400115 	stw	r17,4(sp)
   4833c:	2823883a 	mov	r17,r5
   48340:	800b883a 	mov	r5,r16
   48344:	dfc00215 	stw	ra,8(sp)
   48348:	0047f040 	call	47f04 <_Balloc>
   4834c:	14400515 	stw	r17,20(r2)
   48350:	14000415 	stw	r16,16(r2)
   48354:	dfc00217 	ldw	ra,8(sp)
   48358:	dc400117 	ldw	r17,4(sp)
   4835c:	dc000017 	ldw	r16,0(sp)
   48360:	dec00304 	addi	sp,sp,12
   48364:	f800283a 	ret

00048368 <__multiply>:
   48368:	deffef04 	addi	sp,sp,-68
   4836c:	dc400815 	stw	r17,32(sp)
   48370:	dc000715 	stw	r16,28(sp)
   48374:	2c400417 	ldw	r17,16(r5)
   48378:	34000417 	ldw	r16,16(r6)
   4837c:	dd800d15 	stw	r22,52(sp)
   48380:	dc800915 	stw	r18,36(sp)
   48384:	dfc01015 	stw	ra,64(sp)
   48388:	df000f15 	stw	fp,60(sp)
   4838c:	ddc00e15 	stw	r23,56(sp)
   48390:	dd400c15 	stw	r21,48(sp)
   48394:	dd000b15 	stw	r20,44(sp)
   48398:	dcc00a15 	stw	r19,40(sp)
   4839c:	2825883a 	mov	r18,r5
   483a0:	302d883a 	mov	r22,r6
   483a4:	8c009116 	blt	r17,r16,485ec <__multiply+0x284>
   483a8:	8005883a 	mov	r2,r16
   483ac:	8821883a 	mov	r16,r17
   483b0:	1023883a 	mov	r17,r2
   483b4:	90800217 	ldw	r2,8(r18)
   483b8:	8447883a 	add	r3,r16,r17
   483bc:	d8c00215 	stw	r3,8(sp)
   483c0:	91400117 	ldw	r5,4(r18)
   483c4:	10c0010e 	bge	r2,r3,483cc <__multiply+0x64>
   483c8:	29400044 	addi	r5,r5,1
   483cc:	0047f040 	call	47f04 <_Balloc>
   483d0:	d8c00217 	ldw	r3,8(sp)
   483d4:	d8800615 	stw	r2,24(sp)
   483d8:	18eb883a 	add	r21,r3,r3
   483dc:	ad6b883a 	add	r21,r21,r21
   483e0:	10c00504 	addi	r3,r2,20
   483e4:	1d6b883a 	add	r21,r3,r21
   483e8:	d8c00115 	stw	r3,4(sp)
   483ec:	dd400315 	stw	r21,12(sp)
   483f0:	1805883a 	mov	r2,r3
   483f4:	1d40042e 	bgeu	r3,r21,48408 <__multiply+0xa0>
   483f8:	d8c00317 	ldw	r3,12(sp)
   483fc:	10000015 	stw	zero,0(r2)
   48400:	10800104 	addi	r2,r2,4
   48404:	10fffc36 	bltu	r2,r3,483f8 <__alt_data_end+0xfffc83f8>
   48408:	8c63883a 	add	r17,r17,r17
   4840c:	b5800504 	addi	r22,r22,20
   48410:	8c63883a 	add	r17,r17,r17
   48414:	94800504 	addi	r18,r18,20
   48418:	8421883a 	add	r16,r16,r16
   4841c:	b463883a 	add	r17,r22,r17
   48420:	8421883a 	add	r16,r16,r16
   48424:	dd800015 	stw	r22,0(sp)
   48428:	dc800415 	stw	r18,16(sp)
   4842c:	dc400515 	stw	r17,20(sp)
   48430:	9429883a 	add	r20,r18,r16
   48434:	b4404f2e 	bgeu	r22,r17,48574 <__multiply+0x20c>
   48438:	d8c00017 	ldw	r3,0(sp)
   4843c:	1c800017 	ldw	r18,0(r3)
   48440:	943fffcc 	andi	r16,r18,65535
   48444:	80001e26 	beq	r16,zero,484c0 <__multiply+0x158>
   48448:	dd800117 	ldw	r22,4(sp)
   4844c:	dd400417 	ldw	r21,16(sp)
   48450:	0025883a 	mov	r18,zero
   48454:	adc00017 	ldw	r23,0(r21)
   48458:	b4c00017 	ldw	r19,0(r22)
   4845c:	800b883a 	mov	r5,r16
   48460:	b93fffcc 	andi	r4,r23,65535
   48464:	004c3c40 	call	4c3c4 <__mulsi3>
   48468:	9c7fffcc 	andi	r17,r19,65535
   4846c:	8885883a 	add	r2,r17,r2
   48470:	b808d43a 	srli	r4,r23,16
   48474:	14a3883a 	add	r17,r2,r18
   48478:	9826d43a 	srli	r19,r19,16
   4847c:	8824d43a 	srli	r18,r17,16
   48480:	800b883a 	mov	r5,r16
   48484:	004c3c40 	call	4c3c4 <__mulsi3>
   48488:	9885883a 	add	r2,r19,r2
   4848c:	14a7883a 	add	r19,r2,r18
   48490:	88ffffcc 	andi	r3,r17,65535
   48494:	9822943a 	slli	r17,r19,16
   48498:	ad400104 	addi	r21,r21,4
   4849c:	b005883a 	mov	r2,r22
   484a0:	88c6b03a 	or	r3,r17,r3
   484a4:	b0c00015 	stw	r3,0(r22)
   484a8:	9824d43a 	srli	r18,r19,16
   484ac:	b5800104 	addi	r22,r22,4
   484b0:	ad3fe836 	bltu	r21,r20,48454 <__alt_data_end+0xfffc8454>
   484b4:	d8c00017 	ldw	r3,0(sp)
   484b8:	14800115 	stw	r18,4(r2)
   484bc:	1c800017 	ldw	r18,0(r3)
   484c0:	9024d43a 	srli	r18,r18,16
   484c4:	90002226 	beq	r18,zero,48550 <__multiply+0x1e8>
   484c8:	d8c00117 	ldw	r3,4(sp)
   484cc:	dd800417 	ldw	r22,16(sp)
   484d0:	002f883a 	mov	r23,zero
   484d4:	1f000017 	ldw	fp,0(r3)
   484d8:	1823883a 	mov	r17,r3
   484dc:	182b883a 	mov	r21,r3
   484e0:	e021883a 	mov	r16,fp
   484e4:	00000106 	br	484ec <__multiply+0x184>
   484e8:	982b883a 	mov	r21,r19
   484ec:	b100000b 	ldhu	r4,0(r22)
   484f0:	8020d43a 	srli	r16,r16,16
   484f4:	900b883a 	mov	r5,r18
   484f8:	004c3c40 	call	4c3c4 <__mulsi3>
   484fc:	1405883a 	add	r2,r2,r16
   48500:	15ef883a 	add	r23,r2,r23
   48504:	b804943a 	slli	r2,r23,16
   48508:	e0ffffcc 	andi	r3,fp,65535
   4850c:	8c400104 	addi	r17,r17,4
   48510:	10c6b03a 	or	r3,r2,r3
   48514:	88ffff15 	stw	r3,-4(r17)
   48518:	b5800104 	addi	r22,r22,4
   4851c:	b13fff17 	ldw	r4,-4(r22)
   48520:	acc00104 	addi	r19,r21,4
   48524:	900b883a 	mov	r5,r18
   48528:	2008d43a 	srli	r4,r4,16
   4852c:	9c000017 	ldw	r16,0(r19)
   48530:	004c3c40 	call	4c3c4 <__mulsi3>
   48534:	b806d43a 	srli	r3,r23,16
   48538:	813fffcc 	andi	r4,r16,65535
   4853c:	1105883a 	add	r2,r2,r4
   48540:	10f9883a 	add	fp,r2,r3
   48544:	e02ed43a 	srli	r23,fp,16
   48548:	b53fe736 	bltu	r22,r20,484e8 <__alt_data_end+0xfffc84e8>
   4854c:	af000115 	stw	fp,4(r21)
   48550:	d8c00017 	ldw	r3,0(sp)
   48554:	d9000517 	ldw	r4,20(sp)
   48558:	18c00104 	addi	r3,r3,4
   4855c:	d8c00015 	stw	r3,0(sp)
   48560:	d8c00117 	ldw	r3,4(sp)
   48564:	18c00104 	addi	r3,r3,4
   48568:	d8c00115 	stw	r3,4(sp)
   4856c:	d8c00017 	ldw	r3,0(sp)
   48570:	193fb136 	bltu	r3,r4,48438 <__alt_data_end+0xfffc8438>
   48574:	d8c00217 	ldw	r3,8(sp)
   48578:	00c00c0e 	bge	zero,r3,485ac <__multiply+0x244>
   4857c:	d8c00317 	ldw	r3,12(sp)
   48580:	18bfff17 	ldw	r2,-4(r3)
   48584:	1d7fff04 	addi	r21,r3,-4
   48588:	10000326 	beq	r2,zero,48598 <__multiply+0x230>
   4858c:	00000706 	br	485ac <__multiply+0x244>
   48590:	a8800017 	ldw	r2,0(r21)
   48594:	1000051e 	bne	r2,zero,485ac <__multiply+0x244>
   48598:	d8c00217 	ldw	r3,8(sp)
   4859c:	ad7fff04 	addi	r21,r21,-4
   485a0:	18ffffc4 	addi	r3,r3,-1
   485a4:	d8c00215 	stw	r3,8(sp)
   485a8:	183ff91e 	bne	r3,zero,48590 <__alt_data_end+0xfffc8590>
   485ac:	d8c00617 	ldw	r3,24(sp)
   485b0:	d9000217 	ldw	r4,8(sp)
   485b4:	1805883a 	mov	r2,r3
   485b8:	19000415 	stw	r4,16(r3)
   485bc:	dfc01017 	ldw	ra,64(sp)
   485c0:	df000f17 	ldw	fp,60(sp)
   485c4:	ddc00e17 	ldw	r23,56(sp)
   485c8:	dd800d17 	ldw	r22,52(sp)
   485cc:	dd400c17 	ldw	r21,48(sp)
   485d0:	dd000b17 	ldw	r20,44(sp)
   485d4:	dcc00a17 	ldw	r19,40(sp)
   485d8:	dc800917 	ldw	r18,36(sp)
   485dc:	dc400817 	ldw	r17,32(sp)
   485e0:	dc000717 	ldw	r16,28(sp)
   485e4:	dec01104 	addi	sp,sp,68
   485e8:	f800283a 	ret
   485ec:	3025883a 	mov	r18,r6
   485f0:	282d883a 	mov	r22,r5
   485f4:	003f6f06 	br	483b4 <__alt_data_end+0xfffc83b4>

000485f8 <__pow5mult>:
   485f8:	defffa04 	addi	sp,sp,-24
   485fc:	dcc00315 	stw	r19,12(sp)
   48600:	dc800215 	stw	r18,8(sp)
   48604:	dc000015 	stw	r16,0(sp)
   48608:	dfc00515 	stw	ra,20(sp)
   4860c:	dd000415 	stw	r20,16(sp)
   48610:	dc400115 	stw	r17,4(sp)
   48614:	308000cc 	andi	r2,r6,3
   48618:	3021883a 	mov	r16,r6
   4861c:	2027883a 	mov	r19,r4
   48620:	2825883a 	mov	r18,r5
   48624:	10002e1e 	bne	r2,zero,486e0 <__pow5mult+0xe8>
   48628:	8021d0ba 	srai	r16,r16,2
   4862c:	80001a26 	beq	r16,zero,48698 <__pow5mult+0xa0>
   48630:	9c401217 	ldw	r17,72(r19)
   48634:	8800061e 	bne	r17,zero,48650 <__pow5mult+0x58>
   48638:	00003406 	br	4870c <__pow5mult+0x114>
   4863c:	8021d07a 	srai	r16,r16,1
   48640:	80001526 	beq	r16,zero,48698 <__pow5mult+0xa0>
   48644:	88800017 	ldw	r2,0(r17)
   48648:	10001c26 	beq	r2,zero,486bc <__pow5mult+0xc4>
   4864c:	1023883a 	mov	r17,r2
   48650:	80c0004c 	andi	r3,r16,1
   48654:	183ff926 	beq	r3,zero,4863c <__alt_data_end+0xfffc863c>
   48658:	900b883a 	mov	r5,r18
   4865c:	880d883a 	mov	r6,r17
   48660:	9809883a 	mov	r4,r19
   48664:	00483680 	call	48368 <__multiply>
   48668:	90001b26 	beq	r18,zero,486d8 <__pow5mult+0xe0>
   4866c:	91c00117 	ldw	r7,4(r18)
   48670:	98c01317 	ldw	r3,76(r19)
   48674:	8021d07a 	srai	r16,r16,1
   48678:	39cf883a 	add	r7,r7,r7
   4867c:	39cf883a 	add	r7,r7,r7
   48680:	19c7883a 	add	r3,r3,r7
   48684:	19000017 	ldw	r4,0(r3)
   48688:	91000015 	stw	r4,0(r18)
   4868c:	1c800015 	stw	r18,0(r3)
   48690:	1025883a 	mov	r18,r2
   48694:	803feb1e 	bne	r16,zero,48644 <__alt_data_end+0xfffc8644>
   48698:	9005883a 	mov	r2,r18
   4869c:	dfc00517 	ldw	ra,20(sp)
   486a0:	dd000417 	ldw	r20,16(sp)
   486a4:	dcc00317 	ldw	r19,12(sp)
   486a8:	dc800217 	ldw	r18,8(sp)
   486ac:	dc400117 	ldw	r17,4(sp)
   486b0:	dc000017 	ldw	r16,0(sp)
   486b4:	dec00604 	addi	sp,sp,24
   486b8:	f800283a 	ret
   486bc:	9809883a 	mov	r4,r19
   486c0:	880b883a 	mov	r5,r17
   486c4:	880d883a 	mov	r6,r17
   486c8:	00483680 	call	48368 <__multiply>
   486cc:	88800015 	stw	r2,0(r17)
   486d0:	10000015 	stw	zero,0(r2)
   486d4:	003fdd06 	br	4864c <__alt_data_end+0xfffc864c>
   486d8:	1025883a 	mov	r18,r2
   486dc:	003fd706 	br	4863c <__alt_data_end+0xfffc863c>
   486e0:	10bfffc4 	addi	r2,r2,-1
   486e4:	1085883a 	add	r2,r2,r2
   486e8:	00c00174 	movhi	r3,5
   486ec:	18c71304 	addi	r3,r3,7244
   486f0:	1085883a 	add	r2,r2,r2
   486f4:	1885883a 	add	r2,r3,r2
   486f8:	11800017 	ldw	r6,0(r2)
   486fc:	000f883a 	mov	r7,zero
   48700:	0047fd40 	call	47fd4 <__multadd>
   48704:	1025883a 	mov	r18,r2
   48708:	003fc706 	br	48628 <__alt_data_end+0xfffc8628>
   4870c:	05000044 	movi	r20,1
   48710:	9809883a 	mov	r4,r19
   48714:	a00b883a 	mov	r5,r20
   48718:	0047f040 	call	47f04 <_Balloc>
   4871c:	1023883a 	mov	r17,r2
   48720:	00809c44 	movi	r2,625
   48724:	88800515 	stw	r2,20(r17)
   48728:	8d000415 	stw	r20,16(r17)
   4872c:	9c401215 	stw	r17,72(r19)
   48730:	88000015 	stw	zero,0(r17)
   48734:	003fc606 	br	48650 <__alt_data_end+0xfffc8650>

00048738 <__lshift>:
   48738:	defff904 	addi	sp,sp,-28
   4873c:	dd000415 	stw	r20,16(sp)
   48740:	dcc00315 	stw	r19,12(sp)
   48744:	3029d17a 	srai	r20,r6,5
   48748:	2cc00417 	ldw	r19,16(r5)
   4874c:	28800217 	ldw	r2,8(r5)
   48750:	dd400515 	stw	r21,20(sp)
   48754:	a4e7883a 	add	r19,r20,r19
   48758:	dc800215 	stw	r18,8(sp)
   4875c:	dc400115 	stw	r17,4(sp)
   48760:	dc000015 	stw	r16,0(sp)
   48764:	dfc00615 	stw	ra,24(sp)
   48768:	9c000044 	addi	r16,r19,1
   4876c:	2823883a 	mov	r17,r5
   48770:	302b883a 	mov	r21,r6
   48774:	2025883a 	mov	r18,r4
   48778:	29400117 	ldw	r5,4(r5)
   4877c:	1400030e 	bge	r2,r16,4878c <__lshift+0x54>
   48780:	1085883a 	add	r2,r2,r2
   48784:	29400044 	addi	r5,r5,1
   48788:	143ffd16 	blt	r2,r16,48780 <__alt_data_end+0xfffc8780>
   4878c:	9009883a 	mov	r4,r18
   48790:	0047f040 	call	47f04 <_Balloc>
   48794:	11c00504 	addi	r7,r2,20
   48798:	0500090e 	bge	zero,r20,487c0 <__lshift+0x88>
   4879c:	3811883a 	mov	r8,r7
   487a0:	0007883a 	mov	r3,zero
   487a4:	40000015 	stw	zero,0(r8)
   487a8:	18c00044 	addi	r3,r3,1
   487ac:	42000104 	addi	r8,r8,4
   487b0:	1d3ffc1e 	bne	r3,r20,487a4 <__alt_data_end+0xfffc87a4>
   487b4:	18c7883a 	add	r3,r3,r3
   487b8:	18c7883a 	add	r3,r3,r3
   487bc:	38cf883a 	add	r7,r7,r3
   487c0:	89000417 	ldw	r4,16(r17)
   487c4:	88c00504 	addi	r3,r17,20
   487c8:	a98007cc 	andi	r6,r21,31
   487cc:	2109883a 	add	r4,r4,r4
   487d0:	2109883a 	add	r4,r4,r4
   487d4:	1909883a 	add	r4,r3,r4
   487d8:	30002326 	beq	r6,zero,48868 <__lshift+0x130>
   487dc:	01400804 	movi	r5,32
   487e0:	298bc83a 	sub	r5,r5,r6
   487e4:	0013883a 	mov	r9,zero
   487e8:	1a000017 	ldw	r8,0(r3)
   487ec:	3815883a 	mov	r10,r7
   487f0:	39c00104 	addi	r7,r7,4
   487f4:	4190983a 	sll	r8,r8,r6
   487f8:	18c00104 	addi	r3,r3,4
   487fc:	4a10b03a 	or	r8,r9,r8
   48800:	3a3fff15 	stw	r8,-4(r7)
   48804:	1a3fff17 	ldw	r8,-4(r3)
   48808:	4152d83a 	srl	r9,r8,r5
   4880c:	193ff636 	bltu	r3,r4,487e8 <__alt_data_end+0xfffc87e8>
   48810:	52400115 	stw	r9,4(r10)
   48814:	48000126 	beq	r9,zero,4881c <__lshift+0xe4>
   48818:	9c000084 	addi	r16,r19,2
   4881c:	89000117 	ldw	r4,4(r17)
   48820:	90c01317 	ldw	r3,76(r18)
   48824:	843fffc4 	addi	r16,r16,-1
   48828:	2109883a 	add	r4,r4,r4
   4882c:	2109883a 	add	r4,r4,r4
   48830:	1907883a 	add	r3,r3,r4
   48834:	19000017 	ldw	r4,0(r3)
   48838:	14000415 	stw	r16,16(r2)
   4883c:	89000015 	stw	r4,0(r17)
   48840:	1c400015 	stw	r17,0(r3)
   48844:	dfc00617 	ldw	ra,24(sp)
   48848:	dd400517 	ldw	r21,20(sp)
   4884c:	dd000417 	ldw	r20,16(sp)
   48850:	dcc00317 	ldw	r19,12(sp)
   48854:	dc800217 	ldw	r18,8(sp)
   48858:	dc400117 	ldw	r17,4(sp)
   4885c:	dc000017 	ldw	r16,0(sp)
   48860:	dec00704 	addi	sp,sp,28
   48864:	f800283a 	ret
   48868:	19400017 	ldw	r5,0(r3)
   4886c:	39c00104 	addi	r7,r7,4
   48870:	18c00104 	addi	r3,r3,4
   48874:	397fff15 	stw	r5,-4(r7)
   48878:	193ffb36 	bltu	r3,r4,48868 <__alt_data_end+0xfffc8868>
   4887c:	003fe706 	br	4881c <__alt_data_end+0xfffc881c>

00048880 <__mcmp>:
   48880:	20800417 	ldw	r2,16(r4)
   48884:	28c00417 	ldw	r3,16(r5)
   48888:	10c5c83a 	sub	r2,r2,r3
   4888c:	1000111e 	bne	r2,zero,488d4 <__mcmp+0x54>
   48890:	18c7883a 	add	r3,r3,r3
   48894:	18c7883a 	add	r3,r3,r3
   48898:	21000504 	addi	r4,r4,20
   4889c:	29400504 	addi	r5,r5,20
   488a0:	20c5883a 	add	r2,r4,r3
   488a4:	28cb883a 	add	r5,r5,r3
   488a8:	00000106 	br	488b0 <__mcmp+0x30>
   488ac:	20800a2e 	bgeu	r4,r2,488d8 <__mcmp+0x58>
   488b0:	10bfff04 	addi	r2,r2,-4
   488b4:	297fff04 	addi	r5,r5,-4
   488b8:	11800017 	ldw	r6,0(r2)
   488bc:	28c00017 	ldw	r3,0(r5)
   488c0:	30fffa26 	beq	r6,r3,488ac <__alt_data_end+0xfffc88ac>
   488c4:	30c00236 	bltu	r6,r3,488d0 <__mcmp+0x50>
   488c8:	00800044 	movi	r2,1
   488cc:	f800283a 	ret
   488d0:	00bfffc4 	movi	r2,-1
   488d4:	f800283a 	ret
   488d8:	0005883a 	mov	r2,zero
   488dc:	f800283a 	ret

000488e0 <__mdiff>:
   488e0:	defffb04 	addi	sp,sp,-20
   488e4:	dc000015 	stw	r16,0(sp)
   488e8:	2821883a 	mov	r16,r5
   488ec:	dcc00315 	stw	r19,12(sp)
   488f0:	300b883a 	mov	r5,r6
   488f4:	2027883a 	mov	r19,r4
   488f8:	8009883a 	mov	r4,r16
   488fc:	dc800215 	stw	r18,8(sp)
   48900:	dfc00415 	stw	ra,16(sp)
   48904:	dc400115 	stw	r17,4(sp)
   48908:	3025883a 	mov	r18,r6
   4890c:	00488800 	call	48880 <__mcmp>
   48910:	10005226 	beq	r2,zero,48a5c <__mdiff+0x17c>
   48914:	10004c16 	blt	r2,zero,48a48 <__mdiff+0x168>
   48918:	0023883a 	mov	r17,zero
   4891c:	81400117 	ldw	r5,4(r16)
   48920:	9809883a 	mov	r4,r19
   48924:	0047f040 	call	47f04 <_Balloc>
   48928:	83400417 	ldw	r13,16(r16)
   4892c:	93800417 	ldw	r14,16(r18)
   48930:	81000504 	addi	r4,r16,20
   48934:	6b59883a 	add	r12,r13,r13
   48938:	739d883a 	add	r14,r14,r14
   4893c:	6319883a 	add	r12,r12,r12
   48940:	91800504 	addi	r6,r18,20
   48944:	739d883a 	add	r14,r14,r14
   48948:	14400315 	stw	r17,12(r2)
   4894c:	2319883a 	add	r12,r4,r12
   48950:	339d883a 	add	r14,r6,r14
   48954:	12400504 	addi	r9,r2,20
   48958:	0007883a 	mov	r3,zero
   4895c:	22000017 	ldw	r8,0(r4)
   48960:	32800017 	ldw	r10,0(r6)
   48964:	4ac00104 	addi	r11,r9,4
   48968:	41ffffcc 	andi	r7,r8,65535
   4896c:	38c7883a 	add	r3,r7,r3
   48970:	51ffffcc 	andi	r7,r10,65535
   48974:	19cfc83a 	sub	r7,r3,r7
   48978:	4010d43a 	srli	r8,r8,16
   4897c:	5014d43a 	srli	r10,r10,16
   48980:	3807d43a 	srai	r3,r7,16
   48984:	39ffffcc 	andi	r7,r7,65535
   48988:	4291c83a 	sub	r8,r8,r10
   4898c:	40c7883a 	add	r3,r8,r3
   48990:	1810943a 	slli	r8,r3,16
   48994:	31800104 	addi	r6,r6,4
   48998:	21000104 	addi	r4,r4,4
   4899c:	41ceb03a 	or	r7,r8,r7
   489a0:	49c00015 	stw	r7,0(r9)
   489a4:	1807d43a 	srai	r3,r3,16
   489a8:	580b883a 	mov	r5,r11
   489ac:	5813883a 	mov	r9,r11
   489b0:	33bfea36 	bltu	r6,r14,4895c <__alt_data_end+0xfffc895c>
   489b4:	2011883a 	mov	r8,r4
   489b8:	2300152e 	bgeu	r4,r12,48a10 <__mdiff+0x130>
   489bc:	21400017 	ldw	r5,0(r4)
   489c0:	4a400104 	addi	r9,r9,4
   489c4:	21000104 	addi	r4,r4,4
   489c8:	29ffffcc 	andi	r7,r5,65535
   489cc:	38c7883a 	add	r3,r7,r3
   489d0:	280ad43a 	srli	r5,r5,16
   489d4:	180dd43a 	srai	r6,r3,16
   489d8:	19ffffcc 	andi	r7,r3,65535
   489dc:	3147883a 	add	r3,r6,r5
   489e0:	180a943a 	slli	r5,r3,16
   489e4:	1807d43a 	srai	r3,r3,16
   489e8:	29ceb03a 	or	r7,r5,r7
   489ec:	49ffff15 	stw	r7,-4(r9)
   489f0:	233ff236 	bltu	r4,r12,489bc <__alt_data_end+0xfffc89bc>
   489f4:	0206303a 	nor	r3,zero,r8
   489f8:	1b07883a 	add	r3,r3,r12
   489fc:	1806d0ba 	srli	r3,r3,2
   48a00:	18c00044 	addi	r3,r3,1
   48a04:	18c7883a 	add	r3,r3,r3
   48a08:	18c7883a 	add	r3,r3,r3
   48a0c:	58cb883a 	add	r5,r11,r3
   48a10:	28ffff04 	addi	r3,r5,-4
   48a14:	3800041e 	bne	r7,zero,48a28 <__mdiff+0x148>
   48a18:	18ffff04 	addi	r3,r3,-4
   48a1c:	19000017 	ldw	r4,0(r3)
   48a20:	6b7fffc4 	addi	r13,r13,-1
   48a24:	203ffc26 	beq	r4,zero,48a18 <__alt_data_end+0xfffc8a18>
   48a28:	13400415 	stw	r13,16(r2)
   48a2c:	dfc00417 	ldw	ra,16(sp)
   48a30:	dcc00317 	ldw	r19,12(sp)
   48a34:	dc800217 	ldw	r18,8(sp)
   48a38:	dc400117 	ldw	r17,4(sp)
   48a3c:	dc000017 	ldw	r16,0(sp)
   48a40:	dec00504 	addi	sp,sp,20
   48a44:	f800283a 	ret
   48a48:	8005883a 	mov	r2,r16
   48a4c:	04400044 	movi	r17,1
   48a50:	9021883a 	mov	r16,r18
   48a54:	1025883a 	mov	r18,r2
   48a58:	003fb006 	br	4891c <__alt_data_end+0xfffc891c>
   48a5c:	9809883a 	mov	r4,r19
   48a60:	000b883a 	mov	r5,zero
   48a64:	0047f040 	call	47f04 <_Balloc>
   48a68:	00c00044 	movi	r3,1
   48a6c:	10c00415 	stw	r3,16(r2)
   48a70:	10000515 	stw	zero,20(r2)
   48a74:	003fed06 	br	48a2c <__alt_data_end+0xfffc8a2c>

00048a78 <__ulp>:
   48a78:	295ffc2c 	andhi	r5,r5,32752
   48a7c:	00bf3034 	movhi	r2,64704
   48a80:	2887883a 	add	r3,r5,r2
   48a84:	00c0020e 	bge	zero,r3,48a90 <__ulp+0x18>
   48a88:	0005883a 	mov	r2,zero
   48a8c:	f800283a 	ret
   48a90:	00c7c83a 	sub	r3,zero,r3
   48a94:	180bd53a 	srai	r5,r3,20
   48a98:	008004c4 	movi	r2,19
   48a9c:	11400a0e 	bge	r2,r5,48ac8 <__ulp+0x50>
   48aa0:	00800c84 	movi	r2,50
   48aa4:	0007883a 	mov	r3,zero
   48aa8:	11400516 	blt	r2,r5,48ac0 <__ulp+0x48>
   48aac:	00800cc4 	movi	r2,51
   48ab0:	114bc83a 	sub	r5,r2,r5
   48ab4:	00800044 	movi	r2,1
   48ab8:	1144983a 	sll	r2,r2,r5
   48abc:	f800283a 	ret
   48ac0:	00800044 	movi	r2,1
   48ac4:	f800283a 	ret
   48ac8:	00800234 	movhi	r2,8
   48acc:	1147d83a 	sra	r3,r2,r5
   48ad0:	0005883a 	mov	r2,zero
   48ad4:	f800283a 	ret

00048ad8 <__b2d>:
   48ad8:	defffa04 	addi	sp,sp,-24
   48adc:	dc000015 	stw	r16,0(sp)
   48ae0:	24000417 	ldw	r16,16(r4)
   48ae4:	dc400115 	stw	r17,4(sp)
   48ae8:	24400504 	addi	r17,r4,20
   48aec:	8421883a 	add	r16,r16,r16
   48af0:	8421883a 	add	r16,r16,r16
   48af4:	8c21883a 	add	r16,r17,r16
   48af8:	dc800215 	stw	r18,8(sp)
   48afc:	84bfff17 	ldw	r18,-4(r16)
   48b00:	dd000415 	stw	r20,16(sp)
   48b04:	dcc00315 	stw	r19,12(sp)
   48b08:	9009883a 	mov	r4,r18
   48b0c:	2829883a 	mov	r20,r5
   48b10:	dfc00515 	stw	ra,20(sp)
   48b14:	00482140 	call	48214 <__hi0bits>
   48b18:	00c00804 	movi	r3,32
   48b1c:	1887c83a 	sub	r3,r3,r2
   48b20:	a0c00015 	stw	r3,0(r20)
   48b24:	00c00284 	movi	r3,10
   48b28:	84ffff04 	addi	r19,r16,-4
   48b2c:	18801216 	blt	r3,r2,48b78 <__b2d+0xa0>
   48b30:	014002c4 	movi	r5,11
   48b34:	2889c83a 	sub	r4,r5,r2
   48b38:	9106d83a 	srl	r3,r18,r4
   48b3c:	18cffc34 	orhi	r3,r3,16368
   48b40:	8cc0282e 	bgeu	r17,r19,48be4 <__b2d+0x10c>
   48b44:	817ffe17 	ldw	r5,-8(r16)
   48b48:	290ad83a 	srl	r5,r5,r4
   48b4c:	10800544 	addi	r2,r2,21
   48b50:	9084983a 	sll	r2,r18,r2
   48b54:	2884b03a 	or	r2,r5,r2
   48b58:	dfc00517 	ldw	ra,20(sp)
   48b5c:	dd000417 	ldw	r20,16(sp)
   48b60:	dcc00317 	ldw	r19,12(sp)
   48b64:	dc800217 	ldw	r18,8(sp)
   48b68:	dc400117 	ldw	r17,4(sp)
   48b6c:	dc000017 	ldw	r16,0(sp)
   48b70:	dec00604 	addi	sp,sp,24
   48b74:	f800283a 	ret
   48b78:	113ffd44 	addi	r4,r2,-11
   48b7c:	8cc00f2e 	bgeu	r17,r19,48bbc <__b2d+0xe4>
   48b80:	81bffe04 	addi	r6,r16,-8
   48b84:	817ffe17 	ldw	r5,-8(r16)
   48b88:	20001326 	beq	r4,zero,48bd8 <__b2d+0x100>
   48b8c:	00c00ac4 	movi	r3,43
   48b90:	1885c83a 	sub	r2,r3,r2
   48b94:	2886d83a 	srl	r3,r5,r2
   48b98:	9124983a 	sll	r18,r18,r4
   48b9c:	90e4b03a 	or	r18,r18,r3
   48ba0:	90cffc34 	orhi	r3,r18,16368
   48ba4:	8980112e 	bgeu	r17,r6,48bec <__b2d+0x114>
   48ba8:	81bffd17 	ldw	r6,-12(r16)
   48bac:	308cd83a 	srl	r6,r6,r2
   48bb0:	2904983a 	sll	r2,r5,r4
   48bb4:	1184b03a 	or	r2,r2,r6
   48bb8:	003fe706 	br	48b58 <__alt_data_end+0xfffc8b58>
   48bbc:	20000526 	beq	r4,zero,48bd4 <__b2d+0xfc>
   48bc0:	9124983a 	sll	r18,r18,r4
   48bc4:	000d883a 	mov	r6,zero
   48bc8:	000b883a 	mov	r5,zero
   48bcc:	90cffc34 	orhi	r3,r18,16368
   48bd0:	003ff706 	br	48bb0 <__alt_data_end+0xfffc8bb0>
   48bd4:	000b883a 	mov	r5,zero
   48bd8:	90cffc34 	orhi	r3,r18,16368
   48bdc:	2805883a 	mov	r2,r5
   48be0:	003fdd06 	br	48b58 <__alt_data_end+0xfffc8b58>
   48be4:	000b883a 	mov	r5,zero
   48be8:	003fd806 	br	48b4c <__alt_data_end+0xfffc8b4c>
   48bec:	000d883a 	mov	r6,zero
   48bf0:	003fef06 	br	48bb0 <__alt_data_end+0xfffc8bb0>

00048bf4 <__d2b>:
   48bf4:	defff704 	addi	sp,sp,-36
   48bf8:	dc000215 	stw	r16,8(sp)
   48bfc:	3021883a 	mov	r16,r6
   48c00:	dc400315 	stw	r17,12(sp)
   48c04:	8022907a 	slli	r17,r16,1
   48c08:	dd400715 	stw	r21,28(sp)
   48c0c:	282b883a 	mov	r21,r5
   48c10:	01400044 	movi	r5,1
   48c14:	dd000615 	stw	r20,24(sp)
   48c18:	dcc00515 	stw	r19,20(sp)
   48c1c:	dc800415 	stw	r18,16(sp)
   48c20:	dfc00815 	stw	ra,32(sp)
   48c24:	3829883a 	mov	r20,r7
   48c28:	dc800917 	ldw	r18,36(sp)
   48c2c:	8822d57a 	srli	r17,r17,21
   48c30:	0047f040 	call	47f04 <_Balloc>
   48c34:	1027883a 	mov	r19,r2
   48c38:	00800434 	movhi	r2,16
   48c3c:	10bfffc4 	addi	r2,r2,-1
   48c40:	808c703a 	and	r6,r16,r2
   48c44:	88000126 	beq	r17,zero,48c4c <__d2b+0x58>
   48c48:	31800434 	orhi	r6,r6,16
   48c4c:	d9800015 	stw	r6,0(sp)
   48c50:	a8001f26 	beq	r21,zero,48cd0 <__d2b+0xdc>
   48c54:	d9000104 	addi	r4,sp,4
   48c58:	dd400115 	stw	r21,4(sp)
   48c5c:	004827c0 	call	4827c <__lo0bits>
   48c60:	d8c00017 	ldw	r3,0(sp)
   48c64:	1000291e 	bne	r2,zero,48d0c <__d2b+0x118>
   48c68:	d9000117 	ldw	r4,4(sp)
   48c6c:	99000515 	stw	r4,20(r19)
   48c70:	1820c03a 	cmpne	r16,r3,zero
   48c74:	84000044 	addi	r16,r16,1
   48c78:	98c00615 	stw	r3,24(r19)
   48c7c:	9c000415 	stw	r16,16(r19)
   48c80:	88001b1e 	bne	r17,zero,48cf0 <__d2b+0xfc>
   48c84:	800690ba 	slli	r3,r16,2
   48c88:	10bef384 	addi	r2,r2,-1074
   48c8c:	a0800015 	stw	r2,0(r20)
   48c90:	98c5883a 	add	r2,r19,r3
   48c94:	11000417 	ldw	r4,16(r2)
   48c98:	8020917a 	slli	r16,r16,5
   48c9c:	00482140 	call	48214 <__hi0bits>
   48ca0:	8085c83a 	sub	r2,r16,r2
   48ca4:	90800015 	stw	r2,0(r18)
   48ca8:	9805883a 	mov	r2,r19
   48cac:	dfc00817 	ldw	ra,32(sp)
   48cb0:	dd400717 	ldw	r21,28(sp)
   48cb4:	dd000617 	ldw	r20,24(sp)
   48cb8:	dcc00517 	ldw	r19,20(sp)
   48cbc:	dc800417 	ldw	r18,16(sp)
   48cc0:	dc400317 	ldw	r17,12(sp)
   48cc4:	dc000217 	ldw	r16,8(sp)
   48cc8:	dec00904 	addi	sp,sp,36
   48ccc:	f800283a 	ret
   48cd0:	d809883a 	mov	r4,sp
   48cd4:	004827c0 	call	4827c <__lo0bits>
   48cd8:	d8c00017 	ldw	r3,0(sp)
   48cdc:	04000044 	movi	r16,1
   48ce0:	9c000415 	stw	r16,16(r19)
   48ce4:	98c00515 	stw	r3,20(r19)
   48ce8:	10800804 	addi	r2,r2,32
   48cec:	883fe526 	beq	r17,zero,48c84 <__alt_data_end+0xfffc8c84>
   48cf0:	8c7ef344 	addi	r17,r17,-1075
   48cf4:	88a3883a 	add	r17,r17,r2
   48cf8:	00c00d44 	movi	r3,53
   48cfc:	a4400015 	stw	r17,0(r20)
   48d00:	1885c83a 	sub	r2,r3,r2
   48d04:	90800015 	stw	r2,0(r18)
   48d08:	003fe706 	br	48ca8 <__alt_data_end+0xfffc8ca8>
   48d0c:	01000804 	movi	r4,32
   48d10:	2089c83a 	sub	r4,r4,r2
   48d14:	1908983a 	sll	r4,r3,r4
   48d18:	d9400117 	ldw	r5,4(sp)
   48d1c:	1886d83a 	srl	r3,r3,r2
   48d20:	2148b03a 	or	r4,r4,r5
   48d24:	99000515 	stw	r4,20(r19)
   48d28:	d8c00015 	stw	r3,0(sp)
   48d2c:	003fd006 	br	48c70 <__alt_data_end+0xfffc8c70>

00048d30 <__ratio>:
   48d30:	defff904 	addi	sp,sp,-28
   48d34:	dc400315 	stw	r17,12(sp)
   48d38:	2823883a 	mov	r17,r5
   48d3c:	d9400104 	addi	r5,sp,4
   48d40:	dfc00615 	stw	ra,24(sp)
   48d44:	dcc00515 	stw	r19,20(sp)
   48d48:	dc800415 	stw	r18,16(sp)
   48d4c:	2027883a 	mov	r19,r4
   48d50:	dc000215 	stw	r16,8(sp)
   48d54:	0048ad80 	call	48ad8 <__b2d>
   48d58:	8809883a 	mov	r4,r17
   48d5c:	d80b883a 	mov	r5,sp
   48d60:	1025883a 	mov	r18,r2
   48d64:	1821883a 	mov	r16,r3
   48d68:	0048ad80 	call	48ad8 <__b2d>
   48d6c:	8a400417 	ldw	r9,16(r17)
   48d70:	9a000417 	ldw	r8,16(r19)
   48d74:	100d883a 	mov	r6,r2
   48d78:	d8800017 	ldw	r2,0(sp)
   48d7c:	4251c83a 	sub	r8,r8,r9
   48d80:	4012917a 	slli	r9,r8,5
   48d84:	da000117 	ldw	r8,4(sp)
   48d88:	4091c83a 	sub	r8,r8,r2
   48d8c:	4251883a 	add	r8,r8,r9
   48d90:	02000d0e 	bge	zero,r8,48dc8 <__ratio+0x98>
   48d94:	4010953a 	slli	r8,r8,20
   48d98:	4421883a 	add	r16,r8,r16
   48d9c:	9009883a 	mov	r4,r18
   48da0:	800b883a 	mov	r5,r16
   48da4:	180f883a 	mov	r7,r3
   48da8:	004cc880 	call	4cc88 <__divdf3>
   48dac:	dfc00617 	ldw	ra,24(sp)
   48db0:	dcc00517 	ldw	r19,20(sp)
   48db4:	dc800417 	ldw	r18,16(sp)
   48db8:	dc400317 	ldw	r17,12(sp)
   48dbc:	dc000217 	ldw	r16,8(sp)
   48dc0:	dec00704 	addi	sp,sp,28
   48dc4:	f800283a 	ret
   48dc8:	4010953a 	slli	r8,r8,20
   48dcc:	1a07c83a 	sub	r3,r3,r8
   48dd0:	003ff206 	br	48d9c <__alt_data_end+0xfffc8d9c>

00048dd4 <_mprec_log10>:
   48dd4:	defffe04 	addi	sp,sp,-8
   48dd8:	dc000015 	stw	r16,0(sp)
   48ddc:	dfc00115 	stw	ra,4(sp)
   48de0:	008005c4 	movi	r2,23
   48de4:	2021883a 	mov	r16,r4
   48de8:	11000d0e 	bge	r2,r4,48e20 <_mprec_log10+0x4c>
   48dec:	0005883a 	mov	r2,zero
   48df0:	00cffc34 	movhi	r3,16368
   48df4:	843fffc4 	addi	r16,r16,-1
   48df8:	1009883a 	mov	r4,r2
   48dfc:	180b883a 	mov	r5,r3
   48e00:	000d883a 	mov	r6,zero
   48e04:	01d00934 	movhi	r7,16420
   48e08:	004d84c0 	call	4d84c <__muldf3>
   48e0c:	803ff91e 	bne	r16,zero,48df4 <__alt_data_end+0xfffc8df4>
   48e10:	dfc00117 	ldw	ra,4(sp)
   48e14:	dc000017 	ldw	r16,0(sp)
   48e18:	dec00204 	addi	sp,sp,8
   48e1c:	f800283a 	ret
   48e20:	202090fa 	slli	r16,r4,3
   48e24:	00800174 	movhi	r2,5
   48e28:	10872a04 	addi	r2,r2,7336
   48e2c:	1421883a 	add	r16,r2,r16
   48e30:	80800017 	ldw	r2,0(r16)
   48e34:	80c00117 	ldw	r3,4(r16)
   48e38:	dfc00117 	ldw	ra,4(sp)
   48e3c:	dc000017 	ldw	r16,0(sp)
   48e40:	dec00204 	addi	sp,sp,8
   48e44:	f800283a 	ret

00048e48 <__copybits>:
   48e48:	297fffc4 	addi	r5,r5,-1
   48e4c:	280fd17a 	srai	r7,r5,5
   48e50:	30c00417 	ldw	r3,16(r6)
   48e54:	30800504 	addi	r2,r6,20
   48e58:	39c00044 	addi	r7,r7,1
   48e5c:	18c7883a 	add	r3,r3,r3
   48e60:	39cf883a 	add	r7,r7,r7
   48e64:	18c7883a 	add	r3,r3,r3
   48e68:	39cf883a 	add	r7,r7,r7
   48e6c:	10c7883a 	add	r3,r2,r3
   48e70:	21cf883a 	add	r7,r4,r7
   48e74:	10c00d2e 	bgeu	r2,r3,48eac <__copybits+0x64>
   48e78:	200b883a 	mov	r5,r4
   48e7c:	12000017 	ldw	r8,0(r2)
   48e80:	29400104 	addi	r5,r5,4
   48e84:	10800104 	addi	r2,r2,4
   48e88:	2a3fff15 	stw	r8,-4(r5)
   48e8c:	10fffb36 	bltu	r2,r3,48e7c <__alt_data_end+0xfffc8e7c>
   48e90:	1985c83a 	sub	r2,r3,r6
   48e94:	10bffac4 	addi	r2,r2,-21
   48e98:	1004d0ba 	srli	r2,r2,2
   48e9c:	10800044 	addi	r2,r2,1
   48ea0:	1085883a 	add	r2,r2,r2
   48ea4:	1085883a 	add	r2,r2,r2
   48ea8:	2089883a 	add	r4,r4,r2
   48eac:	21c0032e 	bgeu	r4,r7,48ebc <__copybits+0x74>
   48eb0:	20000015 	stw	zero,0(r4)
   48eb4:	21000104 	addi	r4,r4,4
   48eb8:	21fffd36 	bltu	r4,r7,48eb0 <__alt_data_end+0xfffc8eb0>
   48ebc:	f800283a 	ret

00048ec0 <__any_on>:
   48ec0:	20c00417 	ldw	r3,16(r4)
   48ec4:	2805d17a 	srai	r2,r5,5
   48ec8:	21000504 	addi	r4,r4,20
   48ecc:	18800d0e 	bge	r3,r2,48f04 <__any_on+0x44>
   48ed0:	18c7883a 	add	r3,r3,r3
   48ed4:	18c7883a 	add	r3,r3,r3
   48ed8:	20c7883a 	add	r3,r4,r3
   48edc:	20c0192e 	bgeu	r4,r3,48f44 <__any_on+0x84>
   48ee0:	18bfff17 	ldw	r2,-4(r3)
   48ee4:	18ffff04 	addi	r3,r3,-4
   48ee8:	1000041e 	bne	r2,zero,48efc <__any_on+0x3c>
   48eec:	20c0142e 	bgeu	r4,r3,48f40 <__any_on+0x80>
   48ef0:	18ffff04 	addi	r3,r3,-4
   48ef4:	19400017 	ldw	r5,0(r3)
   48ef8:	283ffc26 	beq	r5,zero,48eec <__alt_data_end+0xfffc8eec>
   48efc:	00800044 	movi	r2,1
   48f00:	f800283a 	ret
   48f04:	10c00a0e 	bge	r2,r3,48f30 <__any_on+0x70>
   48f08:	1085883a 	add	r2,r2,r2
   48f0c:	1085883a 	add	r2,r2,r2
   48f10:	294007cc 	andi	r5,r5,31
   48f14:	2087883a 	add	r3,r4,r2
   48f18:	283ff026 	beq	r5,zero,48edc <__alt_data_end+0xfffc8edc>
   48f1c:	19800017 	ldw	r6,0(r3)
   48f20:	3144d83a 	srl	r2,r6,r5
   48f24:	114a983a 	sll	r5,r2,r5
   48f28:	29bff41e 	bne	r5,r6,48efc <__alt_data_end+0xfffc8efc>
   48f2c:	003feb06 	br	48edc <__alt_data_end+0xfffc8edc>
   48f30:	1085883a 	add	r2,r2,r2
   48f34:	1085883a 	add	r2,r2,r2
   48f38:	2087883a 	add	r3,r4,r2
   48f3c:	003fe706 	br	48edc <__alt_data_end+0xfffc8edc>
   48f40:	f800283a 	ret
   48f44:	0005883a 	mov	r2,zero
   48f48:	f800283a 	ret

00048f4c <_realloc_r>:
   48f4c:	defff604 	addi	sp,sp,-40
   48f50:	dcc00315 	stw	r19,12(sp)
   48f54:	dc400115 	stw	r17,4(sp)
   48f58:	dfc00915 	stw	ra,36(sp)
   48f5c:	df000815 	stw	fp,32(sp)
   48f60:	ddc00715 	stw	r23,28(sp)
   48f64:	dd800615 	stw	r22,24(sp)
   48f68:	dd400515 	stw	r21,20(sp)
   48f6c:	dd000415 	stw	r20,16(sp)
   48f70:	dc800215 	stw	r18,8(sp)
   48f74:	dc000015 	stw	r16,0(sp)
   48f78:	2827883a 	mov	r19,r5
   48f7c:	3023883a 	mov	r17,r6
   48f80:	2800bf26 	beq	r5,zero,49280 <_realloc_r+0x334>
   48f84:	2025883a 	mov	r18,r4
   48f88:	004f1c80 	call	4f1c8 <__malloc_lock>
   48f8c:	98ffff17 	ldw	r3,-4(r19)
   48f90:	01bfff04 	movi	r6,-4
   48f94:	890002c4 	addi	r4,r17,11
   48f98:	01c00584 	movi	r7,22
   48f9c:	9d7ffe04 	addi	r21,r19,-8
   48fa0:	19a0703a 	and	r16,r3,r6
   48fa4:	39003f2e 	bgeu	r7,r4,490a4 <_realloc_r+0x158>
   48fa8:	053ffe04 	movi	r20,-8
   48fac:	2528703a 	and	r20,r4,r20
   48fb0:	a00f883a 	mov	r7,r20
   48fb4:	a0008216 	blt	r20,zero,491c0 <_realloc_r+0x274>
   48fb8:	a4408136 	bltu	r20,r17,491c0 <_realloc_r+0x274>
   48fbc:	81c03c0e 	bge	r16,r7,490b0 <_realloc_r+0x164>
   48fc0:	07000174 	movhi	fp,5
   48fc4:	e708d804 	addi	fp,fp,9056
   48fc8:	e1000217 	ldw	r4,8(fp)
   48fcc:	ac05883a 	add	r2,r21,r16
   48fd0:	2080bf26 	beq	r4,r2,492d0 <_realloc_r+0x384>
   48fd4:	11000117 	ldw	r4,4(r2)
   48fd8:	023fff84 	movi	r8,-2
   48fdc:	2210703a 	and	r8,r4,r8
   48fe0:	1211883a 	add	r8,r2,r8
   48fe4:	41400117 	ldw	r5,4(r8)
   48fe8:	2940004c 	andi	r5,r5,1
   48fec:	28004a1e 	bne	r5,zero,49118 <_realloc_r+0x1cc>
   48ff0:	017fff04 	movi	r5,-4
   48ff4:	2148703a 	and	r4,r4,r5
   48ff8:	2409883a 	add	r4,r4,r16
   48ffc:	21c0ad0e 	bge	r4,r7,492b4 <_realloc_r+0x368>
   49000:	18c0004c 	andi	r3,r3,1
   49004:	18007f1e 	bne	r3,zero,49204 <_realloc_r+0x2b8>
   49008:	9dfffe17 	ldw	r23,-8(r19)
   4900c:	adefc83a 	sub	r23,r21,r23
   49010:	bd800117 	ldw	r22,4(r23)
   49014:	b14a703a 	and	r5,r22,r5
   49018:	216d883a 	add	r22,r4,r5
   4901c:	b1c04516 	blt	r22,r7,49134 <_realloc_r+0x1e8>
   49020:	10c00317 	ldw	r3,12(r2)
   49024:	10800217 	ldw	r2,8(r2)
   49028:	81bfff04 	addi	r6,r16,-4
   4902c:	bc400204 	addi	r17,r23,8
   49030:	10c00315 	stw	r3,12(r2)
   49034:	18800215 	stw	r2,8(r3)
   49038:	b9400217 	ldw	r5,8(r23)
   4903c:	b8c00317 	ldw	r3,12(r23)
   49040:	00800904 	movi	r2,36
   49044:	28c00315 	stw	r3,12(r5)
   49048:	19400215 	stw	r5,8(r3)
   4904c:	1180ef36 	bltu	r2,r6,4940c <_realloc_r+0x4c0>
   49050:	008004c4 	movi	r2,19
   49054:	1180da2e 	bgeu	r2,r6,493c0 <_realloc_r+0x474>
   49058:	98800017 	ldw	r2,0(r19)
   4905c:	b8800215 	stw	r2,8(r23)
   49060:	98800117 	ldw	r2,4(r19)
   49064:	b8800315 	stw	r2,12(r23)
   49068:	008006c4 	movi	r2,27
   4906c:	1180fc2e 	bgeu	r2,r6,49460 <_realloc_r+0x514>
   49070:	98800217 	ldw	r2,8(r19)
   49074:	b8800415 	stw	r2,16(r23)
   49078:	98800317 	ldw	r2,12(r19)
   4907c:	b8800515 	stw	r2,20(r23)
   49080:	00800904 	movi	r2,36
   49084:	3080421e 	bne	r6,r2,49190 <_realloc_r+0x244>
   49088:	98800417 	ldw	r2,16(r19)
   4908c:	9cc00604 	addi	r19,r19,24
   49090:	b8c00804 	addi	r3,r23,32
   49094:	b8800615 	stw	r2,24(r23)
   49098:	98bfff17 	ldw	r2,-4(r19)
   4909c:	b8800715 	stw	r2,28(r23)
   490a0:	00003d06 	br	49198 <_realloc_r+0x24c>
   490a4:	01c00404 	movi	r7,16
   490a8:	3829883a 	mov	r20,r7
   490ac:	003fc206 	br	48fb8 <__alt_data_end+0xfffc8fb8>
   490b0:	9823883a 	mov	r17,r19
   490b4:	850fc83a 	sub	r7,r16,r20
   490b8:	008003c4 	movi	r2,15
   490bc:	18c0004c 	andi	r3,r3,1
   490c0:	11c04336 	bltu	r2,r7,491d0 <_realloc_r+0x284>
   490c4:	1c06b03a 	or	r3,r3,r16
   490c8:	a8c00115 	stw	r3,4(r21)
   490cc:	ac21883a 	add	r16,r21,r16
   490d0:	80c00117 	ldw	r3,4(r16)
   490d4:	18c00054 	ori	r3,r3,1
   490d8:	80c00115 	stw	r3,4(r16)
   490dc:	9009883a 	mov	r4,r18
   490e0:	004f1e80 	call	4f1e8 <__malloc_unlock>
   490e4:	8805883a 	mov	r2,r17
   490e8:	dfc00917 	ldw	ra,36(sp)
   490ec:	df000817 	ldw	fp,32(sp)
   490f0:	ddc00717 	ldw	r23,28(sp)
   490f4:	dd800617 	ldw	r22,24(sp)
   490f8:	dd400517 	ldw	r21,20(sp)
   490fc:	dd000417 	ldw	r20,16(sp)
   49100:	dcc00317 	ldw	r19,12(sp)
   49104:	dc800217 	ldw	r18,8(sp)
   49108:	dc400117 	ldw	r17,4(sp)
   4910c:	dc000017 	ldw	r16,0(sp)
   49110:	dec00a04 	addi	sp,sp,40
   49114:	f800283a 	ret
   49118:	18c0004c 	andi	r3,r3,1
   4911c:	1800391e 	bne	r3,zero,49204 <_realloc_r+0x2b8>
   49120:	9dfffe17 	ldw	r23,-8(r19)
   49124:	00bfff04 	movi	r2,-4
   49128:	adefc83a 	sub	r23,r21,r23
   4912c:	b9400117 	ldw	r5,4(r23)
   49130:	288a703a 	and	r5,r5,r2
   49134:	2c2d883a 	add	r22,r5,r16
   49138:	b1c03216 	blt	r22,r7,49204 <_realloc_r+0x2b8>
   4913c:	b8800317 	ldw	r2,12(r23)
   49140:	b8c00217 	ldw	r3,8(r23)
   49144:	81bfff04 	addi	r6,r16,-4
   49148:	01000904 	movi	r4,36
   4914c:	18800315 	stw	r2,12(r3)
   49150:	10c00215 	stw	r3,8(r2)
   49154:	bc400204 	addi	r17,r23,8
   49158:	2180ac36 	bltu	r4,r6,4940c <_realloc_r+0x4c0>
   4915c:	008004c4 	movi	r2,19
   49160:	1180972e 	bgeu	r2,r6,493c0 <_realloc_r+0x474>
   49164:	98800017 	ldw	r2,0(r19)
   49168:	b8800215 	stw	r2,8(r23)
   4916c:	98800117 	ldw	r2,4(r19)
   49170:	b8800315 	stw	r2,12(r23)
   49174:	008006c4 	movi	r2,27
   49178:	1180b92e 	bgeu	r2,r6,49460 <_realloc_r+0x514>
   4917c:	98800217 	ldw	r2,8(r19)
   49180:	b8800415 	stw	r2,16(r23)
   49184:	98800317 	ldw	r2,12(r19)
   49188:	b8800515 	stw	r2,20(r23)
   4918c:	313fbe26 	beq	r6,r4,49088 <__alt_data_end+0xfffc9088>
   49190:	b8c00604 	addi	r3,r23,24
   49194:	9cc00404 	addi	r19,r19,16
   49198:	98800017 	ldw	r2,0(r19)
   4919c:	b021883a 	mov	r16,r22
   491a0:	b82b883a 	mov	r21,r23
   491a4:	18800015 	stw	r2,0(r3)
   491a8:	98800117 	ldw	r2,4(r19)
   491ac:	18800115 	stw	r2,4(r3)
   491b0:	98800217 	ldw	r2,8(r19)
   491b4:	18800215 	stw	r2,8(r3)
   491b8:	b8c00117 	ldw	r3,4(r23)
   491bc:	003fbd06 	br	490b4 <__alt_data_end+0xfffc90b4>
   491c0:	00800304 	movi	r2,12
   491c4:	90800015 	stw	r2,0(r18)
   491c8:	0005883a 	mov	r2,zero
   491cc:	003fc606 	br	490e8 <__alt_data_end+0xfffc90e8>
   491d0:	1d06b03a 	or	r3,r3,r20
   491d4:	ad0b883a 	add	r5,r21,r20
   491d8:	a8c00115 	stw	r3,4(r21)
   491dc:	38800054 	ori	r2,r7,1
   491e0:	28800115 	stw	r2,4(r5)
   491e4:	29cf883a 	add	r7,r5,r7
   491e8:	38800117 	ldw	r2,4(r7)
   491ec:	9009883a 	mov	r4,r18
   491f0:	29400204 	addi	r5,r5,8
   491f4:	10800054 	ori	r2,r2,1
   491f8:	38800115 	stw	r2,4(r7)
   491fc:	00467200 	call	46720 <_free_r>
   49200:	003fb606 	br	490dc <__alt_data_end+0xfffc90dc>
   49204:	880b883a 	mov	r5,r17
   49208:	9009883a 	mov	r4,r18
   4920c:	00472bc0 	call	472bc <_malloc_r>
   49210:	1023883a 	mov	r17,r2
   49214:	1000aa26 	beq	r2,zero,494c0 <_realloc_r+0x574>
   49218:	98ffff17 	ldw	r3,-4(r19)
   4921c:	113ffe04 	addi	r4,r2,-8
   49220:	00bfff84 	movi	r2,-2
   49224:	1884703a 	and	r2,r3,r2
   49228:	a885883a 	add	r2,r21,r2
   4922c:	20808626 	beq	r4,r2,49448 <_realloc_r+0x4fc>
   49230:	81bfff04 	addi	r6,r16,-4
   49234:	00800904 	movi	r2,36
   49238:	11807036 	bltu	r2,r6,493fc <_realloc_r+0x4b0>
   4923c:	00c004c4 	movi	r3,19
   49240:	19805636 	bltu	r3,r6,4939c <_realloc_r+0x450>
   49244:	8805883a 	mov	r2,r17
   49248:	9807883a 	mov	r3,r19
   4924c:	19000017 	ldw	r4,0(r3)
   49250:	11000015 	stw	r4,0(r2)
   49254:	19000117 	ldw	r4,4(r3)
   49258:	11000115 	stw	r4,4(r2)
   4925c:	18c00217 	ldw	r3,8(r3)
   49260:	10c00215 	stw	r3,8(r2)
   49264:	980b883a 	mov	r5,r19
   49268:	9009883a 	mov	r4,r18
   4926c:	00467200 	call	46720 <_free_r>
   49270:	9009883a 	mov	r4,r18
   49274:	004f1e80 	call	4f1e8 <__malloc_unlock>
   49278:	8805883a 	mov	r2,r17
   4927c:	003f9a06 	br	490e8 <__alt_data_end+0xfffc90e8>
   49280:	300b883a 	mov	r5,r6
   49284:	dfc00917 	ldw	ra,36(sp)
   49288:	df000817 	ldw	fp,32(sp)
   4928c:	ddc00717 	ldw	r23,28(sp)
   49290:	dd800617 	ldw	r22,24(sp)
   49294:	dd400517 	ldw	r21,20(sp)
   49298:	dd000417 	ldw	r20,16(sp)
   4929c:	dcc00317 	ldw	r19,12(sp)
   492a0:	dc800217 	ldw	r18,8(sp)
   492a4:	dc400117 	ldw	r17,4(sp)
   492a8:	dc000017 	ldw	r16,0(sp)
   492ac:	dec00a04 	addi	sp,sp,40
   492b0:	00472bc1 	jmpi	472bc <_malloc_r>
   492b4:	11400317 	ldw	r5,12(r2)
   492b8:	10800217 	ldw	r2,8(r2)
   492bc:	9823883a 	mov	r17,r19
   492c0:	2021883a 	mov	r16,r4
   492c4:	11400315 	stw	r5,12(r2)
   492c8:	28800215 	stw	r2,8(r5)
   492cc:	003f7906 	br	490b4 <__alt_data_end+0xfffc90b4>
   492d0:	21000117 	ldw	r4,4(r4)
   492d4:	00bfff04 	movi	r2,-4
   492d8:	a1800404 	addi	r6,r20,16
   492dc:	2088703a 	and	r4,r4,r2
   492e0:	2409883a 	add	r4,r4,r16
   492e4:	2180380e 	bge	r4,r6,493c8 <_realloc_r+0x47c>
   492e8:	18c0004c 	andi	r3,r3,1
   492ec:	183fc51e 	bne	r3,zero,49204 <__alt_data_end+0xfffc9204>
   492f0:	9dfffe17 	ldw	r23,-8(r19)
   492f4:	adefc83a 	sub	r23,r21,r23
   492f8:	b9400117 	ldw	r5,4(r23)
   492fc:	288a703a 	and	r5,r5,r2
   49300:	216d883a 	add	r22,r4,r5
   49304:	b1bf8b16 	blt	r22,r6,49134 <__alt_data_end+0xfffc9134>
   49308:	b8800317 	ldw	r2,12(r23)
   4930c:	b8c00217 	ldw	r3,8(r23)
   49310:	81bfff04 	addi	r6,r16,-4
   49314:	01000904 	movi	r4,36
   49318:	18800315 	stw	r2,12(r3)
   4931c:	10c00215 	stw	r3,8(r2)
   49320:	bc400204 	addi	r17,r23,8
   49324:	21805a36 	bltu	r4,r6,49490 <_realloc_r+0x544>
   49328:	008004c4 	movi	r2,19
   4932c:	1180562e 	bgeu	r2,r6,49488 <_realloc_r+0x53c>
   49330:	98800017 	ldw	r2,0(r19)
   49334:	b8800215 	stw	r2,8(r23)
   49338:	98800117 	ldw	r2,4(r19)
   4933c:	b8800315 	stw	r2,12(r23)
   49340:	008006c4 	movi	r2,27
   49344:	11805636 	bltu	r2,r6,494a0 <_realloc_r+0x554>
   49348:	b8800404 	addi	r2,r23,16
   4934c:	9cc00204 	addi	r19,r19,8
   49350:	98c00017 	ldw	r3,0(r19)
   49354:	10c00015 	stw	r3,0(r2)
   49358:	98c00117 	ldw	r3,4(r19)
   4935c:	10c00115 	stw	r3,4(r2)
   49360:	98c00217 	ldw	r3,8(r19)
   49364:	10c00215 	stw	r3,8(r2)
   49368:	bd07883a 	add	r3,r23,r20
   4936c:	b505c83a 	sub	r2,r22,r20
   49370:	e0c00215 	stw	r3,8(fp)
   49374:	10800054 	ori	r2,r2,1
   49378:	18800115 	stw	r2,4(r3)
   4937c:	b8800117 	ldw	r2,4(r23)
   49380:	9009883a 	mov	r4,r18
   49384:	1080004c 	andi	r2,r2,1
   49388:	a0a8b03a 	or	r20,r20,r2
   4938c:	bd000115 	stw	r20,4(r23)
   49390:	004f1e80 	call	4f1e8 <__malloc_unlock>
   49394:	8805883a 	mov	r2,r17
   49398:	003f5306 	br	490e8 <__alt_data_end+0xfffc90e8>
   4939c:	98c00017 	ldw	r3,0(r19)
   493a0:	88c00015 	stw	r3,0(r17)
   493a4:	98c00117 	ldw	r3,4(r19)
   493a8:	88c00115 	stw	r3,4(r17)
   493ac:	00c006c4 	movi	r3,27
   493b0:	19801d36 	bltu	r3,r6,49428 <_realloc_r+0x4dc>
   493b4:	88800204 	addi	r2,r17,8
   493b8:	98c00204 	addi	r3,r19,8
   493bc:	003fa306 	br	4924c <__alt_data_end+0xfffc924c>
   493c0:	8807883a 	mov	r3,r17
   493c4:	003f7406 	br	49198 <__alt_data_end+0xfffc9198>
   493c8:	ad2b883a 	add	r21,r21,r20
   493cc:	2505c83a 	sub	r2,r4,r20
   493d0:	e5400215 	stw	r21,8(fp)
   493d4:	10800054 	ori	r2,r2,1
   493d8:	a8800115 	stw	r2,4(r21)
   493dc:	98bfff17 	ldw	r2,-4(r19)
   493e0:	9009883a 	mov	r4,r18
   493e4:	1080004c 	andi	r2,r2,1
   493e8:	a0a8b03a 	or	r20,r20,r2
   493ec:	9d3fff15 	stw	r20,-4(r19)
   493f0:	004f1e80 	call	4f1e8 <__malloc_unlock>
   493f4:	9805883a 	mov	r2,r19
   493f8:	003f3b06 	br	490e8 <__alt_data_end+0xfffc90e8>
   493fc:	8809883a 	mov	r4,r17
   49400:	980b883a 	mov	r5,r19
   49404:	0047c840 	call	47c84 <memmove>
   49408:	003f9606 	br	49264 <__alt_data_end+0xfffc9264>
   4940c:	8809883a 	mov	r4,r17
   49410:	980b883a 	mov	r5,r19
   49414:	0047c840 	call	47c84 <memmove>
   49418:	b8c00117 	ldw	r3,4(r23)
   4941c:	b021883a 	mov	r16,r22
   49420:	b82b883a 	mov	r21,r23
   49424:	003f2306 	br	490b4 <__alt_data_end+0xfffc90b4>
   49428:	98c00217 	ldw	r3,8(r19)
   4942c:	88c00215 	stw	r3,8(r17)
   49430:	98c00317 	ldw	r3,12(r19)
   49434:	88c00315 	stw	r3,12(r17)
   49438:	30800c26 	beq	r6,r2,4946c <_realloc_r+0x520>
   4943c:	88800404 	addi	r2,r17,16
   49440:	98c00404 	addi	r3,r19,16
   49444:	003f8106 	br	4924c <__alt_data_end+0xfffc924c>
   49448:	893fff17 	ldw	r4,-4(r17)
   4944c:	00bfff04 	movi	r2,-4
   49450:	9823883a 	mov	r17,r19
   49454:	2084703a 	and	r2,r4,r2
   49458:	80a1883a 	add	r16,r16,r2
   4945c:	003f1506 	br	490b4 <__alt_data_end+0xfffc90b4>
   49460:	b8c00404 	addi	r3,r23,16
   49464:	9cc00204 	addi	r19,r19,8
   49468:	003f4b06 	br	49198 <__alt_data_end+0xfffc9198>
   4946c:	99000417 	ldw	r4,16(r19)
   49470:	88800604 	addi	r2,r17,24
   49474:	98c00604 	addi	r3,r19,24
   49478:	89000415 	stw	r4,16(r17)
   4947c:	99000517 	ldw	r4,20(r19)
   49480:	89000515 	stw	r4,20(r17)
   49484:	003f7106 	br	4924c <__alt_data_end+0xfffc924c>
   49488:	8805883a 	mov	r2,r17
   4948c:	003fb006 	br	49350 <__alt_data_end+0xfffc9350>
   49490:	8809883a 	mov	r4,r17
   49494:	980b883a 	mov	r5,r19
   49498:	0047c840 	call	47c84 <memmove>
   4949c:	003fb206 	br	49368 <__alt_data_end+0xfffc9368>
   494a0:	98800217 	ldw	r2,8(r19)
   494a4:	b8800415 	stw	r2,16(r23)
   494a8:	98800317 	ldw	r2,12(r19)
   494ac:	b8800515 	stw	r2,20(r23)
   494b0:	31000726 	beq	r6,r4,494d0 <_realloc_r+0x584>
   494b4:	b8800604 	addi	r2,r23,24
   494b8:	9cc00404 	addi	r19,r19,16
   494bc:	003fa406 	br	49350 <__alt_data_end+0xfffc9350>
   494c0:	9009883a 	mov	r4,r18
   494c4:	004f1e80 	call	4f1e8 <__malloc_unlock>
   494c8:	0005883a 	mov	r2,zero
   494cc:	003f0606 	br	490e8 <__alt_data_end+0xfffc90e8>
   494d0:	98c00417 	ldw	r3,16(r19)
   494d4:	9cc00604 	addi	r19,r19,24
   494d8:	b8800804 	addi	r2,r23,32
   494dc:	b8c00615 	stw	r3,24(r23)
   494e0:	98ffff17 	ldw	r3,-4(r19)
   494e4:	b8c00715 	stw	r3,28(r23)
   494e8:	003f9906 	br	49350 <__alt_data_end+0xfffc9350>

000494ec <__fpclassifyd>:
   494ec:	00a00034 	movhi	r2,32768
   494f0:	10bfffc4 	addi	r2,r2,-1
   494f4:	2884703a 	and	r2,r5,r2
   494f8:	10000726 	beq	r2,zero,49518 <__fpclassifyd+0x2c>
   494fc:	00fffc34 	movhi	r3,65520
   49500:	019ff834 	movhi	r6,32736
   49504:	28c7883a 	add	r3,r5,r3
   49508:	31bfffc4 	addi	r6,r6,-1
   4950c:	30c00536 	bltu	r6,r3,49524 <__fpclassifyd+0x38>
   49510:	00800104 	movi	r2,4
   49514:	f800283a 	ret
   49518:	2000021e 	bne	r4,zero,49524 <__fpclassifyd+0x38>
   4951c:	00800084 	movi	r2,2
   49520:	f800283a 	ret
   49524:	00dffc34 	movhi	r3,32752
   49528:	019ff834 	movhi	r6,32736
   4952c:	28cb883a 	add	r5,r5,r3
   49530:	31bfffc4 	addi	r6,r6,-1
   49534:	317ff62e 	bgeu	r6,r5,49510 <__alt_data_end+0xfffc9510>
   49538:	01400434 	movhi	r5,16
   4953c:	297fffc4 	addi	r5,r5,-1
   49540:	28800236 	bltu	r5,r2,4954c <__fpclassifyd+0x60>
   49544:	008000c4 	movi	r2,3
   49548:	f800283a 	ret
   4954c:	10c00226 	beq	r2,r3,49558 <__fpclassifyd+0x6c>
   49550:	0005883a 	mov	r2,zero
   49554:	f800283a 	ret
   49558:	2005003a 	cmpeq	r2,r4,zero
   4955c:	f800283a 	ret

00049560 <_sbrk_r>:
   49560:	defffd04 	addi	sp,sp,-12
   49564:	dc000015 	stw	r16,0(sp)
   49568:	04000174 	movhi	r16,5
   4956c:	dc400115 	stw	r17,4(sp)
   49570:	84152e04 	addi	r16,r16,21688
   49574:	2023883a 	mov	r17,r4
   49578:	2809883a 	mov	r4,r5
   4957c:	dfc00215 	stw	ra,8(sp)
   49580:	80000015 	stw	zero,0(r16)
   49584:	004f3dc0 	call	4f3dc <sbrk>
   49588:	00ffffc4 	movi	r3,-1
   4958c:	10c00526 	beq	r2,r3,495a4 <_sbrk_r+0x44>
   49590:	dfc00217 	ldw	ra,8(sp)
   49594:	dc400117 	ldw	r17,4(sp)
   49598:	dc000017 	ldw	r16,0(sp)
   4959c:	dec00304 	addi	sp,sp,12
   495a0:	f800283a 	ret
   495a4:	80c00017 	ldw	r3,0(r16)
   495a8:	183ff926 	beq	r3,zero,49590 <__alt_data_end+0xfffc9590>
   495ac:	88c00015 	stw	r3,0(r17)
   495b0:	003ff706 	br	49590 <__alt_data_end+0xfffc9590>

000495b4 <__sread>:
   495b4:	defffe04 	addi	sp,sp,-8
   495b8:	dc000015 	stw	r16,0(sp)
   495bc:	2821883a 	mov	r16,r5
   495c0:	2940038f 	ldh	r5,14(r5)
   495c4:	dfc00115 	stw	ra,4(sp)
   495c8:	004b2700 	call	4b270 <_read_r>
   495cc:	10000716 	blt	r2,zero,495ec <__sread+0x38>
   495d0:	80c01417 	ldw	r3,80(r16)
   495d4:	1887883a 	add	r3,r3,r2
   495d8:	80c01415 	stw	r3,80(r16)
   495dc:	dfc00117 	ldw	ra,4(sp)
   495e0:	dc000017 	ldw	r16,0(sp)
   495e4:	dec00204 	addi	sp,sp,8
   495e8:	f800283a 	ret
   495ec:	80c0030b 	ldhu	r3,12(r16)
   495f0:	18fbffcc 	andi	r3,r3,61439
   495f4:	80c0030d 	sth	r3,12(r16)
   495f8:	dfc00117 	ldw	ra,4(sp)
   495fc:	dc000017 	ldw	r16,0(sp)
   49600:	dec00204 	addi	sp,sp,8
   49604:	f800283a 	ret

00049608 <__seofread>:
   49608:	0005883a 	mov	r2,zero
   4960c:	f800283a 	ret

00049610 <__swrite>:
   49610:	2880030b 	ldhu	r2,12(r5)
   49614:	defffb04 	addi	sp,sp,-20
   49618:	dcc00315 	stw	r19,12(sp)
   4961c:	dc800215 	stw	r18,8(sp)
   49620:	dc400115 	stw	r17,4(sp)
   49624:	dc000015 	stw	r16,0(sp)
   49628:	dfc00415 	stw	ra,16(sp)
   4962c:	10c0400c 	andi	r3,r2,256
   49630:	2821883a 	mov	r16,r5
   49634:	2027883a 	mov	r19,r4
   49638:	3025883a 	mov	r18,r6
   4963c:	3823883a 	mov	r17,r7
   49640:	18000526 	beq	r3,zero,49658 <__swrite+0x48>
   49644:	2940038f 	ldh	r5,14(r5)
   49648:	000d883a 	mov	r6,zero
   4964c:	01c00084 	movi	r7,2
   49650:	004b2140 	call	4b214 <_lseek_r>
   49654:	8080030b 	ldhu	r2,12(r16)
   49658:	8140038f 	ldh	r5,14(r16)
   4965c:	10bbffcc 	andi	r2,r2,61439
   49660:	9809883a 	mov	r4,r19
   49664:	900d883a 	mov	r6,r18
   49668:	880f883a 	mov	r7,r17
   4966c:	8080030d 	sth	r2,12(r16)
   49670:	dfc00417 	ldw	ra,16(sp)
   49674:	dcc00317 	ldw	r19,12(sp)
   49678:	dc800217 	ldw	r18,8(sp)
   4967c:	dc400117 	ldw	r17,4(sp)
   49680:	dc000017 	ldw	r16,0(sp)
   49684:	dec00504 	addi	sp,sp,20
   49688:	004acf01 	jmpi	4acf0 <_write_r>

0004968c <__sseek>:
   4968c:	defffe04 	addi	sp,sp,-8
   49690:	dc000015 	stw	r16,0(sp)
   49694:	2821883a 	mov	r16,r5
   49698:	2940038f 	ldh	r5,14(r5)
   4969c:	dfc00115 	stw	ra,4(sp)
   496a0:	004b2140 	call	4b214 <_lseek_r>
   496a4:	00ffffc4 	movi	r3,-1
   496a8:	10c00826 	beq	r2,r3,496cc <__sseek+0x40>
   496ac:	80c0030b 	ldhu	r3,12(r16)
   496b0:	80801415 	stw	r2,80(r16)
   496b4:	18c40014 	ori	r3,r3,4096
   496b8:	80c0030d 	sth	r3,12(r16)
   496bc:	dfc00117 	ldw	ra,4(sp)
   496c0:	dc000017 	ldw	r16,0(sp)
   496c4:	dec00204 	addi	sp,sp,8
   496c8:	f800283a 	ret
   496cc:	80c0030b 	ldhu	r3,12(r16)
   496d0:	18fbffcc 	andi	r3,r3,61439
   496d4:	80c0030d 	sth	r3,12(r16)
   496d8:	dfc00117 	ldw	ra,4(sp)
   496dc:	dc000017 	ldw	r16,0(sp)
   496e0:	dec00204 	addi	sp,sp,8
   496e4:	f800283a 	ret

000496e8 <__sclose>:
   496e8:	2940038f 	ldh	r5,14(r5)
   496ec:	004ad4c1 	jmpi	4ad4c <_close_r>

000496f0 <strcmp>:
   496f0:	2144b03a 	or	r2,r4,r5
   496f4:	108000cc 	andi	r2,r2,3
   496f8:	1000171e 	bne	r2,zero,49758 <strcmp+0x68>
   496fc:	20800017 	ldw	r2,0(r4)
   49700:	28c00017 	ldw	r3,0(r5)
   49704:	10c0141e 	bne	r2,r3,49758 <strcmp+0x68>
   49708:	027fbff4 	movhi	r9,65279
   4970c:	4a7fbfc4 	addi	r9,r9,-257
   49710:	0086303a 	nor	r3,zero,r2
   49714:	02202074 	movhi	r8,32897
   49718:	1245883a 	add	r2,r2,r9
   4971c:	42202004 	addi	r8,r8,-32640
   49720:	10c4703a 	and	r2,r2,r3
   49724:	1204703a 	and	r2,r2,r8
   49728:	10000226 	beq	r2,zero,49734 <strcmp+0x44>
   4972c:	00001706 	br	4978c <strcmp+0x9c>
   49730:	1000161e 	bne	r2,zero,4978c <strcmp+0x9c>
   49734:	21000104 	addi	r4,r4,4
   49738:	20c00017 	ldw	r3,0(r4)
   4973c:	29400104 	addi	r5,r5,4
   49740:	29800017 	ldw	r6,0(r5)
   49744:	1a4f883a 	add	r7,r3,r9
   49748:	00c4303a 	nor	r2,zero,r3
   4974c:	3884703a 	and	r2,r7,r2
   49750:	1204703a 	and	r2,r2,r8
   49754:	19bff626 	beq	r3,r6,49730 <__alt_data_end+0xfffc9730>
   49758:	20800007 	ldb	r2,0(r4)
   4975c:	1000051e 	bne	r2,zero,49774 <strcmp+0x84>
   49760:	00000606 	br	4977c <strcmp+0x8c>
   49764:	21000044 	addi	r4,r4,1
   49768:	20800007 	ldb	r2,0(r4)
   4976c:	29400044 	addi	r5,r5,1
   49770:	10000226 	beq	r2,zero,4977c <strcmp+0x8c>
   49774:	28c00007 	ldb	r3,0(r5)
   49778:	10fffa26 	beq	r2,r3,49764 <__alt_data_end+0xfffc9764>
   4977c:	20800003 	ldbu	r2,0(r4)
   49780:	28c00003 	ldbu	r3,0(r5)
   49784:	10c5c83a 	sub	r2,r2,r3
   49788:	f800283a 	ret
   4978c:	0005883a 	mov	r2,zero
   49790:	f800283a 	ret

00049794 <__sprint_r.part.0>:
   49794:	28801917 	ldw	r2,100(r5)
   49798:	defff604 	addi	sp,sp,-40
   4979c:	dd400515 	stw	r21,20(sp)
   497a0:	dcc00315 	stw	r19,12(sp)
   497a4:	dfc00915 	stw	ra,36(sp)
   497a8:	df000815 	stw	fp,32(sp)
   497ac:	ddc00715 	stw	r23,28(sp)
   497b0:	dd800615 	stw	r22,24(sp)
   497b4:	dd000415 	stw	r20,16(sp)
   497b8:	dc800215 	stw	r18,8(sp)
   497bc:	dc400115 	stw	r17,4(sp)
   497c0:	dc000015 	stw	r16,0(sp)
   497c4:	1088000c 	andi	r2,r2,8192
   497c8:	2827883a 	mov	r19,r5
   497cc:	302b883a 	mov	r21,r6
   497d0:	10002d26 	beq	r2,zero,49888 <__sprint_r.part.0+0xf4>
   497d4:	30800217 	ldw	r2,8(r6)
   497d8:	35800017 	ldw	r22,0(r6)
   497dc:	10002826 	beq	r2,zero,49880 <__sprint_r.part.0+0xec>
   497e0:	2029883a 	mov	r20,r4
   497e4:	b5c00104 	addi	r23,r22,4
   497e8:	04bfffc4 	movi	r18,-1
   497ec:	bc400017 	ldw	r17,0(r23)
   497f0:	b4000017 	ldw	r16,0(r22)
   497f4:	0039883a 	mov	fp,zero
   497f8:	8822d0ba 	srli	r17,r17,2
   497fc:	04400316 	blt	zero,r17,4980c <__sprint_r.part.0+0x78>
   49800:	00001706 	br	49860 <__sprint_r.part.0+0xcc>
   49804:	84000104 	addi	r16,r16,4
   49808:	8f001526 	beq	r17,fp,49860 <__sprint_r.part.0+0xcc>
   4980c:	81400017 	ldw	r5,0(r16)
   49810:	a009883a 	mov	r4,r20
   49814:	980d883a 	mov	r6,r19
   49818:	004af8c0 	call	4af8c <_fputwc_r>
   4981c:	e7000044 	addi	fp,fp,1
   49820:	14bff81e 	bne	r2,r18,49804 <__alt_data_end+0xfffc9804>
   49824:	9005883a 	mov	r2,r18
   49828:	a8000215 	stw	zero,8(r21)
   4982c:	a8000115 	stw	zero,4(r21)
   49830:	dfc00917 	ldw	ra,36(sp)
   49834:	df000817 	ldw	fp,32(sp)
   49838:	ddc00717 	ldw	r23,28(sp)
   4983c:	dd800617 	ldw	r22,24(sp)
   49840:	dd400517 	ldw	r21,20(sp)
   49844:	dd000417 	ldw	r20,16(sp)
   49848:	dcc00317 	ldw	r19,12(sp)
   4984c:	dc800217 	ldw	r18,8(sp)
   49850:	dc400117 	ldw	r17,4(sp)
   49854:	dc000017 	ldw	r16,0(sp)
   49858:	dec00a04 	addi	sp,sp,40
   4985c:	f800283a 	ret
   49860:	a8c00217 	ldw	r3,8(r21)
   49864:	8c63883a 	add	r17,r17,r17
   49868:	8c63883a 	add	r17,r17,r17
   4986c:	1c45c83a 	sub	r2,r3,r17
   49870:	a8800215 	stw	r2,8(r21)
   49874:	b5800204 	addi	r22,r22,8
   49878:	bdc00204 	addi	r23,r23,8
   4987c:	103fdb1e 	bne	r2,zero,497ec <__alt_data_end+0xfffc97ec>
   49880:	0005883a 	mov	r2,zero
   49884:	003fe806 	br	49828 <__alt_data_end+0xfffc9828>
   49888:	0046a100 	call	46a10 <__sfvwrite_r>
   4988c:	003fe606 	br	49828 <__alt_data_end+0xfffc9828>

00049890 <__sprint_r>:
   49890:	30c00217 	ldw	r3,8(r6)
   49894:	18000126 	beq	r3,zero,4989c <__sprint_r+0xc>
   49898:	00497941 	jmpi	49794 <__sprint_r.part.0>
   4989c:	30000115 	stw	zero,4(r6)
   498a0:	0005883a 	mov	r2,zero
   498a4:	f800283a 	ret

000498a8 <___vfiprintf_internal_r>:
   498a8:	defeca04 	addi	sp,sp,-1240
   498ac:	dcc12f15 	stw	r19,1212(sp)
   498b0:	dfc13515 	stw	ra,1236(sp)
   498b4:	df013415 	stw	fp,1232(sp)
   498b8:	ddc13315 	stw	r23,1228(sp)
   498bc:	dd813215 	stw	r22,1224(sp)
   498c0:	dd413115 	stw	r21,1220(sp)
   498c4:	dd013015 	stw	r20,1216(sp)
   498c8:	dc812e15 	stw	r18,1208(sp)
   498cc:	dc412d15 	stw	r17,1204(sp)
   498d0:	dc012c15 	stw	r16,1200(sp)
   498d4:	d9012115 	stw	r4,1156(sp)
   498d8:	d9412015 	stw	r5,1152(sp)
   498dc:	d9c12315 	stw	r7,1164(sp)
   498e0:	3027883a 	mov	r19,r6
   498e4:	20000226 	beq	r4,zero,498f0 <___vfiprintf_internal_r+0x48>
   498e8:	20800e17 	ldw	r2,56(r4)
   498ec:	1000f726 	beq	r2,zero,49ccc <___vfiprintf_internal_r+0x424>
   498f0:	d8812017 	ldw	r2,1152(sp)
   498f4:	10c0030b 	ldhu	r3,12(r2)
   498f8:	1908000c 	andi	r4,r3,8192
   498fc:	1805883a 	mov	r2,r3
   49900:	2000081e 	bne	r4,zero,49924 <___vfiprintf_internal_r+0x7c>
   49904:	d9412017 	ldw	r5,1152(sp)
   49908:	18880014 	ori	r2,r3,8192
   4990c:	00f7ffc4 	movi	r3,-8193
   49910:	29001917 	ldw	r4,100(r5)
   49914:	2880030d 	sth	r2,12(r5)
   49918:	20c8703a 	and	r4,r4,r3
   4991c:	29001915 	stw	r4,100(r5)
   49920:	1007883a 	mov	r3,r2
   49924:	1100020c 	andi	r4,r2,8
   49928:	2000a726 	beq	r4,zero,49bc8 <___vfiprintf_internal_r+0x320>
   4992c:	d9412017 	ldw	r5,1152(sp)
   49930:	29000417 	ldw	r4,16(r5)
   49934:	2000a426 	beq	r4,zero,49bc8 <___vfiprintf_internal_r+0x320>
   49938:	1080068c 	andi	r2,r2,26
   4993c:	01000284 	movi	r4,10
   49940:	1100ab26 	beq	r2,r4,49bf0 <___vfiprintf_internal_r+0x348>
   49944:	d9010a04 	addi	r4,sp,1064
   49948:	d94109c4 	addi	r5,sp,1063
   4994c:	07000174 	movhi	fp,5
   49950:	04400174 	movhi	r17,5
   49954:	2145c83a 	sub	r2,r4,r5
   49958:	e7076004 	addi	fp,fp,7552
   4995c:	8c475c04 	addi	r17,r17,7536
   49960:	d9011e15 	stw	r4,1144(sp)
   49964:	d9411f15 	stw	r5,1148(sp)
   49968:	dec11a15 	stw	sp,1128(sp)
   4996c:	d8011c15 	stw	zero,1136(sp)
   49970:	d8011b15 	stw	zero,1132(sp)
   49974:	d8012715 	stw	zero,1180(sp)
   49978:	d8012515 	stw	zero,1172(sp)
   4997c:	d811883a 	mov	r8,sp
   49980:	d8812815 	stw	r2,1184(sp)
   49984:	982f883a 	mov	r23,r19
   49988:	b8800007 	ldb	r2,0(r23)
   4998c:	1003b026 	beq	r2,zero,4a850 <___vfiprintf_internal_r+0xfa8>
   49990:	01000944 	movi	r4,37
   49994:	1103ae26 	beq	r2,r4,4a850 <___vfiprintf_internal_r+0xfa8>
   49998:	b805883a 	mov	r2,r23
   4999c:	00000106 	br	499a4 <___vfiprintf_internal_r+0xfc>
   499a0:	19000326 	beq	r3,r4,499b0 <___vfiprintf_internal_r+0x108>
   499a4:	10800044 	addi	r2,r2,1
   499a8:	10c00007 	ldb	r3,0(r2)
   499ac:	183ffc1e 	bne	r3,zero,499a0 <__alt_data_end+0xfffc99a0>
   499b0:	15e1c83a 	sub	r16,r2,r23
   499b4:	1029883a 	mov	r20,r2
   499b8:	80001026 	beq	r16,zero,499fc <___vfiprintf_internal_r+0x154>
   499bc:	d8c11c17 	ldw	r3,1136(sp)
   499c0:	d8811b17 	ldw	r2,1132(sp)
   499c4:	45c00015 	stw	r23,0(r8)
   499c8:	80c7883a 	add	r3,r16,r3
   499cc:	10800044 	addi	r2,r2,1
   499d0:	44000115 	stw	r16,4(r8)
   499d4:	d8c11c15 	stw	r3,1136(sp)
   499d8:	d8811b15 	stw	r2,1132(sp)
   499dc:	010001c4 	movi	r4,7
   499e0:	2080740e 	bge	r4,r2,49bb4 <___vfiprintf_internal_r+0x30c>
   499e4:	1803a71e 	bne	r3,zero,4a884 <___vfiprintf_internal_r+0xfdc>
   499e8:	d8c12517 	ldw	r3,1172(sp)
   499ec:	d8011b15 	stw	zero,1132(sp)
   499f0:	d811883a 	mov	r8,sp
   499f4:	1c07883a 	add	r3,r3,r16
   499f8:	d8c12515 	stw	r3,1172(sp)
   499fc:	a0800007 	ldb	r2,0(r20)
   49a00:	1002bf26 	beq	r2,zero,4a500 <___vfiprintf_internal_r+0xc58>
   49a04:	a5c00044 	addi	r23,r20,1
   49a08:	a1800047 	ldb	r6,1(r20)
   49a0c:	d8011d85 	stb	zero,1142(sp)
   49a10:	d8012205 	stb	zero,1160(sp)
   49a14:	043fffc4 	movi	r16,-1
   49a18:	d8012415 	stw	zero,1168(sp)
   49a1c:	0025883a 	mov	r18,zero
   49a20:	05001604 	movi	r20,88
   49a24:	05400244 	movi	r21,9
   49a28:	4027883a 	mov	r19,r8
   49a2c:	bdc00044 	addi	r23,r23,1
   49a30:	30bff804 	addi	r2,r6,-32
   49a34:	a0825636 	bltu	r20,r2,4a390 <___vfiprintf_internal_r+0xae8>
   49a38:	100490ba 	slli	r2,r2,2
   49a3c:	01000174 	movhi	r4,5
   49a40:	21269404 	addi	r4,r4,-26032
   49a44:	1105883a 	add	r2,r2,r4
   49a48:	10800017 	ldw	r2,0(r2)
   49a4c:	1000683a 	jmp	r2
   49a50:	0004a320 	cmpeqi	zero,zero,4748
   49a54:	0004a390 	cmplti	zero,zero,4750
   49a58:	0004a390 	cmplti	zero,zero,4750
   49a5c:	0004a384 	movi	zero,4750
   49a60:	0004a390 	cmplti	zero,zero,4750
   49a64:	0004a390 	cmplti	zero,zero,4750
   49a68:	0004a390 	cmplti	zero,zero,4750
   49a6c:	0004a390 	cmplti	zero,zero,4750
   49a70:	0004a390 	cmplti	zero,zero,4750
   49a74:	0004a390 	cmplti	zero,zero,4750
   49a78:	0004a110 	cmplti	zero,zero,4740
   49a7c:	0004a338 	rdprs	zero,zero,4748
   49a80:	0004a390 	cmplti	zero,zero,4750
   49a84:	00049ce4 	muli	zero,zero,4723
   49a88:	0004a134 	movhi	zero,4740
   49a8c:	0004a390 	cmplti	zero,zero,4750
   49a90:	00049cf0 	cmpltui	zero,zero,4723
   49a94:	00049cfc 	xorhi	zero,zero,4723
   49a98:	00049cfc 	xorhi	zero,zero,4723
   49a9c:	00049cfc 	xorhi	zero,zero,4723
   49aa0:	00049cfc 	xorhi	zero,zero,4723
   49aa4:	00049cfc 	xorhi	zero,zero,4723
   49aa8:	00049cfc 	xorhi	zero,zero,4723
   49aac:	00049cfc 	xorhi	zero,zero,4723
   49ab0:	00049cfc 	xorhi	zero,zero,4723
   49ab4:	00049cfc 	xorhi	zero,zero,4723
   49ab8:	0004a390 	cmplti	zero,zero,4750
   49abc:	0004a390 	cmplti	zero,zero,4750
   49ac0:	0004a390 	cmplti	zero,zero,4750
   49ac4:	0004a390 	cmplti	zero,zero,4750
   49ac8:	0004a390 	cmplti	zero,zero,4750
   49acc:	0004a390 	cmplti	zero,zero,4750
   49ad0:	0004a390 	cmplti	zero,zero,4750
   49ad4:	0004a390 	cmplti	zero,zero,4750
   49ad8:	0004a390 	cmplti	zero,zero,4750
   49adc:	0004a390 	cmplti	zero,zero,4750
   49ae0:	00049d3c 	xorhi	zero,zero,4724
   49ae4:	0004a390 	cmplti	zero,zero,4750
   49ae8:	0004a390 	cmplti	zero,zero,4750
   49aec:	0004a390 	cmplti	zero,zero,4750
   49af0:	0004a390 	cmplti	zero,zero,4750
   49af4:	0004a390 	cmplti	zero,zero,4750
   49af8:	0004a390 	cmplti	zero,zero,4750
   49afc:	0004a390 	cmplti	zero,zero,4750
   49b00:	0004a390 	cmplti	zero,zero,4750
   49b04:	0004a390 	cmplti	zero,zero,4750
   49b08:	0004a390 	cmplti	zero,zero,4750
   49b0c:	0004a02c 	andhi	zero,zero,4736
   49b10:	0004a390 	cmplti	zero,zero,4750
   49b14:	0004a390 	cmplti	zero,zero,4750
   49b18:	0004a390 	cmplti	zero,zero,4750
   49b1c:	0004a390 	cmplti	zero,zero,4750
   49b20:	0004a390 	cmplti	zero,zero,4750
   49b24:	0004a06c 	andhi	zero,zero,4737
   49b28:	0004a390 	cmplti	zero,zero,4750
   49b2c:	0004a390 	cmplti	zero,zero,4750
   49b30:	0004a0b0 	cmpltui	zero,zero,4738
   49b34:	0004a390 	cmplti	zero,zero,4750
   49b38:	0004a390 	cmplti	zero,zero,4750
   49b3c:	0004a390 	cmplti	zero,zero,4750
   49b40:	0004a390 	cmplti	zero,zero,4750
   49b44:	0004a390 	cmplti	zero,zero,4750
   49b48:	0004a390 	cmplti	zero,zero,4750
   49b4c:	0004a390 	cmplti	zero,zero,4750
   49b50:	0004a390 	cmplti	zero,zero,4750
   49b54:	0004a390 	cmplti	zero,zero,4750
   49b58:	0004a390 	cmplti	zero,zero,4750
   49b5c:	00049ff8 	rdprs	zero,zero,4735
   49b60:	0004a348 	cmpgei	zero,zero,4749
   49b64:	0004a390 	cmplti	zero,zero,4750
   49b68:	0004a390 	cmplti	zero,zero,4750
   49b6c:	0004a390 	cmplti	zero,zero,4750
   49b70:	0004a184 	movi	zero,4742
   49b74:	0004a348 	cmpgei	zero,zero,4749
   49b78:	0004a390 	cmplti	zero,zero,4750
   49b7c:	0004a390 	cmplti	zero,zero,4750
   49b80:	0004a09c 	xori	zero,zero,4738
   49b84:	0004a390 	cmplti	zero,zero,4750
   49b88:	0004a2e8 	cmpgeui	zero,zero,4747
   49b8c:	0004a270 	cmpltui	zero,zero,4745
   49b90:	0004a2a4 	muli	zero,zero,4746
   49b94:	0004a190 	cmplti	zero,zero,4742
   49b98:	0004a390 	cmplti	zero,zero,4750
   49b9c:	0004a19c 	xori	zero,zero,4742
   49ba0:	0004a390 	cmplti	zero,zero,4750
   49ba4:	0004a1f8 	rdprs	zero,zero,4743
   49ba8:	0004a390 	cmplti	zero,zero,4750
   49bac:	0004a390 	cmplti	zero,zero,4750
   49bb0:	0004a22c 	andhi	zero,zero,4744
   49bb4:	42000204 	addi	r8,r8,8
   49bb8:	d8c12517 	ldw	r3,1172(sp)
   49bbc:	1c07883a 	add	r3,r3,r16
   49bc0:	d8c12515 	stw	r3,1172(sp)
   49bc4:	003f8d06 	br	499fc <__alt_data_end+0xfffc99fc>
   49bc8:	d9012117 	ldw	r4,1156(sp)
   49bcc:	d9412017 	ldw	r5,1152(sp)
   49bd0:	00445700 	call	44570 <__swsetup_r>
   49bd4:	1000301e 	bne	r2,zero,49c98 <___vfiprintf_internal_r+0x3f0>
   49bd8:	d8812017 	ldw	r2,1152(sp)
   49bdc:	01000284 	movi	r4,10
   49be0:	10c0030b 	ldhu	r3,12(r2)
   49be4:	1805883a 	mov	r2,r3
   49be8:	1080068c 	andi	r2,r2,26
   49bec:	113f551e 	bne	r2,r4,49944 <__alt_data_end+0xfffc9944>
   49bf0:	d9012017 	ldw	r4,1152(sp)
   49bf4:	2080038b 	ldhu	r2,14(r4)
   49bf8:	113fffcc 	andi	r4,r2,65535
   49bfc:	2120001c 	xori	r4,r4,32768
   49c00:	21200004 	addi	r4,r4,-32768
   49c04:	203f4f16 	blt	r4,zero,49944 <__alt_data_end+0xfffc9944>
   49c08:	d9412017 	ldw	r5,1152(sp)
   49c0c:	d9012117 	ldw	r4,1156(sp)
   49c10:	d9c12317 	ldw	r7,1164(sp)
   49c14:	2b001917 	ldw	r12,100(r5)
   49c18:	2ac00717 	ldw	r11,28(r5)
   49c1c:	2a800917 	ldw	r10,36(r5)
   49c20:	02010004 	movi	r8,1024
   49c24:	18ffff4c 	andi	r3,r3,65533
   49c28:	da0b883a 	add	r5,sp,r8
   49c2c:	980d883a 	mov	r6,r19
   49c30:	d8c1030d 	sth	r3,1036(sp)
   49c34:	db011915 	stw	r12,1124(sp)
   49c38:	d881038d 	sth	r2,1038(sp)
   49c3c:	dac10715 	stw	r11,1052(sp)
   49c40:	da810915 	stw	r10,1060(sp)
   49c44:	dec10015 	stw	sp,1024(sp)
   49c48:	dec10415 	stw	sp,1040(sp)
   49c4c:	da010215 	stw	r8,1032(sp)
   49c50:	da010515 	stw	r8,1044(sp)
   49c54:	d8010615 	stw	zero,1048(sp)
   49c58:	00498a80 	call	498a8 <___vfiprintf_internal_r>
   49c5c:	1021883a 	mov	r16,r2
   49c60:	10000416 	blt	r2,zero,49c74 <___vfiprintf_internal_r+0x3cc>
   49c64:	d9012117 	ldw	r4,1156(sp)
   49c68:	d9410004 	addi	r5,sp,1024
   49c6c:	0045ff00 	call	45ff0 <_fflush_r>
   49c70:	10040f1e 	bne	r2,zero,4acb0 <___vfiprintf_internal_r+0x1408>
   49c74:	d881030b 	ldhu	r2,1036(sp)
   49c78:	1080100c 	andi	r2,r2,64
   49c7c:	10000426 	beq	r2,zero,49c90 <___vfiprintf_internal_r+0x3e8>
   49c80:	d8c12017 	ldw	r3,1152(sp)
   49c84:	1880030b 	ldhu	r2,12(r3)
   49c88:	10801014 	ori	r2,r2,64
   49c8c:	1880030d 	sth	r2,12(r3)
   49c90:	8005883a 	mov	r2,r16
   49c94:	00000106 	br	49c9c <___vfiprintf_internal_r+0x3f4>
   49c98:	00bfffc4 	movi	r2,-1
   49c9c:	dfc13517 	ldw	ra,1236(sp)
   49ca0:	df013417 	ldw	fp,1232(sp)
   49ca4:	ddc13317 	ldw	r23,1228(sp)
   49ca8:	dd813217 	ldw	r22,1224(sp)
   49cac:	dd413117 	ldw	r21,1220(sp)
   49cb0:	dd013017 	ldw	r20,1216(sp)
   49cb4:	dcc12f17 	ldw	r19,1212(sp)
   49cb8:	dc812e17 	ldw	r18,1208(sp)
   49cbc:	dc412d17 	ldw	r17,1204(sp)
   49cc0:	dc012c17 	ldw	r16,1200(sp)
   49cc4:	dec13604 	addi	sp,sp,1240
   49cc8:	f800283a 	ret
   49ccc:	00465ac0 	call	465ac <__sinit>
   49cd0:	003f0706 	br	498f0 <__alt_data_end+0xfffc98f0>
   49cd4:	d8c12417 	ldw	r3,1168(sp)
   49cd8:	d8812315 	stw	r2,1164(sp)
   49cdc:	00c7c83a 	sub	r3,zero,r3
   49ce0:	d8c12415 	stw	r3,1168(sp)
   49ce4:	94800114 	ori	r18,r18,4
   49ce8:	b9800007 	ldb	r6,0(r23)
   49cec:	003f4f06 	br	49a2c <__alt_data_end+0xfffc9a2c>
   49cf0:	94802014 	ori	r18,r18,128
   49cf4:	b9800007 	ldb	r6,0(r23)
   49cf8:	003f4c06 	br	49a2c <__alt_data_end+0xfffc9a2c>
   49cfc:	dc012615 	stw	r16,1176(sp)
   49d00:	d8012415 	stw	zero,1168(sp)
   49d04:	35bff404 	addi	r22,r6,-48
   49d08:	0009883a 	mov	r4,zero
   49d0c:	b821883a 	mov	r16,r23
   49d10:	01400284 	movi	r5,10
   49d14:	004c3c40 	call	4c3c4 <__mulsi3>
   49d18:	81800007 	ldb	r6,0(r16)
   49d1c:	1589883a 	add	r4,r2,r22
   49d20:	bdc00044 	addi	r23,r23,1
   49d24:	35bff404 	addi	r22,r6,-48
   49d28:	b821883a 	mov	r16,r23
   49d2c:	adbff82e 	bgeu	r21,r22,49d10 <__alt_data_end+0xfffc9d10>
   49d30:	d9012415 	stw	r4,1168(sp)
   49d34:	dc012617 	ldw	r16,1176(sp)
   49d38:	003f3d06 	br	49a30 <__alt_data_end+0xfffc9a30>
   49d3c:	d8c12203 	ldbu	r3,1160(sp)
   49d40:	94800414 	ori	r18,r18,16
   49d44:	9080080c 	andi	r2,r18,32
   49d48:	d8c11d85 	stb	r3,1142(sp)
   49d4c:	9811883a 	mov	r8,r19
   49d50:	d8c12317 	ldw	r3,1164(sp)
   49d54:	10018226 	beq	r2,zero,4a360 <___vfiprintf_internal_r+0xab8>
   49d58:	d9012317 	ldw	r4,1164(sp)
   49d5c:	18800117 	ldw	r2,4(r3)
   49d60:	1cc00017 	ldw	r19,0(r3)
   49d64:	21000204 	addi	r4,r4,8
   49d68:	d9012315 	stw	r4,1164(sp)
   49d6c:	102b883a 	mov	r21,r2
   49d70:	10030016 	blt	r2,zero,4a974 <___vfiprintf_internal_r+0x10cc>
   49d74:	dd811d83 	ldbu	r22,1142(sp)
   49d78:	8029883a 	mov	r20,r16
   49d7c:	00800044 	movi	r2,1
   49d80:	9d46b03a 	or	r3,r19,r21
   49d84:	80000216 	blt	r16,zero,49d90 <___vfiprintf_internal_r+0x4e8>
   49d88:	013fdfc4 	movi	r4,-129
   49d8c:	9124703a 	and	r18,r18,r4
   49d90:	1801b41e 	bne	r3,zero,4a464 <___vfiprintf_internal_r+0xbbc>
   49d94:	80028126 	beq	r16,zero,4a79c <___vfiprintf_internal_r+0xef4>
   49d98:	10803fcc 	andi	r2,r2,255
   49d9c:	00c00044 	movi	r3,1
   49da0:	10c1d126 	beq	r2,r3,4a4e8 <___vfiprintf_internal_r+0xc40>
   49da4:	00c00084 	movi	r3,2
   49da8:	10c28626 	beq	r2,r3,4a7c4 <___vfiprintf_internal_r+0xf1c>
   49dac:	d8c10a04 	addi	r3,sp,1064
   49db0:	9808d0fa 	srli	r4,r19,3
   49db4:	a80a977a 	slli	r5,r21,29
   49db8:	a82ad0fa 	srli	r21,r21,3
   49dbc:	9cc001cc 	andi	r19,r19,7
   49dc0:	98800c04 	addi	r2,r19,48
   49dc4:	18ffffc4 	addi	r3,r3,-1
   49dc8:	2926b03a 	or	r19,r5,r4
   49dcc:	18800005 	stb	r2,0(r3)
   49dd0:	9d48b03a 	or	r4,r19,r21
   49dd4:	203ff61e 	bne	r4,zero,49db0 <__alt_data_end+0xfffc9db0>
   49dd8:	9100004c 	andi	r4,r18,1
   49ddc:	d8c12215 	stw	r3,1160(sp)
   49de0:	2002b31e 	bne	r4,zero,4a8b0 <___vfiprintf_internal_r+0x1008>
   49de4:	d9411e17 	ldw	r5,1144(sp)
   49de8:	28e9c83a 	sub	r20,r5,r3
   49dec:	a02b883a 	mov	r21,r20
   49df0:	a400010e 	bge	r20,r16,49df8 <___vfiprintf_internal_r+0x550>
   49df4:	802b883a 	mov	r21,r16
   49df8:	b5803fcc 	andi	r22,r22,255
   49dfc:	b580201c 	xori	r22,r22,128
   49e00:	b5bfe004 	addi	r22,r22,-128
   49e04:	b0000126 	beq	r22,zero,49e0c <___vfiprintf_internal_r+0x564>
   49e08:	ad400044 	addi	r21,r21,1
   49e0c:	9280008c 	andi	r10,r18,2
   49e10:	50000126 	beq	r10,zero,49e18 <___vfiprintf_internal_r+0x570>
   49e14:	ad400084 	addi	r21,r21,2
   49e18:	9580210c 	andi	r22,r18,132
   49e1c:	b001751e 	bne	r22,zero,4a3f4 <___vfiprintf_internal_r+0xb4c>
   49e20:	d9012417 	ldw	r4,1168(sp)
   49e24:	2567c83a 	sub	r19,r4,r21
   49e28:	04c1720e 	bge	zero,r19,4a3f4 <___vfiprintf_internal_r+0xb4c>
   49e2c:	01c00404 	movi	r7,16
   49e30:	d8c11c17 	ldw	r3,1136(sp)
   49e34:	3cc36b0e 	bge	r7,r19,4abe4 <___vfiprintf_internal_r+0x133c>
   49e38:	00800174 	movhi	r2,5
   49e3c:	10876004 	addi	r2,r2,7552
   49e40:	dc012915 	stw	r16,1188(sp)
   49e44:	d9011b17 	ldw	r4,1132(sp)
   49e48:	9821883a 	mov	r16,r19
   49e4c:	d8812615 	stw	r2,1176(sp)
   49e50:	030001c4 	movi	r12,7
   49e54:	5027883a 	mov	r19,r10
   49e58:	00000506 	br	49e70 <___vfiprintf_internal_r+0x5c8>
   49e5c:	21400084 	addi	r5,r4,2
   49e60:	42000204 	addi	r8,r8,8
   49e64:	1009883a 	mov	r4,r2
   49e68:	843ffc04 	addi	r16,r16,-16
   49e6c:	3c000d0e 	bge	r7,r16,49ea4 <___vfiprintf_internal_r+0x5fc>
   49e70:	18c00404 	addi	r3,r3,16
   49e74:	20800044 	addi	r2,r4,1
   49e78:	47000015 	stw	fp,0(r8)
   49e7c:	41c00115 	stw	r7,4(r8)
   49e80:	d8c11c15 	stw	r3,1136(sp)
   49e84:	d8811b15 	stw	r2,1132(sp)
   49e88:	60bff40e 	bge	r12,r2,49e5c <__alt_data_end+0xfffc9e5c>
   49e8c:	18014b1e 	bne	r3,zero,4a3bc <___vfiprintf_internal_r+0xb14>
   49e90:	843ffc04 	addi	r16,r16,-16
   49e94:	0009883a 	mov	r4,zero
   49e98:	01400044 	movi	r5,1
   49e9c:	d811883a 	mov	r8,sp
   49ea0:	3c3ff316 	blt	r7,r16,49e70 <__alt_data_end+0xfffc9e70>
   49ea4:	9815883a 	mov	r10,r19
   49ea8:	8027883a 	mov	r19,r16
   49eac:	dc012917 	ldw	r16,1188(sp)
   49eb0:	d9012617 	ldw	r4,1176(sp)
   49eb4:	98c7883a 	add	r3,r19,r3
   49eb8:	44c00115 	stw	r19,4(r8)
   49ebc:	41000015 	stw	r4,0(r8)
   49ec0:	d8c11c15 	stw	r3,1136(sp)
   49ec4:	d9411b15 	stw	r5,1132(sp)
   49ec8:	008001c4 	movi	r2,7
   49ecc:	11425116 	blt	r2,r5,4a814 <___vfiprintf_internal_r+0xf6c>
   49ed0:	d9011d87 	ldb	r4,1142(sp)
   49ed4:	42000204 	addi	r8,r8,8
   49ed8:	28800044 	addi	r2,r5,1
   49edc:	20014a1e 	bne	r4,zero,4a408 <___vfiprintf_internal_r+0xb60>
   49ee0:	50000c26 	beq	r10,zero,49f14 <___vfiprintf_internal_r+0x66c>
   49ee4:	d9011d04 	addi	r4,sp,1140
   49ee8:	18c00084 	addi	r3,r3,2
   49eec:	41000015 	stw	r4,0(r8)
   49ef0:	01000084 	movi	r4,2
   49ef4:	41000115 	stw	r4,4(r8)
   49ef8:	d8c11c15 	stw	r3,1136(sp)
   49efc:	d8811b15 	stw	r2,1132(sp)
   49f00:	010001c4 	movi	r4,7
   49f04:	20822016 	blt	r4,r2,4a788 <___vfiprintf_internal_r+0xee0>
   49f08:	100b883a 	mov	r5,r2
   49f0c:	42000204 	addi	r8,r8,8
   49f10:	10800044 	addi	r2,r2,1
   49f14:	01002004 	movi	r4,128
   49f18:	b101de26 	beq	r22,r4,4a694 <___vfiprintf_internal_r+0xdec>
   49f1c:	8521c83a 	sub	r16,r16,r20
   49f20:	0400230e 	bge	zero,r16,49fb0 <___vfiprintf_internal_r+0x708>
   49f24:	04c00404 	movi	r19,16
   49f28:	9c030d0e 	bge	r19,r16,4ab60 <___vfiprintf_internal_r+0x12b8>
   49f2c:	00800174 	movhi	r2,5
   49f30:	10875c04 	addi	r2,r2,7536
   49f34:	d8812615 	stw	r2,1176(sp)
   49f38:	058001c4 	movi	r22,7
   49f3c:	00000506 	br	49f54 <___vfiprintf_internal_r+0x6ac>
   49f40:	28800084 	addi	r2,r5,2
   49f44:	42000204 	addi	r8,r8,8
   49f48:	200b883a 	mov	r5,r4
   49f4c:	843ffc04 	addi	r16,r16,-16
   49f50:	9c000d0e 	bge	r19,r16,49f88 <___vfiprintf_internal_r+0x6e0>
   49f54:	18c00404 	addi	r3,r3,16
   49f58:	29000044 	addi	r4,r5,1
   49f5c:	44400015 	stw	r17,0(r8)
   49f60:	44c00115 	stw	r19,4(r8)
   49f64:	d8c11c15 	stw	r3,1136(sp)
   49f68:	d9011b15 	stw	r4,1132(sp)
   49f6c:	b13ff40e 	bge	r22,r4,49f40 <__alt_data_end+0xfffc9f40>
   49f70:	1801321e 	bne	r3,zero,4a43c <___vfiprintf_internal_r+0xb94>
   49f74:	843ffc04 	addi	r16,r16,-16
   49f78:	000b883a 	mov	r5,zero
   49f7c:	00800044 	movi	r2,1
   49f80:	d811883a 	mov	r8,sp
   49f84:	9c3ff316 	blt	r19,r16,49f54 <__alt_data_end+0xfffc9f54>
   49f88:	d9012617 	ldw	r4,1176(sp)
   49f8c:	1c07883a 	add	r3,r3,r16
   49f90:	44000115 	stw	r16,4(r8)
   49f94:	41000015 	stw	r4,0(r8)
   49f98:	d8c11c15 	stw	r3,1136(sp)
   49f9c:	d8811b15 	stw	r2,1132(sp)
   49fa0:	010001c4 	movi	r4,7
   49fa4:	20816216 	blt	r4,r2,4a530 <___vfiprintf_internal_r+0xc88>
   49fa8:	42000204 	addi	r8,r8,8
   49fac:	10800044 	addi	r2,r2,1
   49fb0:	d9012217 	ldw	r4,1160(sp)
   49fb4:	1d07883a 	add	r3,r3,r20
   49fb8:	45000115 	stw	r20,4(r8)
   49fbc:	41000015 	stw	r4,0(r8)
   49fc0:	d8c11c15 	stw	r3,1136(sp)
   49fc4:	d8811b15 	stw	r2,1132(sp)
   49fc8:	010001c4 	movi	r4,7
   49fcc:	2081610e 	bge	r4,r2,4a554 <___vfiprintf_internal_r+0xcac>
   49fd0:	1802211e 	bne	r3,zero,4a858 <___vfiprintf_internal_r+0xfb0>
   49fd4:	d8011b15 	stw	zero,1132(sp)
   49fd8:	9480010c 	andi	r18,r18,4
   49fdc:	9002171e 	bne	r18,zero,4a83c <___vfiprintf_internal_r+0xf94>
   49fe0:	d9412417 	ldw	r5,1168(sp)
   49fe4:	a9433716 	blt	r21,r5,4acc4 <___vfiprintf_internal_r+0x141c>
   49fe8:	d8812517 	ldw	r2,1172(sp)
   49fec:	1545883a 	add	r2,r2,r21
   49ff0:	d8812515 	stw	r2,1172(sp)
   49ff4:	00019a06 	br	4a660 <___vfiprintf_internal_r+0xdb8>
   49ff8:	d8c12317 	ldw	r3,1164(sp)
   49ffc:	05400044 	movi	r21,1
   4a000:	9811883a 	mov	r8,r19
   4a004:	18800017 	ldw	r2,0(r3)
   4a008:	18c00104 	addi	r3,r3,4
   4a00c:	d8c12315 	stw	r3,1164(sp)
   4a010:	d8c10004 	addi	r3,sp,1024
   4a014:	d8011d85 	stb	zero,1142(sp)
   4a018:	d8810005 	stb	r2,1024(sp)
   4a01c:	a829883a 	mov	r20,r21
   4a020:	d8c12215 	stw	r3,1160(sp)
   4a024:	0021883a 	mov	r16,zero
   4a028:	003f7806 	br	49e0c <__alt_data_end+0xfffc9e0c>
   4a02c:	94800414 	ori	r18,r18,16
   4a030:	9080080c 	andi	r2,r18,32
   4a034:	9811883a 	mov	r8,r19
   4a038:	10009026 	beq	r2,zero,4a27c <___vfiprintf_internal_r+0x9d4>
   4a03c:	d8812317 	ldw	r2,1164(sp)
   4a040:	d8c12317 	ldw	r3,1164(sp)
   4a044:	14c00017 	ldw	r19,0(r2)
   4a048:	15400117 	ldw	r21,4(r2)
   4a04c:	18c00204 	addi	r3,r3,8
   4a050:	d8c12315 	stw	r3,1164(sp)
   4a054:	0005883a 	mov	r2,zero
   4a058:	9d46b03a 	or	r3,r19,r21
   4a05c:	d8011d85 	stb	zero,1142(sp)
   4a060:	8029883a 	mov	r20,r16
   4a064:	002d883a 	mov	r22,zero
   4a068:	003f4606 	br	49d84 <__alt_data_end+0xfffc9d84>
   4a06c:	94800414 	ori	r18,r18,16
   4a070:	9080080c 	andi	r2,r18,32
   4a074:	9811883a 	mov	r8,r19
   4a078:	10006226 	beq	r2,zero,4a204 <___vfiprintf_internal_r+0x95c>
   4a07c:	d9012317 	ldw	r4,1164(sp)
   4a080:	00800044 	movi	r2,1
   4a084:	24c00017 	ldw	r19,0(r4)
   4a088:	25400117 	ldw	r21,4(r4)
   4a08c:	21000204 	addi	r4,r4,8
   4a090:	d9012315 	stw	r4,1164(sp)
   4a094:	9d46b03a 	or	r3,r19,r21
   4a098:	003ff006 	br	4a05c <__alt_data_end+0xfffca05c>
   4a09c:	b9800007 	ldb	r6,0(r23)
   4a0a0:	00801b04 	movi	r2,108
   4a0a4:	3082b226 	beq	r6,r2,4ab70 <___vfiprintf_internal_r+0x12c8>
   4a0a8:	94800414 	ori	r18,r18,16
   4a0ac:	003e5f06 	br	49a2c <__alt_data_end+0xfffc9a2c>
   4a0b0:	d8c12203 	ldbu	r3,1160(sp)
   4a0b4:	01000174 	movhi	r4,5
   4a0b8:	2106f604 	addi	r4,r4,7128
   4a0bc:	d8c11d85 	stb	r3,1142(sp)
   4a0c0:	d9012715 	stw	r4,1180(sp)
   4a0c4:	90c0080c 	andi	r3,r18,32
   4a0c8:	9811883a 	mov	r8,r19
   4a0cc:	d8812317 	ldw	r2,1164(sp)
   4a0d0:	18005f26 	beq	r3,zero,4a250 <___vfiprintf_internal_r+0x9a8>
   4a0d4:	d9012317 	ldw	r4,1164(sp)
   4a0d8:	14c00017 	ldw	r19,0(r2)
   4a0dc:	15400117 	ldw	r21,4(r2)
   4a0e0:	21000204 	addi	r4,r4,8
   4a0e4:	d9012315 	stw	r4,1164(sp)
   4a0e8:	9080004c 	andi	r2,r18,1
   4a0ec:	1001e226 	beq	r2,zero,4a878 <___vfiprintf_internal_r+0xfd0>
   4a0f0:	9d46b03a 	or	r3,r19,r21
   4a0f4:	18024e26 	beq	r3,zero,4aa30 <___vfiprintf_internal_r+0x1188>
   4a0f8:	00800c04 	movi	r2,48
   4a0fc:	d8811d05 	stb	r2,1140(sp)
   4a100:	d9811d45 	stb	r6,1141(sp)
   4a104:	94800094 	ori	r18,r18,2
   4a108:	00800084 	movi	r2,2
   4a10c:	003fd306 	br	4a05c <__alt_data_end+0xfffca05c>
   4a110:	d9012317 	ldw	r4,1164(sp)
   4a114:	d9412317 	ldw	r5,1164(sp)
   4a118:	21000017 	ldw	r4,0(r4)
   4a11c:	28800104 	addi	r2,r5,4
   4a120:	d9012415 	stw	r4,1168(sp)
   4a124:	203eeb16 	blt	r4,zero,49cd4 <__alt_data_end+0xfffc9cd4>
   4a128:	d8812315 	stw	r2,1164(sp)
   4a12c:	b9800007 	ldb	r6,0(r23)
   4a130:	003e3e06 	br	49a2c <__alt_data_end+0xfffc9a2c>
   4a134:	b9800007 	ldb	r6,0(r23)
   4a138:	01000a84 	movi	r4,42
   4a13c:	b8800044 	addi	r2,r23,1
   4a140:	3102d226 	beq	r6,r4,4ac8c <___vfiprintf_internal_r+0x13e4>
   4a144:	35bff404 	addi	r22,r6,-48
   4a148:	102f883a 	mov	r23,r2
   4a14c:	0021883a 	mov	r16,zero
   4a150:	adbe3736 	bltu	r21,r22,49a30 <__alt_data_end+0xfffc9a30>
   4a154:	0009883a 	mov	r4,zero
   4a158:	01400284 	movi	r5,10
   4a15c:	004c3c40 	call	4c3c4 <__mulsi3>
   4a160:	b9800007 	ldb	r6,0(r23)
   4a164:	b089883a 	add	r4,r22,r2
   4a168:	bdc00044 	addi	r23,r23,1
   4a16c:	35bff404 	addi	r22,r6,-48
   4a170:	adbff92e 	bgeu	r21,r22,4a158 <__alt_data_end+0xfffca158>
   4a174:	2021883a 	mov	r16,r4
   4a178:	203e2d0e 	bge	r4,zero,49a30 <__alt_data_end+0xfffc9a30>
   4a17c:	043fffc4 	movi	r16,-1
   4a180:	003e2b06 	br	49a30 <__alt_data_end+0xfffc9a30>
   4a184:	94801014 	ori	r18,r18,64
   4a188:	b9800007 	ldb	r6,0(r23)
   4a18c:	003e2706 	br	49a2c <__alt_data_end+0xfffc9a2c>
   4a190:	94800814 	ori	r18,r18,32
   4a194:	b9800007 	ldb	r6,0(r23)
   4a198:	003e2406 	br	49a2c <__alt_data_end+0xfffc9a2c>
   4a19c:	d9412317 	ldw	r5,1164(sp)
   4a1a0:	d8812317 	ldw	r2,1164(sp)
   4a1a4:	d8011d85 	stb	zero,1142(sp)
   4a1a8:	29400017 	ldw	r5,0(r5)
   4a1ac:	9811883a 	mov	r8,r19
   4a1b0:	14c00104 	addi	r19,r2,4
   4a1b4:	d9412215 	stw	r5,1160(sp)
   4a1b8:	28029026 	beq	r5,zero,4abfc <___vfiprintf_internal_r+0x1354>
   4a1bc:	d9012217 	ldw	r4,1160(sp)
   4a1c0:	80027616 	blt	r16,zero,4ab9c <___vfiprintf_internal_r+0x12f4>
   4a1c4:	000b883a 	mov	r5,zero
   4a1c8:	800d883a 	mov	r6,r16
   4a1cc:	da012a15 	stw	r8,1192(sp)
   4a1d0:	0047a640 	call	47a64 <memchr>
   4a1d4:	da012a17 	ldw	r8,1192(sp)
   4a1d8:	1002a026 	beq	r2,zero,4ac5c <___vfiprintf_internal_r+0x13b4>
   4a1dc:	d8c12217 	ldw	r3,1160(sp)
   4a1e0:	10e9c83a 	sub	r20,r2,r3
   4a1e4:	85023816 	blt	r16,r20,4aac8 <___vfiprintf_internal_r+0x1220>
   4a1e8:	dd811d83 	ldbu	r22,1142(sp)
   4a1ec:	dcc12315 	stw	r19,1164(sp)
   4a1f0:	0021883a 	mov	r16,zero
   4a1f4:	003efd06 	br	49dec <__alt_data_end+0xfffc9dec>
   4a1f8:	9080080c 	andi	r2,r18,32
   4a1fc:	9811883a 	mov	r8,r19
   4a200:	103f9e1e 	bne	r2,zero,4a07c <__alt_data_end+0xfffca07c>
   4a204:	9080040c 	andi	r2,r18,16
   4a208:	10021726 	beq	r2,zero,4aa68 <___vfiprintf_internal_r+0x11c0>
   4a20c:	d9412317 	ldw	r5,1164(sp)
   4a210:	002b883a 	mov	r21,zero
   4a214:	00800044 	movi	r2,1
   4a218:	2cc00017 	ldw	r19,0(r5)
   4a21c:	29400104 	addi	r5,r5,4
   4a220:	d9412315 	stw	r5,1164(sp)
   4a224:	9807883a 	mov	r3,r19
   4a228:	003f8c06 	br	4a05c <__alt_data_end+0xfffca05c>
   4a22c:	d8c12203 	ldbu	r3,1160(sp)
   4a230:	01000174 	movhi	r4,5
   4a234:	2106fb04 	addi	r4,r4,7148
   4a238:	d8c11d85 	stb	r3,1142(sp)
   4a23c:	d9012715 	stw	r4,1180(sp)
   4a240:	90c0080c 	andi	r3,r18,32
   4a244:	9811883a 	mov	r8,r19
   4a248:	d8812317 	ldw	r2,1164(sp)
   4a24c:	183fa11e 	bne	r3,zero,4a0d4 <__alt_data_end+0xfffca0d4>
   4a250:	90c0040c 	andi	r3,r18,16
   4a254:	1801e526 	beq	r3,zero,4a9ec <___vfiprintf_internal_r+0x1144>
   4a258:	d9412317 	ldw	r5,1164(sp)
   4a25c:	14c00017 	ldw	r19,0(r2)
   4a260:	002b883a 	mov	r21,zero
   4a264:	29400104 	addi	r5,r5,4
   4a268:	d9412315 	stw	r5,1164(sp)
   4a26c:	003f9e06 	br	4a0e8 <__alt_data_end+0xfffca0e8>
   4a270:	9080080c 	andi	r2,r18,32
   4a274:	9811883a 	mov	r8,r19
   4a278:	103f701e 	bne	r2,zero,4a03c <__alt_data_end+0xfffca03c>
   4a27c:	9080040c 	andi	r2,r18,16
   4a280:	1001ef26 	beq	r2,zero,4aa40 <___vfiprintf_internal_r+0x1198>
   4a284:	d9012317 	ldw	r4,1164(sp)
   4a288:	002b883a 	mov	r21,zero
   4a28c:	0005883a 	mov	r2,zero
   4a290:	24c00017 	ldw	r19,0(r4)
   4a294:	21000104 	addi	r4,r4,4
   4a298:	d9012315 	stw	r4,1164(sp)
   4a29c:	9807883a 	mov	r3,r19
   4a2a0:	003f6e06 	br	4a05c <__alt_data_end+0xfffca05c>
   4a2a4:	d8c12317 	ldw	r3,1164(sp)
   4a2a8:	9811883a 	mov	r8,r19
   4a2ac:	00800c04 	movi	r2,48
   4a2b0:	1cc00017 	ldw	r19,0(r3)
   4a2b4:	01000174 	movhi	r4,5
   4a2b8:	18c00104 	addi	r3,r3,4
   4a2bc:	d8811d05 	stb	r2,1140(sp)
   4a2c0:	2106fb04 	addi	r4,r4,7148
   4a2c4:	00801e04 	movi	r2,120
   4a2c8:	d8811d45 	stb	r2,1141(sp)
   4a2cc:	d8c12315 	stw	r3,1164(sp)
   4a2d0:	002b883a 	mov	r21,zero
   4a2d4:	94800094 	ori	r18,r18,2
   4a2d8:	d9012715 	stw	r4,1180(sp)
   4a2dc:	00800084 	movi	r2,2
   4a2e0:	9807883a 	mov	r3,r19
   4a2e4:	003f5d06 	br	4a05c <__alt_data_end+0xfffca05c>
   4a2e8:	d8c12203 	ldbu	r3,1160(sp)
   4a2ec:	9080080c 	andi	r2,r18,32
   4a2f0:	9811883a 	mov	r8,r19
   4a2f4:	d8c11d85 	stb	r3,1142(sp)
   4a2f8:	1001b126 	beq	r2,zero,4a9c0 <___vfiprintf_internal_r+0x1118>
   4a2fc:	d9012317 	ldw	r4,1164(sp)
   4a300:	d9412517 	ldw	r5,1172(sp)
   4a304:	20800017 	ldw	r2,0(r4)
   4a308:	2807d7fa 	srai	r3,r5,31
   4a30c:	21000104 	addi	r4,r4,4
   4a310:	d9012315 	stw	r4,1164(sp)
   4a314:	11400015 	stw	r5,0(r2)
   4a318:	10c00115 	stw	r3,4(r2)
   4a31c:	003d9a06 	br	49988 <__alt_data_end+0xfffc9988>
   4a320:	d8812207 	ldb	r2,1160(sp)
   4a324:	1001c41e 	bne	r2,zero,4aa38 <___vfiprintf_internal_r+0x1190>
   4a328:	00c00804 	movi	r3,32
   4a32c:	d8c12205 	stb	r3,1160(sp)
   4a330:	b9800007 	ldb	r6,0(r23)
   4a334:	003dbd06 	br	49a2c <__alt_data_end+0xfffc9a2c>
   4a338:	00c00ac4 	movi	r3,43
   4a33c:	d8c12205 	stb	r3,1160(sp)
   4a340:	b9800007 	ldb	r6,0(r23)
   4a344:	003db906 	br	49a2c <__alt_data_end+0xfffc9a2c>
   4a348:	d8c12203 	ldbu	r3,1160(sp)
   4a34c:	9080080c 	andi	r2,r18,32
   4a350:	9811883a 	mov	r8,r19
   4a354:	d8c11d85 	stb	r3,1142(sp)
   4a358:	d8c12317 	ldw	r3,1164(sp)
   4a35c:	103e7e1e 	bne	r2,zero,49d58 <__alt_data_end+0xfffc9d58>
   4a360:	9080040c 	andi	r2,r18,16
   4a364:	1001a926 	beq	r2,zero,4aa0c <___vfiprintf_internal_r+0x1164>
   4a368:	1cc00017 	ldw	r19,0(r3)
   4a36c:	d9412317 	ldw	r5,1164(sp)
   4a370:	982bd7fa 	srai	r21,r19,31
   4a374:	29400104 	addi	r5,r5,4
   4a378:	d9412315 	stw	r5,1164(sp)
   4a37c:	a805883a 	mov	r2,r21
   4a380:	003e7b06 	br	49d70 <__alt_data_end+0xfffc9d70>
   4a384:	94800054 	ori	r18,r18,1
   4a388:	b9800007 	ldb	r6,0(r23)
   4a38c:	003da706 	br	49a2c <__alt_data_end+0xfffc9a2c>
   4a390:	d8c12203 	ldbu	r3,1160(sp)
   4a394:	9811883a 	mov	r8,r19
   4a398:	d8c11d85 	stb	r3,1142(sp)
   4a39c:	30005826 	beq	r6,zero,4a500 <___vfiprintf_internal_r+0xc58>
   4a3a0:	05400044 	movi	r21,1
   4a3a4:	d8c10004 	addi	r3,sp,1024
   4a3a8:	d9810005 	stb	r6,1024(sp)
   4a3ac:	d8011d85 	stb	zero,1142(sp)
   4a3b0:	a829883a 	mov	r20,r21
   4a3b4:	d8c12215 	stw	r3,1160(sp)
   4a3b8:	003f1a06 	br	4a024 <__alt_data_end+0xfffca024>
   4a3bc:	d9012117 	ldw	r4,1156(sp)
   4a3c0:	d9412017 	ldw	r5,1152(sp)
   4a3c4:	d9811a04 	addi	r6,sp,1128
   4a3c8:	d9c12a15 	stw	r7,1192(sp)
   4a3cc:	db012b15 	stw	r12,1196(sp)
   4a3d0:	00497940 	call	49794 <__sprint_r.part.0>
   4a3d4:	d9c12a17 	ldw	r7,1192(sp)
   4a3d8:	db012b17 	ldw	r12,1196(sp)
   4a3dc:	10004e1e 	bne	r2,zero,4a518 <___vfiprintf_internal_r+0xc70>
   4a3e0:	d9011b17 	ldw	r4,1132(sp)
   4a3e4:	d8c11c17 	ldw	r3,1136(sp)
   4a3e8:	d811883a 	mov	r8,sp
   4a3ec:	21400044 	addi	r5,r4,1
   4a3f0:	003e9d06 	br	49e68 <__alt_data_end+0xfffc9e68>
   4a3f4:	d9411b17 	ldw	r5,1132(sp)
   4a3f8:	d8c11c17 	ldw	r3,1136(sp)
   4a3fc:	28800044 	addi	r2,r5,1
   4a400:	d9011d87 	ldb	r4,1142(sp)
   4a404:	203eb626 	beq	r4,zero,49ee0 <__alt_data_end+0xfffc9ee0>
   4a408:	01000044 	movi	r4,1
   4a40c:	d9411d84 	addi	r5,sp,1142
   4a410:	1907883a 	add	r3,r3,r4
   4a414:	41400015 	stw	r5,0(r8)
   4a418:	41000115 	stw	r4,4(r8)
   4a41c:	d8c11c15 	stw	r3,1136(sp)
   4a420:	d8811b15 	stw	r2,1132(sp)
   4a424:	014001c4 	movi	r5,7
   4a428:	2880ce16 	blt	r5,r2,4a764 <___vfiprintf_internal_r+0xebc>
   4a42c:	100b883a 	mov	r5,r2
   4a430:	42000204 	addi	r8,r8,8
   4a434:	10800044 	addi	r2,r2,1
   4a438:	003ea906 	br	49ee0 <__alt_data_end+0xfffc9ee0>
   4a43c:	d9012117 	ldw	r4,1156(sp)
   4a440:	d9412017 	ldw	r5,1152(sp)
   4a444:	d9811a04 	addi	r6,sp,1128
   4a448:	00497940 	call	49794 <__sprint_r.part.0>
   4a44c:	1000321e 	bne	r2,zero,4a518 <___vfiprintf_internal_r+0xc70>
   4a450:	d9411b17 	ldw	r5,1132(sp)
   4a454:	d8c11c17 	ldw	r3,1136(sp)
   4a458:	d811883a 	mov	r8,sp
   4a45c:	28800044 	addi	r2,r5,1
   4a460:	003eba06 	br	49f4c <__alt_data_end+0xfffc9f4c>
   4a464:	10803fcc 	andi	r2,r2,255
   4a468:	00c00044 	movi	r3,1
   4a46c:	10fe4d1e 	bne	r2,r3,49da4 <__alt_data_end+0xfffc9da4>
   4a470:	a800021e 	bne	r21,zero,4a47c <___vfiprintf_internal_r+0xbd4>
   4a474:	00800244 	movi	r2,9
   4a478:	14c01b2e 	bgeu	r2,r19,4a4e8 <___vfiprintf_internal_r+0xc40>
   4a47c:	dc012215 	stw	r16,1160(sp)
   4a480:	dd010a04 	addi	r20,sp,1064
   4a484:	a821883a 	mov	r16,r21
   4a488:	402b883a 	mov	r21,r8
   4a48c:	9809883a 	mov	r4,r19
   4a490:	800b883a 	mov	r5,r16
   4a494:	01800284 	movi	r6,10
   4a498:	000f883a 	mov	r7,zero
   4a49c:	004bc7c0 	call	4bc7c <__umoddi3>
   4a4a0:	10800c04 	addi	r2,r2,48
   4a4a4:	a53fffc4 	addi	r20,r20,-1
   4a4a8:	9809883a 	mov	r4,r19
   4a4ac:	800b883a 	mov	r5,r16
   4a4b0:	01800284 	movi	r6,10
   4a4b4:	000f883a 	mov	r7,zero
   4a4b8:	a0800005 	stb	r2,0(r20)
   4a4bc:	004b63c0 	call	4b63c <__udivdi3>
   4a4c0:	1027883a 	mov	r19,r2
   4a4c4:	10c4b03a 	or	r2,r2,r3
   4a4c8:	1821883a 	mov	r16,r3
   4a4cc:	103fef1e 	bne	r2,zero,4a48c <__alt_data_end+0xfffca48c>
   4a4d0:	d9011e17 	ldw	r4,1144(sp)
   4a4d4:	dc012217 	ldw	r16,1160(sp)
   4a4d8:	a811883a 	mov	r8,r21
   4a4dc:	dd012215 	stw	r20,1160(sp)
   4a4e0:	2529c83a 	sub	r20,r4,r20
   4a4e4:	003e4106 	br	49dec <__alt_data_end+0xfffc9dec>
   4a4e8:	9cc00c04 	addi	r19,r19,48
   4a4ec:	d8c109c4 	addi	r3,sp,1063
   4a4f0:	dcc109c5 	stb	r19,1063(sp)
   4a4f4:	dd012817 	ldw	r20,1184(sp)
   4a4f8:	d8c12215 	stw	r3,1160(sp)
   4a4fc:	003e3b06 	br	49dec <__alt_data_end+0xfffc9dec>
   4a500:	d8811c17 	ldw	r2,1136(sp)
   4a504:	10000426 	beq	r2,zero,4a518 <___vfiprintf_internal_r+0xc70>
   4a508:	d9012117 	ldw	r4,1156(sp)
   4a50c:	d9412017 	ldw	r5,1152(sp)
   4a510:	d9811a04 	addi	r6,sp,1128
   4a514:	00497940 	call	49794 <__sprint_r.part.0>
   4a518:	d9412017 	ldw	r5,1152(sp)
   4a51c:	2880030b 	ldhu	r2,12(r5)
   4a520:	1080100c 	andi	r2,r2,64
   4a524:	103ddc1e 	bne	r2,zero,49c98 <__alt_data_end+0xfffc9c98>
   4a528:	d8812517 	ldw	r2,1172(sp)
   4a52c:	003ddb06 	br	49c9c <__alt_data_end+0xfffc9c9c>
   4a530:	1801061e 	bne	r3,zero,4a94c <___vfiprintf_internal_r+0x10a4>
   4a534:	d8c12217 	ldw	r3,1160(sp)
   4a538:	00800044 	movi	r2,1
   4a53c:	dd000115 	stw	r20,4(sp)
   4a540:	d8c00015 	stw	r3,0(sp)
   4a544:	dd011c15 	stw	r20,1136(sp)
   4a548:	d8811b15 	stw	r2,1132(sp)
   4a54c:	a007883a 	mov	r3,r20
   4a550:	d811883a 	mov	r8,sp
   4a554:	42000204 	addi	r8,r8,8
   4a558:	9480010c 	andi	r18,r18,4
   4a55c:	90003426 	beq	r18,zero,4a630 <___vfiprintf_internal_r+0xd88>
   4a560:	d9412417 	ldw	r5,1168(sp)
   4a564:	2d65c83a 	sub	r18,r5,r21
   4a568:	0480310e 	bge	zero,r18,4a630 <___vfiprintf_internal_r+0xd88>
   4a56c:	04000404 	movi	r16,16
   4a570:	8481ad0e 	bge	r16,r18,4ac28 <___vfiprintf_internal_r+0x1380>
   4a574:	01400174 	movhi	r5,5
   4a578:	29476004 	addi	r5,r5,7552
   4a57c:	d9011b17 	ldw	r4,1132(sp)
   4a580:	d9412615 	stw	r5,1176(sp)
   4a584:	04c001c4 	movi	r19,7
   4a588:	dd012117 	ldw	r20,1156(sp)
   4a58c:	dd812017 	ldw	r22,1152(sp)
   4a590:	00000506 	br	4a5a8 <___vfiprintf_internal_r+0xd00>
   4a594:	21400084 	addi	r5,r4,2
   4a598:	42000204 	addi	r8,r8,8
   4a59c:	1009883a 	mov	r4,r2
   4a5a0:	94bffc04 	addi	r18,r18,-16
   4a5a4:	84800d0e 	bge	r16,r18,4a5dc <___vfiprintf_internal_r+0xd34>
   4a5a8:	18c00404 	addi	r3,r3,16
   4a5ac:	20800044 	addi	r2,r4,1
   4a5b0:	47000015 	stw	fp,0(r8)
   4a5b4:	44000115 	stw	r16,4(r8)
   4a5b8:	d8c11c15 	stw	r3,1136(sp)
   4a5bc:	d8811b15 	stw	r2,1132(sp)
   4a5c0:	98bff40e 	bge	r19,r2,4a594 <__alt_data_end+0xfffca594>
   4a5c4:	1800291e 	bne	r3,zero,4a66c <___vfiprintf_internal_r+0xdc4>
   4a5c8:	94bffc04 	addi	r18,r18,-16
   4a5cc:	0009883a 	mov	r4,zero
   4a5d0:	01400044 	movi	r5,1
   4a5d4:	d811883a 	mov	r8,sp
   4a5d8:	84bff316 	blt	r16,r18,4a5a8 <__alt_data_end+0xfffca5a8>
   4a5dc:	d8812617 	ldw	r2,1176(sp)
   4a5e0:	1c87883a 	add	r3,r3,r18
   4a5e4:	44800115 	stw	r18,4(r8)
   4a5e8:	40800015 	stw	r2,0(r8)
   4a5ec:	d8c11c15 	stw	r3,1136(sp)
   4a5f0:	d9411b15 	stw	r5,1132(sp)
   4a5f4:	008001c4 	movi	r2,7
   4a5f8:	11400d0e 	bge	r2,r5,4a630 <___vfiprintf_internal_r+0xd88>
   4a5fc:	1800061e 	bne	r3,zero,4a618 <___vfiprintf_internal_r+0xd70>
   4a600:	d8c12417 	ldw	r3,1168(sp)
   4a604:	a8c12e16 	blt	r21,r3,4aac0 <___vfiprintf_internal_r+0x1218>
   4a608:	d9012517 	ldw	r4,1172(sp)
   4a60c:	2549883a 	add	r4,r4,r21
   4a610:	d9012515 	stw	r4,1172(sp)
   4a614:	00001206 	br	4a660 <___vfiprintf_internal_r+0xdb8>
   4a618:	d9012117 	ldw	r4,1156(sp)
   4a61c:	d9412017 	ldw	r5,1152(sp)
   4a620:	d9811a04 	addi	r6,sp,1128
   4a624:	00497940 	call	49794 <__sprint_r.part.0>
   4a628:	103fbb1e 	bne	r2,zero,4a518 <__alt_data_end+0xfffca518>
   4a62c:	d8c11c17 	ldw	r3,1136(sp)
   4a630:	d8812417 	ldw	r2,1168(sp)
   4a634:	a880010e 	bge	r21,r2,4a63c <___vfiprintf_internal_r+0xd94>
   4a638:	102b883a 	mov	r21,r2
   4a63c:	d9012517 	ldw	r4,1172(sp)
   4a640:	2549883a 	add	r4,r4,r21
   4a644:	d9012515 	stw	r4,1172(sp)
   4a648:	18000526 	beq	r3,zero,4a660 <___vfiprintf_internal_r+0xdb8>
   4a64c:	d9012117 	ldw	r4,1156(sp)
   4a650:	d9412017 	ldw	r5,1152(sp)
   4a654:	d9811a04 	addi	r6,sp,1128
   4a658:	00497940 	call	49794 <__sprint_r.part.0>
   4a65c:	103fae1e 	bne	r2,zero,4a518 <__alt_data_end+0xfffca518>
   4a660:	d8011b15 	stw	zero,1132(sp)
   4a664:	d811883a 	mov	r8,sp
   4a668:	003cc706 	br	49988 <__alt_data_end+0xfffc9988>
   4a66c:	a009883a 	mov	r4,r20
   4a670:	b00b883a 	mov	r5,r22
   4a674:	d9811a04 	addi	r6,sp,1128
   4a678:	00497940 	call	49794 <__sprint_r.part.0>
   4a67c:	103fa61e 	bne	r2,zero,4a518 <__alt_data_end+0xfffca518>
   4a680:	d9011b17 	ldw	r4,1132(sp)
   4a684:	d8c11c17 	ldw	r3,1136(sp)
   4a688:	d811883a 	mov	r8,sp
   4a68c:	21400044 	addi	r5,r4,1
   4a690:	003fc306 	br	4a5a0 <__alt_data_end+0xfffca5a0>
   4a694:	d9012417 	ldw	r4,1168(sp)
   4a698:	256dc83a 	sub	r22,r4,r21
   4a69c:	05be1f0e 	bge	zero,r22,49f1c <__alt_data_end+0xfffc9f1c>
   4a6a0:	04c00404 	movi	r19,16
   4a6a4:	9d81720e 	bge	r19,r22,4ac70 <___vfiprintf_internal_r+0x13c8>
   4a6a8:	00800174 	movhi	r2,5
   4a6ac:	10875c04 	addi	r2,r2,7536
   4a6b0:	d8812615 	stw	r2,1176(sp)
   4a6b4:	028001c4 	movi	r10,7
   4a6b8:	00000506 	br	4a6d0 <___vfiprintf_internal_r+0xe28>
   4a6bc:	29000084 	addi	r4,r5,2
   4a6c0:	42000204 	addi	r8,r8,8
   4a6c4:	100b883a 	mov	r5,r2
   4a6c8:	b5bffc04 	addi	r22,r22,-16
   4a6cc:	9d800d0e 	bge	r19,r22,4a704 <___vfiprintf_internal_r+0xe5c>
   4a6d0:	18c00404 	addi	r3,r3,16
   4a6d4:	28800044 	addi	r2,r5,1
   4a6d8:	44400015 	stw	r17,0(r8)
   4a6dc:	44c00115 	stw	r19,4(r8)
   4a6e0:	d8c11c15 	stw	r3,1136(sp)
   4a6e4:	d8811b15 	stw	r2,1132(sp)
   4a6e8:	50bff40e 	bge	r10,r2,4a6bc <__alt_data_end+0xfffca6bc>
   4a6ec:	1800111e 	bne	r3,zero,4a734 <___vfiprintf_internal_r+0xe8c>
   4a6f0:	b5bffc04 	addi	r22,r22,-16
   4a6f4:	000b883a 	mov	r5,zero
   4a6f8:	01000044 	movi	r4,1
   4a6fc:	d811883a 	mov	r8,sp
   4a700:	9dbff316 	blt	r19,r22,4a6d0 <__alt_data_end+0xfffca6d0>
   4a704:	d9412617 	ldw	r5,1176(sp)
   4a708:	1d87883a 	add	r3,r3,r22
   4a70c:	45800115 	stw	r22,4(r8)
   4a710:	41400015 	stw	r5,0(r8)
   4a714:	d8c11c15 	stw	r3,1136(sp)
   4a718:	d9011b15 	stw	r4,1132(sp)
   4a71c:	008001c4 	movi	r2,7
   4a720:	11008516 	blt	r2,r4,4a938 <___vfiprintf_internal_r+0x1090>
   4a724:	42000204 	addi	r8,r8,8
   4a728:	20800044 	addi	r2,r4,1
   4a72c:	200b883a 	mov	r5,r4
   4a730:	003dfa06 	br	49f1c <__alt_data_end+0xfffc9f1c>
   4a734:	d9012117 	ldw	r4,1156(sp)
   4a738:	d9412017 	ldw	r5,1152(sp)
   4a73c:	d9811a04 	addi	r6,sp,1128
   4a740:	da812a15 	stw	r10,1192(sp)
   4a744:	00497940 	call	49794 <__sprint_r.part.0>
   4a748:	da812a17 	ldw	r10,1192(sp)
   4a74c:	103f721e 	bne	r2,zero,4a518 <__alt_data_end+0xfffca518>
   4a750:	d9411b17 	ldw	r5,1132(sp)
   4a754:	d8c11c17 	ldw	r3,1136(sp)
   4a758:	d811883a 	mov	r8,sp
   4a75c:	29000044 	addi	r4,r5,1
   4a760:	003fd906 	br	4a6c8 <__alt_data_end+0xfffca6c8>
   4a764:	1800681e 	bne	r3,zero,4a908 <___vfiprintf_internal_r+0x1060>
   4a768:	50004d26 	beq	r10,zero,4a8a0 <___vfiprintf_internal_r+0xff8>
   4a76c:	d8811d04 	addi	r2,sp,1140
   4a770:	00c00084 	movi	r3,2
   4a774:	d8800015 	stw	r2,0(sp)
   4a778:	d8c00115 	stw	r3,4(sp)
   4a77c:	2005883a 	mov	r2,r4
   4a780:	d811883a 	mov	r8,sp
   4a784:	003de006 	br	49f08 <__alt_data_end+0xfffc9f08>
   4a788:	1800551e 	bne	r3,zero,4a8e0 <___vfiprintf_internal_r+0x1038>
   4a78c:	000b883a 	mov	r5,zero
   4a790:	00800044 	movi	r2,1
   4a794:	d811883a 	mov	r8,sp
   4a798:	003dde06 	br	49f14 <__alt_data_end+0xfffc9f14>
   4a79c:	10803fcc 	andi	r2,r2,255
   4a7a0:	1000191e 	bne	r2,zero,4a808 <___vfiprintf_internal_r+0xf60>
   4a7a4:	9080004c 	andi	r2,r18,1
   4a7a8:	10001726 	beq	r2,zero,4a808 <___vfiprintf_internal_r+0xf60>
   4a7ac:	00800c04 	movi	r2,48
   4a7b0:	d8c109c4 	addi	r3,sp,1063
   4a7b4:	d88109c5 	stb	r2,1063(sp)
   4a7b8:	dd012817 	ldw	r20,1184(sp)
   4a7bc:	d8c12215 	stw	r3,1160(sp)
   4a7c0:	003d8a06 	br	49dec <__alt_data_end+0xfffc9dec>
   4a7c4:	d9012717 	ldw	r4,1180(sp)
   4a7c8:	dd010a04 	addi	r20,sp,1064
   4a7cc:	988003cc 	andi	r2,r19,15
   4a7d0:	a806973a 	slli	r3,r21,28
   4a7d4:	2085883a 	add	r2,r4,r2
   4a7d8:	9826d13a 	srli	r19,r19,4
   4a7dc:	10800003 	ldbu	r2,0(r2)
   4a7e0:	a82ad13a 	srli	r21,r21,4
   4a7e4:	a53fffc4 	addi	r20,r20,-1
   4a7e8:	1ce6b03a 	or	r19,r3,r19
   4a7ec:	a0800005 	stb	r2,0(r20)
   4a7f0:	9d44b03a 	or	r2,r19,r21
   4a7f4:	103ff51e 	bne	r2,zero,4a7cc <__alt_data_end+0xfffca7cc>
   4a7f8:	d9411e17 	ldw	r5,1144(sp)
   4a7fc:	dd012215 	stw	r20,1160(sp)
   4a800:	2d29c83a 	sub	r20,r5,r20
   4a804:	003d7906 	br	49dec <__alt_data_end+0xfffc9dec>
   4a808:	d8c10a04 	addi	r3,sp,1064
   4a80c:	d8c12215 	stw	r3,1160(sp)
   4a810:	003d7606 	br	49dec <__alt_data_end+0xfffc9dec>
   4a814:	18009e1e 	bne	r3,zero,4aa90 <___vfiprintf_internal_r+0x11e8>
   4a818:	d8811d87 	ldb	r2,1142(sp)
   4a81c:	10005f26 	beq	r2,zero,4a99c <___vfiprintf_internal_r+0x10f4>
   4a820:	00c00044 	movi	r3,1
   4a824:	d9011d84 	addi	r4,sp,1142
   4a828:	1805883a 	mov	r2,r3
   4a82c:	d9000015 	stw	r4,0(sp)
   4a830:	d8c00115 	stw	r3,4(sp)
   4a834:	d811883a 	mov	r8,sp
   4a838:	003efc06 	br	4a42c <__alt_data_end+0xfffca42c>
   4a83c:	d9412417 	ldw	r5,1168(sp)
   4a840:	d811883a 	mov	r8,sp
   4a844:	2d65c83a 	sub	r18,r5,r21
   4a848:	04bf4816 	blt	zero,r18,4a56c <__alt_data_end+0xfffca56c>
   4a84c:	003f6c06 	br	4a600 <__alt_data_end+0xfffca600>
   4a850:	b829883a 	mov	r20,r23
   4a854:	003c6906 	br	499fc <__alt_data_end+0xfffc99fc>
   4a858:	d9012117 	ldw	r4,1156(sp)
   4a85c:	d9412017 	ldw	r5,1152(sp)
   4a860:	d9811a04 	addi	r6,sp,1128
   4a864:	00497940 	call	49794 <__sprint_r.part.0>
   4a868:	103f2b1e 	bne	r2,zero,4a518 <__alt_data_end+0xfffca518>
   4a86c:	d8c11c17 	ldw	r3,1136(sp)
   4a870:	d811883a 	mov	r8,sp
   4a874:	003f3806 	br	4a558 <__alt_data_end+0xfffca558>
   4a878:	00800084 	movi	r2,2
   4a87c:	9d46b03a 	or	r3,r19,r21
   4a880:	003df606 	br	4a05c <__alt_data_end+0xfffca05c>
   4a884:	d9012117 	ldw	r4,1156(sp)
   4a888:	d9412017 	ldw	r5,1152(sp)
   4a88c:	d9811a04 	addi	r6,sp,1128
   4a890:	00497940 	call	49794 <__sprint_r.part.0>
   4a894:	103f201e 	bne	r2,zero,4a518 <__alt_data_end+0xfffca518>
   4a898:	d811883a 	mov	r8,sp
   4a89c:	003cc606 	br	49bb8 <__alt_data_end+0xfffc9bb8>
   4a8a0:	000b883a 	mov	r5,zero
   4a8a4:	2005883a 	mov	r2,r4
   4a8a8:	d811883a 	mov	r8,sp
   4a8ac:	003d9906 	br	49f14 <__alt_data_end+0xfffc9f14>
   4a8b0:	10803fcc 	andi	r2,r2,255
   4a8b4:	1080201c 	xori	r2,r2,128
   4a8b8:	10bfe004 	addi	r2,r2,-128
   4a8bc:	01000c04 	movi	r4,48
   4a8c0:	1100b226 	beq	r2,r4,4ab8c <___vfiprintf_internal_r+0x12e4>
   4a8c4:	d9412217 	ldw	r5,1160(sp)
   4a8c8:	d8811e17 	ldw	r2,1144(sp)
   4a8cc:	193fffc5 	stb	r4,-1(r3)
   4a8d0:	297fffc4 	addi	r5,r5,-1
   4a8d4:	d9412215 	stw	r5,1160(sp)
   4a8d8:	1169c83a 	sub	r20,r2,r5
   4a8dc:	003d4306 	br	49dec <__alt_data_end+0xfffc9dec>
   4a8e0:	d9012117 	ldw	r4,1156(sp)
   4a8e4:	d9412017 	ldw	r5,1152(sp)
   4a8e8:	d9811a04 	addi	r6,sp,1128
   4a8ec:	00497940 	call	49794 <__sprint_r.part.0>
   4a8f0:	103f091e 	bne	r2,zero,4a518 <__alt_data_end+0xfffca518>
   4a8f4:	d9411b17 	ldw	r5,1132(sp)
   4a8f8:	d8c11c17 	ldw	r3,1136(sp)
   4a8fc:	d811883a 	mov	r8,sp
   4a900:	28800044 	addi	r2,r5,1
   4a904:	003d8306 	br	49f14 <__alt_data_end+0xfffc9f14>
   4a908:	d9012117 	ldw	r4,1156(sp)
   4a90c:	d9412017 	ldw	r5,1152(sp)
   4a910:	d9811a04 	addi	r6,sp,1128
   4a914:	da812a15 	stw	r10,1192(sp)
   4a918:	00497940 	call	49794 <__sprint_r.part.0>
   4a91c:	da812a17 	ldw	r10,1192(sp)
   4a920:	103efd1e 	bne	r2,zero,4a518 <__alt_data_end+0xfffca518>
   4a924:	d9411b17 	ldw	r5,1132(sp)
   4a928:	d8c11c17 	ldw	r3,1136(sp)
   4a92c:	d811883a 	mov	r8,sp
   4a930:	28800044 	addi	r2,r5,1
   4a934:	003d6a06 	br	49ee0 <__alt_data_end+0xfffc9ee0>
   4a938:	1800a01e 	bne	r3,zero,4abbc <___vfiprintf_internal_r+0x1314>
   4a93c:	000b883a 	mov	r5,zero
   4a940:	00800044 	movi	r2,1
   4a944:	d811883a 	mov	r8,sp
   4a948:	003d7406 	br	49f1c <__alt_data_end+0xfffc9f1c>
   4a94c:	d9012117 	ldw	r4,1156(sp)
   4a950:	d9412017 	ldw	r5,1152(sp)
   4a954:	d9811a04 	addi	r6,sp,1128
   4a958:	00497940 	call	49794 <__sprint_r.part.0>
   4a95c:	103eee1e 	bne	r2,zero,4a518 <__alt_data_end+0xfffca518>
   4a960:	d8811b17 	ldw	r2,1132(sp)
   4a964:	d8c11c17 	ldw	r3,1136(sp)
   4a968:	d811883a 	mov	r8,sp
   4a96c:	10800044 	addi	r2,r2,1
   4a970:	003d8f06 	br	49fb0 <__alt_data_end+0xfffc9fb0>
   4a974:	04e7c83a 	sub	r19,zero,r19
   4a978:	9804c03a 	cmpne	r2,r19,zero
   4a97c:	056bc83a 	sub	r21,zero,r21
   4a980:	a8abc83a 	sub	r21,r21,r2
   4a984:	05800b44 	movi	r22,45
   4a988:	dd811d85 	stb	r22,1142(sp)
   4a98c:	8029883a 	mov	r20,r16
   4a990:	00800044 	movi	r2,1
   4a994:	9d46b03a 	or	r3,r19,r21
   4a998:	003cfa06 	br	49d84 <__alt_data_end+0xfffc9d84>
   4a99c:	000b883a 	mov	r5,zero
   4a9a0:	00800044 	movi	r2,1
   4a9a4:	d811883a 	mov	r8,sp
   4a9a8:	503d5a26 	beq	r10,zero,49f14 <__alt_data_end+0xfffc9f14>
   4a9ac:	00c00084 	movi	r3,2
   4a9b0:	d9011d04 	addi	r4,sp,1140
   4a9b4:	d9000015 	stw	r4,0(sp)
   4a9b8:	d8c00115 	stw	r3,4(sp)
   4a9bc:	003d5206 	br	49f08 <__alt_data_end+0xfffc9f08>
   4a9c0:	9080040c 	andi	r2,r18,16
   4a9c4:	1000421e 	bne	r2,zero,4aad0 <___vfiprintf_internal_r+0x1228>
   4a9c8:	9480100c 	andi	r18,r18,64
   4a9cc:	90009c26 	beq	r18,zero,4ac40 <___vfiprintf_internal_r+0x1398>
   4a9d0:	d9412317 	ldw	r5,1164(sp)
   4a9d4:	d8c12517 	ldw	r3,1172(sp)
   4a9d8:	28800017 	ldw	r2,0(r5)
   4a9dc:	29400104 	addi	r5,r5,4
   4a9e0:	d9412315 	stw	r5,1164(sp)
   4a9e4:	10c0000d 	sth	r3,0(r2)
   4a9e8:	003be706 	br	49988 <__alt_data_end+0xfffc9988>
   4a9ec:	90c0100c 	andi	r3,r18,64
   4a9f0:	18003e26 	beq	r3,zero,4aaec <___vfiprintf_internal_r+0x1244>
   4a9f4:	d8c12317 	ldw	r3,1164(sp)
   4a9f8:	14c0000b 	ldhu	r19,0(r2)
   4a9fc:	002b883a 	mov	r21,zero
   4aa00:	18c00104 	addi	r3,r3,4
   4aa04:	d8c12315 	stw	r3,1164(sp)
   4aa08:	003db706 	br	4a0e8 <__alt_data_end+0xfffca0e8>
   4aa0c:	9080100c 	andi	r2,r18,64
   4aa10:	10004c26 	beq	r2,zero,4ab44 <___vfiprintf_internal_r+0x129c>
   4aa14:	1cc0000f 	ldh	r19,0(r3)
   4aa18:	d8812317 	ldw	r2,1164(sp)
   4aa1c:	982bd7fa 	srai	r21,r19,31
   4aa20:	10800104 	addi	r2,r2,4
   4aa24:	d8812315 	stw	r2,1164(sp)
   4aa28:	a805883a 	mov	r2,r21
   4aa2c:	003cd006 	br	49d70 <__alt_data_end+0xfffc9d70>
   4aa30:	00800084 	movi	r2,2
   4aa34:	003d8906 	br	4a05c <__alt_data_end+0xfffca05c>
   4aa38:	b9800007 	ldb	r6,0(r23)
   4aa3c:	003bfb06 	br	49a2c <__alt_data_end+0xfffc9a2c>
   4aa40:	9080100c 	andi	r2,r18,64
   4aa44:	10003726 	beq	r2,zero,4ab24 <___vfiprintf_internal_r+0x127c>
   4aa48:	d9412317 	ldw	r5,1164(sp)
   4aa4c:	002b883a 	mov	r21,zero
   4aa50:	0005883a 	mov	r2,zero
   4aa54:	2cc0000b 	ldhu	r19,0(r5)
   4aa58:	29400104 	addi	r5,r5,4
   4aa5c:	d9412315 	stw	r5,1164(sp)
   4aa60:	9807883a 	mov	r3,r19
   4aa64:	003d7d06 	br	4a05c <__alt_data_end+0xfffca05c>
   4aa68:	9080100c 	andi	r2,r18,64
   4aa6c:	10002526 	beq	r2,zero,4ab04 <___vfiprintf_internal_r+0x125c>
   4aa70:	d8812317 	ldw	r2,1164(sp)
   4aa74:	002b883a 	mov	r21,zero
   4aa78:	14c0000b 	ldhu	r19,0(r2)
   4aa7c:	10800104 	addi	r2,r2,4
   4aa80:	d8812315 	stw	r2,1164(sp)
   4aa84:	9807883a 	mov	r3,r19
   4aa88:	00800044 	movi	r2,1
   4aa8c:	003d7306 	br	4a05c <__alt_data_end+0xfffca05c>
   4aa90:	d9012117 	ldw	r4,1156(sp)
   4aa94:	d9412017 	ldw	r5,1152(sp)
   4aa98:	d9811a04 	addi	r6,sp,1128
   4aa9c:	da812a15 	stw	r10,1192(sp)
   4aaa0:	00497940 	call	49794 <__sprint_r.part.0>
   4aaa4:	da812a17 	ldw	r10,1192(sp)
   4aaa8:	103e9b1e 	bne	r2,zero,4a518 <__alt_data_end+0xfffca518>
   4aaac:	d9411b17 	ldw	r5,1132(sp)
   4aab0:	d8c11c17 	ldw	r3,1136(sp)
   4aab4:	d811883a 	mov	r8,sp
   4aab8:	28800044 	addi	r2,r5,1
   4aabc:	003e5006 	br	4a400 <__alt_data_end+0xfffca400>
   4aac0:	182b883a 	mov	r21,r3
   4aac4:	003ed006 	br	4a608 <__alt_data_end+0xfffca608>
   4aac8:	8029883a 	mov	r20,r16
   4aacc:	003dc606 	br	4a1e8 <__alt_data_end+0xfffca1e8>
   4aad0:	d8c12317 	ldw	r3,1164(sp)
   4aad4:	d9012517 	ldw	r4,1172(sp)
   4aad8:	18800017 	ldw	r2,0(r3)
   4aadc:	18c00104 	addi	r3,r3,4
   4aae0:	d8c12315 	stw	r3,1164(sp)
   4aae4:	11000015 	stw	r4,0(r2)
   4aae8:	003ba706 	br	49988 <__alt_data_end+0xfffc9988>
   4aaec:	d9012317 	ldw	r4,1164(sp)
   4aaf0:	14c00017 	ldw	r19,0(r2)
   4aaf4:	002b883a 	mov	r21,zero
   4aaf8:	21000104 	addi	r4,r4,4
   4aafc:	d9012315 	stw	r4,1164(sp)
   4ab00:	003d7906 	br	4a0e8 <__alt_data_end+0xfffca0e8>
   4ab04:	d8c12317 	ldw	r3,1164(sp)
   4ab08:	002b883a 	mov	r21,zero
   4ab0c:	00800044 	movi	r2,1
   4ab10:	1cc00017 	ldw	r19,0(r3)
   4ab14:	18c00104 	addi	r3,r3,4
   4ab18:	d8c12315 	stw	r3,1164(sp)
   4ab1c:	9807883a 	mov	r3,r19
   4ab20:	003d4e06 	br	4a05c <__alt_data_end+0xfffca05c>
   4ab24:	d8812317 	ldw	r2,1164(sp)
   4ab28:	002b883a 	mov	r21,zero
   4ab2c:	14c00017 	ldw	r19,0(r2)
   4ab30:	10800104 	addi	r2,r2,4
   4ab34:	d8812315 	stw	r2,1164(sp)
   4ab38:	9807883a 	mov	r3,r19
   4ab3c:	0005883a 	mov	r2,zero
   4ab40:	003d4606 	br	4a05c <__alt_data_end+0xfffca05c>
   4ab44:	1cc00017 	ldw	r19,0(r3)
   4ab48:	d8c12317 	ldw	r3,1164(sp)
   4ab4c:	982bd7fa 	srai	r21,r19,31
   4ab50:	18c00104 	addi	r3,r3,4
   4ab54:	d8c12315 	stw	r3,1164(sp)
   4ab58:	a805883a 	mov	r2,r21
   4ab5c:	003c8406 	br	49d70 <__alt_data_end+0xfffc9d70>
   4ab60:	01000174 	movhi	r4,5
   4ab64:	21075c04 	addi	r4,r4,7536
   4ab68:	d9012615 	stw	r4,1176(sp)
   4ab6c:	003d0606 	br	49f88 <__alt_data_end+0xfffc9f88>
   4ab70:	b9800043 	ldbu	r6,1(r23)
   4ab74:	94800814 	ori	r18,r18,32
   4ab78:	bdc00044 	addi	r23,r23,1
   4ab7c:	31803fcc 	andi	r6,r6,255
   4ab80:	3180201c 	xori	r6,r6,128
   4ab84:	31bfe004 	addi	r6,r6,-128
   4ab88:	003ba806 	br	49a2c <__alt_data_end+0xfffc9a2c>
   4ab8c:	d8811e17 	ldw	r2,1144(sp)
   4ab90:	d8c12217 	ldw	r3,1160(sp)
   4ab94:	10e9c83a 	sub	r20,r2,r3
   4ab98:	003c9406 	br	49dec <__alt_data_end+0xfffc9dec>
   4ab9c:	da012a15 	stw	r8,1192(sp)
   4aba0:	00423b80 	call	423b8 <strlen>
   4aba4:	1029883a 	mov	r20,r2
   4aba8:	dd811d83 	ldbu	r22,1142(sp)
   4abac:	dcc12315 	stw	r19,1164(sp)
   4abb0:	0021883a 	mov	r16,zero
   4abb4:	da012a17 	ldw	r8,1192(sp)
   4abb8:	003c8c06 	br	49dec <__alt_data_end+0xfffc9dec>
   4abbc:	d9012117 	ldw	r4,1156(sp)
   4abc0:	d9412017 	ldw	r5,1152(sp)
   4abc4:	d9811a04 	addi	r6,sp,1128
   4abc8:	00497940 	call	49794 <__sprint_r.part.0>
   4abcc:	103e521e 	bne	r2,zero,4a518 <__alt_data_end+0xfffca518>
   4abd0:	d9411b17 	ldw	r5,1132(sp)
   4abd4:	d8c11c17 	ldw	r3,1136(sp)
   4abd8:	d811883a 	mov	r8,sp
   4abdc:	28800044 	addi	r2,r5,1
   4abe0:	003cce06 	br	49f1c <__alt_data_end+0xfffc9f1c>
   4abe4:	01400174 	movhi	r5,5
   4abe8:	29476004 	addi	r5,r5,7552
   4abec:	d9412615 	stw	r5,1176(sp)
   4abf0:	d9411b17 	ldw	r5,1132(sp)
   4abf4:	29400044 	addi	r5,r5,1
   4abf8:	003cad06 	br	49eb0 <__alt_data_end+0xfffc9eb0>
   4abfc:	00800184 	movi	r2,6
   4ac00:	1400012e 	bgeu	r2,r16,4ac08 <___vfiprintf_internal_r+0x1360>
   4ac04:	1021883a 	mov	r16,r2
   4ac08:	8029883a 	mov	r20,r16
   4ac0c:	802b883a 	mov	r21,r16
   4ac10:	80001c16 	blt	r16,zero,4ac84 <___vfiprintf_internal_r+0x13dc>
   4ac14:	00c00174 	movhi	r3,5
   4ac18:	18c70004 	addi	r3,r3,7168
   4ac1c:	dcc12315 	stw	r19,1164(sp)
   4ac20:	d8c12215 	stw	r3,1160(sp)
   4ac24:	003cff06 	br	4a024 <__alt_data_end+0xfffca024>
   4ac28:	d9411b17 	ldw	r5,1132(sp)
   4ac2c:	00800174 	movhi	r2,5
   4ac30:	10876004 	addi	r2,r2,7552
   4ac34:	d8812615 	stw	r2,1176(sp)
   4ac38:	29400044 	addi	r5,r5,1
   4ac3c:	003e6706 	br	4a5dc <__alt_data_end+0xfffca5dc>
   4ac40:	d9012317 	ldw	r4,1164(sp)
   4ac44:	d9412517 	ldw	r5,1172(sp)
   4ac48:	20800017 	ldw	r2,0(r4)
   4ac4c:	21000104 	addi	r4,r4,4
   4ac50:	d9012315 	stw	r4,1164(sp)
   4ac54:	11400015 	stw	r5,0(r2)
   4ac58:	003b4b06 	br	49988 <__alt_data_end+0xfffc9988>
   4ac5c:	8029883a 	mov	r20,r16
   4ac60:	dd811d83 	ldbu	r22,1142(sp)
   4ac64:	dcc12315 	stw	r19,1164(sp)
   4ac68:	0021883a 	mov	r16,zero
   4ac6c:	003c5f06 	br	49dec <__alt_data_end+0xfffc9dec>
   4ac70:	01000174 	movhi	r4,5
   4ac74:	21075c04 	addi	r4,r4,7536
   4ac78:	d9012615 	stw	r4,1176(sp)
   4ac7c:	1009883a 	mov	r4,r2
   4ac80:	003ea006 	br	4a704 <__alt_data_end+0xfffca704>
   4ac84:	002b883a 	mov	r21,zero
   4ac88:	003fe206 	br	4ac14 <__alt_data_end+0xfffcac14>
   4ac8c:	d9412317 	ldw	r5,1164(sp)
   4ac90:	b807883a 	mov	r3,r23
   4ac94:	102f883a 	mov	r23,r2
   4ac98:	2c000017 	ldw	r16,0(r5)
   4ac9c:	29000104 	addi	r4,r5,4
   4aca0:	d9012315 	stw	r4,1164(sp)
   4aca4:	80000416 	blt	r16,zero,4acb8 <___vfiprintf_internal_r+0x1410>
   4aca8:	19800047 	ldb	r6,1(r3)
   4acac:	003b5f06 	br	49a2c <__alt_data_end+0xfffc9a2c>
   4acb0:	043fffc4 	movi	r16,-1
   4acb4:	003bef06 	br	49c74 <__alt_data_end+0xfffc9c74>
   4acb8:	043fffc4 	movi	r16,-1
   4acbc:	19800047 	ldb	r6,1(r3)
   4acc0:	003b5a06 	br	49a2c <__alt_data_end+0xfffc9a2c>
   4acc4:	282b883a 	mov	r21,r5
   4acc8:	003cc706 	br	49fe8 <__alt_data_end+0xfffc9fe8>

0004accc <__vfiprintf_internal>:
   4accc:	2007883a 	mov	r3,r4
   4acd0:	01000174 	movhi	r4,5
   4acd4:	210e5d04 	addi	r4,r4,14708
   4acd8:	21000017 	ldw	r4,0(r4)
   4acdc:	2805883a 	mov	r2,r5
   4ace0:	300f883a 	mov	r7,r6
   4ace4:	180b883a 	mov	r5,r3
   4ace8:	100d883a 	mov	r6,r2
   4acec:	00498a81 	jmpi	498a8 <___vfiprintf_internal_r>

0004acf0 <_write_r>:
   4acf0:	defffd04 	addi	sp,sp,-12
   4acf4:	dc000015 	stw	r16,0(sp)
   4acf8:	04000174 	movhi	r16,5
   4acfc:	dc400115 	stw	r17,4(sp)
   4ad00:	84152e04 	addi	r16,r16,21688
   4ad04:	2023883a 	mov	r17,r4
   4ad08:	2809883a 	mov	r4,r5
   4ad0c:	300b883a 	mov	r5,r6
   4ad10:	380d883a 	mov	r6,r7
   4ad14:	dfc00215 	stw	ra,8(sp)
   4ad18:	80000015 	stw	zero,0(r16)
   4ad1c:	004f50c0 	call	4f50c <write>
   4ad20:	00ffffc4 	movi	r3,-1
   4ad24:	10c00526 	beq	r2,r3,4ad3c <_write_r+0x4c>
   4ad28:	dfc00217 	ldw	ra,8(sp)
   4ad2c:	dc400117 	ldw	r17,4(sp)
   4ad30:	dc000017 	ldw	r16,0(sp)
   4ad34:	dec00304 	addi	sp,sp,12
   4ad38:	f800283a 	ret
   4ad3c:	80c00017 	ldw	r3,0(r16)
   4ad40:	183ff926 	beq	r3,zero,4ad28 <__alt_data_end+0xfffcad28>
   4ad44:	88c00015 	stw	r3,0(r17)
   4ad48:	003ff706 	br	4ad28 <__alt_data_end+0xfffcad28>

0004ad4c <_close_r>:
   4ad4c:	defffd04 	addi	sp,sp,-12
   4ad50:	dc000015 	stw	r16,0(sp)
   4ad54:	04000174 	movhi	r16,5
   4ad58:	dc400115 	stw	r17,4(sp)
   4ad5c:	84152e04 	addi	r16,r16,21688
   4ad60:	2023883a 	mov	r17,r4
   4ad64:	2809883a 	mov	r4,r5
   4ad68:	dfc00215 	stw	ra,8(sp)
   4ad6c:	80000015 	stw	zero,0(r16)
   4ad70:	004ec380 	call	4ec38 <close>
   4ad74:	00ffffc4 	movi	r3,-1
   4ad78:	10c00526 	beq	r2,r3,4ad90 <_close_r+0x44>
   4ad7c:	dfc00217 	ldw	ra,8(sp)
   4ad80:	dc400117 	ldw	r17,4(sp)
   4ad84:	dc000017 	ldw	r16,0(sp)
   4ad88:	dec00304 	addi	sp,sp,12
   4ad8c:	f800283a 	ret
   4ad90:	80c00017 	ldw	r3,0(r16)
   4ad94:	183ff926 	beq	r3,zero,4ad7c <__alt_data_end+0xfffcad7c>
   4ad98:	88c00015 	stw	r3,0(r17)
   4ad9c:	003ff706 	br	4ad7c <__alt_data_end+0xfffcad7c>

0004ada0 <_calloc_r>:
   4ada0:	defffe04 	addi	sp,sp,-8
   4ada4:	dc000015 	stw	r16,0(sp)
   4ada8:	2021883a 	mov	r16,r4
   4adac:	2809883a 	mov	r4,r5
   4adb0:	300b883a 	mov	r5,r6
   4adb4:	dfc00115 	stw	ra,4(sp)
   4adb8:	004c3c40 	call	4c3c4 <__mulsi3>
   4adbc:	8009883a 	mov	r4,r16
   4adc0:	100b883a 	mov	r5,r2
   4adc4:	00472bc0 	call	472bc <_malloc_r>
   4adc8:	1021883a 	mov	r16,r2
   4adcc:	10002826 	beq	r2,zero,4ae70 <_calloc_r+0xd0>
   4add0:	11bfff17 	ldw	r6,-4(r2)
   4add4:	00bfff04 	movi	r2,-4
   4add8:	00c00904 	movi	r3,36
   4addc:	308c703a 	and	r6,r6,r2
   4ade0:	308d883a 	add	r6,r6,r2
   4ade4:	19801436 	bltu	r3,r6,4ae38 <_calloc_r+0x98>
   4ade8:	008004c4 	movi	r2,19
   4adec:	11800936 	bltu	r2,r6,4ae14 <_calloc_r+0x74>
   4adf0:	8005883a 	mov	r2,r16
   4adf4:	10000015 	stw	zero,0(r2)
   4adf8:	10000115 	stw	zero,4(r2)
   4adfc:	10000215 	stw	zero,8(r2)
   4ae00:	8005883a 	mov	r2,r16
   4ae04:	dfc00117 	ldw	ra,4(sp)
   4ae08:	dc000017 	ldw	r16,0(sp)
   4ae0c:	dec00204 	addi	sp,sp,8
   4ae10:	f800283a 	ret
   4ae14:	80000015 	stw	zero,0(r16)
   4ae18:	80000115 	stw	zero,4(r16)
   4ae1c:	008006c4 	movi	r2,27
   4ae20:	11800d2e 	bgeu	r2,r6,4ae58 <_calloc_r+0xb8>
   4ae24:	80000215 	stw	zero,8(r16)
   4ae28:	80000315 	stw	zero,12(r16)
   4ae2c:	30c00c26 	beq	r6,r3,4ae60 <_calloc_r+0xc0>
   4ae30:	80800404 	addi	r2,r16,16
   4ae34:	003fef06 	br	4adf4 <__alt_data_end+0xfffcadf4>
   4ae38:	8009883a 	mov	r4,r16
   4ae3c:	000b883a 	mov	r5,zero
   4ae40:	0047de00 	call	47de0 <memset>
   4ae44:	8005883a 	mov	r2,r16
   4ae48:	dfc00117 	ldw	ra,4(sp)
   4ae4c:	dc000017 	ldw	r16,0(sp)
   4ae50:	dec00204 	addi	sp,sp,8
   4ae54:	f800283a 	ret
   4ae58:	80800204 	addi	r2,r16,8
   4ae5c:	003fe506 	br	4adf4 <__alt_data_end+0xfffcadf4>
   4ae60:	80000415 	stw	zero,16(r16)
   4ae64:	80800604 	addi	r2,r16,24
   4ae68:	80000515 	stw	zero,20(r16)
   4ae6c:	003fe106 	br	4adf4 <__alt_data_end+0xfffcadf4>
   4ae70:	0005883a 	mov	r2,zero
   4ae74:	003fe306 	br	4ae04 <__alt_data_end+0xfffcae04>

0004ae78 <_fclose_r>:
   4ae78:	28003226 	beq	r5,zero,4af44 <_fclose_r+0xcc>
   4ae7c:	defffc04 	addi	sp,sp,-16
   4ae80:	dc400115 	stw	r17,4(sp)
   4ae84:	2023883a 	mov	r17,r4
   4ae88:	dc000015 	stw	r16,0(sp)
   4ae8c:	dfc00315 	stw	ra,12(sp)
   4ae90:	dc800215 	stw	r18,8(sp)
   4ae94:	2821883a 	mov	r16,r5
   4ae98:	00465bc0 	call	465bc <__sfp_lock_acquire>
   4ae9c:	88000226 	beq	r17,zero,4aea8 <_fclose_r+0x30>
   4aea0:	88800e17 	ldw	r2,56(r17)
   4aea4:	10002926 	beq	r2,zero,4af4c <_fclose_r+0xd4>
   4aea8:	8080030f 	ldh	r2,12(r16)
   4aeac:	10002226 	beq	r2,zero,4af38 <_fclose_r+0xc0>
   4aeb0:	8809883a 	mov	r4,r17
   4aeb4:	800b883a 	mov	r5,r16
   4aeb8:	0045ff00 	call	45ff0 <_fflush_r>
   4aebc:	1025883a 	mov	r18,r2
   4aec0:	80800b17 	ldw	r2,44(r16)
   4aec4:	10000426 	beq	r2,zero,4aed8 <_fclose_r+0x60>
   4aec8:	81400717 	ldw	r5,28(r16)
   4aecc:	8809883a 	mov	r4,r17
   4aed0:	103ee83a 	callr	r2
   4aed4:	10002616 	blt	r2,zero,4af70 <_fclose_r+0xf8>
   4aed8:	8080030b 	ldhu	r2,12(r16)
   4aedc:	1080200c 	andi	r2,r2,128
   4aee0:	10001f1e 	bne	r2,zero,4af60 <_fclose_r+0xe8>
   4aee4:	81400c17 	ldw	r5,48(r16)
   4aee8:	28000526 	beq	r5,zero,4af00 <_fclose_r+0x88>
   4aeec:	80801004 	addi	r2,r16,64
   4aef0:	28800226 	beq	r5,r2,4aefc <_fclose_r+0x84>
   4aef4:	8809883a 	mov	r4,r17
   4aef8:	00467200 	call	46720 <_free_r>
   4aefc:	80000c15 	stw	zero,48(r16)
   4af00:	81401117 	ldw	r5,68(r16)
   4af04:	28000326 	beq	r5,zero,4af14 <_fclose_r+0x9c>
   4af08:	8809883a 	mov	r4,r17
   4af0c:	00467200 	call	46720 <_free_r>
   4af10:	80001115 	stw	zero,68(r16)
   4af14:	8000030d 	sth	zero,12(r16)
   4af18:	00465c00 	call	465c0 <__sfp_lock_release>
   4af1c:	9005883a 	mov	r2,r18
   4af20:	dfc00317 	ldw	ra,12(sp)
   4af24:	dc800217 	ldw	r18,8(sp)
   4af28:	dc400117 	ldw	r17,4(sp)
   4af2c:	dc000017 	ldw	r16,0(sp)
   4af30:	dec00404 	addi	sp,sp,16
   4af34:	f800283a 	ret
   4af38:	00465c00 	call	465c0 <__sfp_lock_release>
   4af3c:	0005883a 	mov	r2,zero
   4af40:	003ff706 	br	4af20 <__alt_data_end+0xfffcaf20>
   4af44:	0005883a 	mov	r2,zero
   4af48:	f800283a 	ret
   4af4c:	8809883a 	mov	r4,r17
   4af50:	00465ac0 	call	465ac <__sinit>
   4af54:	8080030f 	ldh	r2,12(r16)
   4af58:	103fd51e 	bne	r2,zero,4aeb0 <__alt_data_end+0xfffcaeb0>
   4af5c:	003ff606 	br	4af38 <__alt_data_end+0xfffcaf38>
   4af60:	81400417 	ldw	r5,16(r16)
   4af64:	8809883a 	mov	r4,r17
   4af68:	00467200 	call	46720 <_free_r>
   4af6c:	003fdd06 	br	4aee4 <__alt_data_end+0xfffcaee4>
   4af70:	04bfffc4 	movi	r18,-1
   4af74:	003fd806 	br	4aed8 <__alt_data_end+0xfffcaed8>

0004af78 <fclose>:
   4af78:	00800174 	movhi	r2,5
   4af7c:	108e5d04 	addi	r2,r2,14708
   4af80:	200b883a 	mov	r5,r4
   4af84:	11000017 	ldw	r4,0(r2)
   4af88:	004ae781 	jmpi	4ae78 <_fclose_r>

0004af8c <_fputwc_r>:
   4af8c:	3080030b 	ldhu	r2,12(r6)
   4af90:	defff804 	addi	sp,sp,-32
   4af94:	dcc00415 	stw	r19,16(sp)
   4af98:	dc800315 	stw	r18,12(sp)
   4af9c:	dc000115 	stw	r16,4(sp)
   4afa0:	dfc00715 	stw	ra,28(sp)
   4afa4:	dd400615 	stw	r21,24(sp)
   4afa8:	dd000515 	stw	r20,20(sp)
   4afac:	dc400215 	stw	r17,8(sp)
   4afb0:	10c8000c 	andi	r3,r2,8192
   4afb4:	3021883a 	mov	r16,r6
   4afb8:	2027883a 	mov	r19,r4
   4afbc:	2825883a 	mov	r18,r5
   4afc0:	1800051e 	bne	r3,zero,4afd8 <_fputwc_r+0x4c>
   4afc4:	30c01917 	ldw	r3,100(r6)
   4afc8:	10880014 	ori	r2,r2,8192
   4afcc:	3080030d 	sth	r2,12(r6)
   4afd0:	18880014 	ori	r2,r3,8192
   4afd4:	30801915 	stw	r2,100(r6)
   4afd8:	00470ac0 	call	470ac <__locale_mb_cur_max>
   4afdc:	00c00044 	movi	r3,1
   4afe0:	10c03e26 	beq	r2,r3,4b0dc <_fputwc_r+0x150>
   4afe4:	9809883a 	mov	r4,r19
   4afe8:	d80b883a 	mov	r5,sp
   4afec:	900d883a 	mov	r6,r18
   4aff0:	81c01704 	addi	r7,r16,92
   4aff4:	004b43c0 	call	4b43c <_wcrtomb_r>
   4aff8:	1029883a 	mov	r20,r2
   4affc:	00bfffc4 	movi	r2,-1
   4b000:	a0802026 	beq	r20,r2,4b084 <_fputwc_r+0xf8>
   4b004:	d9400003 	ldbu	r5,0(sp)
   4b008:	a0001c26 	beq	r20,zero,4b07c <_fputwc_r+0xf0>
   4b00c:	0023883a 	mov	r17,zero
   4b010:	05400284 	movi	r21,10
   4b014:	00000906 	br	4b03c <_fputwc_r+0xb0>
   4b018:	80800017 	ldw	r2,0(r16)
   4b01c:	11400005 	stb	r5,0(r2)
   4b020:	80c00017 	ldw	r3,0(r16)
   4b024:	18c00044 	addi	r3,r3,1
   4b028:	80c00015 	stw	r3,0(r16)
   4b02c:	8c400044 	addi	r17,r17,1
   4b030:	dc45883a 	add	r2,sp,r17
   4b034:	8d00112e 	bgeu	r17,r20,4b07c <_fputwc_r+0xf0>
   4b038:	11400003 	ldbu	r5,0(r2)
   4b03c:	80c00217 	ldw	r3,8(r16)
   4b040:	18ffffc4 	addi	r3,r3,-1
   4b044:	80c00215 	stw	r3,8(r16)
   4b048:	183ff30e 	bge	r3,zero,4b018 <__alt_data_end+0xfffcb018>
   4b04c:	80800617 	ldw	r2,24(r16)
   4b050:	18801916 	blt	r3,r2,4b0b8 <_fputwc_r+0x12c>
   4b054:	80800017 	ldw	r2,0(r16)
   4b058:	11400005 	stb	r5,0(r2)
   4b05c:	80800017 	ldw	r2,0(r16)
   4b060:	10c00003 	ldbu	r3,0(r2)
   4b064:	10800044 	addi	r2,r2,1
   4b068:	1d402326 	beq	r3,r21,4b0f8 <_fputwc_r+0x16c>
   4b06c:	80800015 	stw	r2,0(r16)
   4b070:	8c400044 	addi	r17,r17,1
   4b074:	dc45883a 	add	r2,sp,r17
   4b078:	8d3fef36 	bltu	r17,r20,4b038 <__alt_data_end+0xfffcb038>
   4b07c:	9005883a 	mov	r2,r18
   4b080:	00000406 	br	4b094 <_fputwc_r+0x108>
   4b084:	80c0030b 	ldhu	r3,12(r16)
   4b088:	a005883a 	mov	r2,r20
   4b08c:	18c01014 	ori	r3,r3,64
   4b090:	80c0030d 	sth	r3,12(r16)
   4b094:	dfc00717 	ldw	ra,28(sp)
   4b098:	dd400617 	ldw	r21,24(sp)
   4b09c:	dd000517 	ldw	r20,20(sp)
   4b0a0:	dcc00417 	ldw	r19,16(sp)
   4b0a4:	dc800317 	ldw	r18,12(sp)
   4b0a8:	dc400217 	ldw	r17,8(sp)
   4b0ac:	dc000117 	ldw	r16,4(sp)
   4b0b0:	dec00804 	addi	sp,sp,32
   4b0b4:	f800283a 	ret
   4b0b8:	9809883a 	mov	r4,r19
   4b0bc:	29403fcc 	andi	r5,r5,255
   4b0c0:	800d883a 	mov	r6,r16
   4b0c4:	004b2cc0 	call	4b2cc <__swbuf_r>
   4b0c8:	10bfffe0 	cmpeqi	r2,r2,-1
   4b0cc:	10803fcc 	andi	r2,r2,255
   4b0d0:	103fd626 	beq	r2,zero,4b02c <__alt_data_end+0xfffcb02c>
   4b0d4:	00bfffc4 	movi	r2,-1
   4b0d8:	003fee06 	br	4b094 <__alt_data_end+0xfffcb094>
   4b0dc:	90ffffc4 	addi	r3,r18,-1
   4b0e0:	01003f84 	movi	r4,254
   4b0e4:	20ffbf36 	bltu	r4,r3,4afe4 <__alt_data_end+0xfffcafe4>
   4b0e8:	900b883a 	mov	r5,r18
   4b0ec:	dc800005 	stb	r18,0(sp)
   4b0f0:	1029883a 	mov	r20,r2
   4b0f4:	003fc506 	br	4b00c <__alt_data_end+0xfffcb00c>
   4b0f8:	9809883a 	mov	r4,r19
   4b0fc:	a80b883a 	mov	r5,r21
   4b100:	800d883a 	mov	r6,r16
   4b104:	004b2cc0 	call	4b2cc <__swbuf_r>
   4b108:	10bfffe0 	cmpeqi	r2,r2,-1
   4b10c:	003fef06 	br	4b0cc <__alt_data_end+0xfffcb0cc>

0004b110 <fputwc>:
   4b110:	defffc04 	addi	sp,sp,-16
   4b114:	dc000115 	stw	r16,4(sp)
   4b118:	04000174 	movhi	r16,5
   4b11c:	840e5d04 	addi	r16,r16,14708
   4b120:	dc400215 	stw	r17,8(sp)
   4b124:	2023883a 	mov	r17,r4
   4b128:	81000017 	ldw	r4,0(r16)
   4b12c:	dfc00315 	stw	ra,12(sp)
   4b130:	280d883a 	mov	r6,r5
   4b134:	20000626 	beq	r4,zero,4b150 <fputwc+0x40>
   4b138:	20800e17 	ldw	r2,56(r4)
   4b13c:	1000041e 	bne	r2,zero,4b150 <fputwc+0x40>
   4b140:	d9400015 	stw	r5,0(sp)
   4b144:	00465ac0 	call	465ac <__sinit>
   4b148:	81000017 	ldw	r4,0(r16)
   4b14c:	d9800017 	ldw	r6,0(sp)
   4b150:	880b883a 	mov	r5,r17
   4b154:	dfc00317 	ldw	ra,12(sp)
   4b158:	dc400217 	ldw	r17,8(sp)
   4b15c:	dc000117 	ldw	r16,4(sp)
   4b160:	dec00404 	addi	sp,sp,16
   4b164:	004af8c1 	jmpi	4af8c <_fputwc_r>

0004b168 <_fstat_r>:
   4b168:	defffd04 	addi	sp,sp,-12
   4b16c:	dc000015 	stw	r16,0(sp)
   4b170:	04000174 	movhi	r16,5
   4b174:	dc400115 	stw	r17,4(sp)
   4b178:	84152e04 	addi	r16,r16,21688
   4b17c:	2023883a 	mov	r17,r4
   4b180:	2809883a 	mov	r4,r5
   4b184:	300b883a 	mov	r5,r6
   4b188:	dfc00215 	stw	ra,8(sp)
   4b18c:	80000015 	stw	zero,0(r16)
   4b190:	004ed8c0 	call	4ed8c <fstat>
   4b194:	00ffffc4 	movi	r3,-1
   4b198:	10c00526 	beq	r2,r3,4b1b0 <_fstat_r+0x48>
   4b19c:	dfc00217 	ldw	ra,8(sp)
   4b1a0:	dc400117 	ldw	r17,4(sp)
   4b1a4:	dc000017 	ldw	r16,0(sp)
   4b1a8:	dec00304 	addi	sp,sp,12
   4b1ac:	f800283a 	ret
   4b1b0:	80c00017 	ldw	r3,0(r16)
   4b1b4:	183ff926 	beq	r3,zero,4b19c <__alt_data_end+0xfffcb19c>
   4b1b8:	88c00015 	stw	r3,0(r17)
   4b1bc:	003ff706 	br	4b19c <__alt_data_end+0xfffcb19c>

0004b1c0 <_isatty_r>:
   4b1c0:	defffd04 	addi	sp,sp,-12
   4b1c4:	dc000015 	stw	r16,0(sp)
   4b1c8:	04000174 	movhi	r16,5
   4b1cc:	dc400115 	stw	r17,4(sp)
   4b1d0:	84152e04 	addi	r16,r16,21688
   4b1d4:	2023883a 	mov	r17,r4
   4b1d8:	2809883a 	mov	r4,r5
   4b1dc:	dfc00215 	stw	ra,8(sp)
   4b1e0:	80000015 	stw	zero,0(r16)
   4b1e4:	004ee940 	call	4ee94 <isatty>
   4b1e8:	00ffffc4 	movi	r3,-1
   4b1ec:	10c00526 	beq	r2,r3,4b204 <_isatty_r+0x44>
   4b1f0:	dfc00217 	ldw	ra,8(sp)
   4b1f4:	dc400117 	ldw	r17,4(sp)
   4b1f8:	dc000017 	ldw	r16,0(sp)
   4b1fc:	dec00304 	addi	sp,sp,12
   4b200:	f800283a 	ret
   4b204:	80c00017 	ldw	r3,0(r16)
   4b208:	183ff926 	beq	r3,zero,4b1f0 <__alt_data_end+0xfffcb1f0>
   4b20c:	88c00015 	stw	r3,0(r17)
   4b210:	003ff706 	br	4b1f0 <__alt_data_end+0xfffcb1f0>

0004b214 <_lseek_r>:
   4b214:	defffd04 	addi	sp,sp,-12
   4b218:	dc000015 	stw	r16,0(sp)
   4b21c:	04000174 	movhi	r16,5
   4b220:	dc400115 	stw	r17,4(sp)
   4b224:	84152e04 	addi	r16,r16,21688
   4b228:	2023883a 	mov	r17,r4
   4b22c:	2809883a 	mov	r4,r5
   4b230:	300b883a 	mov	r5,r6
   4b234:	380d883a 	mov	r6,r7
   4b238:	dfc00215 	stw	ra,8(sp)
   4b23c:	80000015 	stw	zero,0(r16)
   4b240:	004f0740 	call	4f074 <lseek>
   4b244:	00ffffc4 	movi	r3,-1
   4b248:	10c00526 	beq	r2,r3,4b260 <_lseek_r+0x4c>
   4b24c:	dfc00217 	ldw	ra,8(sp)
   4b250:	dc400117 	ldw	r17,4(sp)
   4b254:	dc000017 	ldw	r16,0(sp)
   4b258:	dec00304 	addi	sp,sp,12
   4b25c:	f800283a 	ret
   4b260:	80c00017 	ldw	r3,0(r16)
   4b264:	183ff926 	beq	r3,zero,4b24c <__alt_data_end+0xfffcb24c>
   4b268:	88c00015 	stw	r3,0(r17)
   4b26c:	003ff706 	br	4b24c <__alt_data_end+0xfffcb24c>

0004b270 <_read_r>:
   4b270:	defffd04 	addi	sp,sp,-12
   4b274:	dc000015 	stw	r16,0(sp)
   4b278:	04000174 	movhi	r16,5
   4b27c:	dc400115 	stw	r17,4(sp)
   4b280:	84152e04 	addi	r16,r16,21688
   4b284:	2023883a 	mov	r17,r4
   4b288:	2809883a 	mov	r4,r5
   4b28c:	300b883a 	mov	r5,r6
   4b290:	380d883a 	mov	r6,r7
   4b294:	dfc00215 	stw	ra,8(sp)
   4b298:	80000015 	stw	zero,0(r16)
   4b29c:	004f2580 	call	4f258 <read>
   4b2a0:	00ffffc4 	movi	r3,-1
   4b2a4:	10c00526 	beq	r2,r3,4b2bc <_read_r+0x4c>
   4b2a8:	dfc00217 	ldw	ra,8(sp)
   4b2ac:	dc400117 	ldw	r17,4(sp)
   4b2b0:	dc000017 	ldw	r16,0(sp)
   4b2b4:	dec00304 	addi	sp,sp,12
   4b2b8:	f800283a 	ret
   4b2bc:	80c00017 	ldw	r3,0(r16)
   4b2c0:	183ff926 	beq	r3,zero,4b2a8 <__alt_data_end+0xfffcb2a8>
   4b2c4:	88c00015 	stw	r3,0(r17)
   4b2c8:	003ff706 	br	4b2a8 <__alt_data_end+0xfffcb2a8>

0004b2cc <__swbuf_r>:
   4b2cc:	defffc04 	addi	sp,sp,-16
   4b2d0:	dc800215 	stw	r18,8(sp)
   4b2d4:	dc400115 	stw	r17,4(sp)
   4b2d8:	dc000015 	stw	r16,0(sp)
   4b2dc:	dfc00315 	stw	ra,12(sp)
   4b2e0:	2025883a 	mov	r18,r4
   4b2e4:	2823883a 	mov	r17,r5
   4b2e8:	3021883a 	mov	r16,r6
   4b2ec:	20000226 	beq	r4,zero,4b2f8 <__swbuf_r+0x2c>
   4b2f0:	20800e17 	ldw	r2,56(r4)
   4b2f4:	10004126 	beq	r2,zero,4b3fc <__swbuf_r+0x130>
   4b2f8:	80c00617 	ldw	r3,24(r16)
   4b2fc:	8180030b 	ldhu	r6,12(r16)
   4b300:	80c00215 	stw	r3,8(r16)
   4b304:	30c0020c 	andi	r3,r6,8
   4b308:	18003526 	beq	r3,zero,4b3e0 <__swbuf_r+0x114>
   4b30c:	80c00417 	ldw	r3,16(r16)
   4b310:	18003326 	beq	r3,zero,4b3e0 <__swbuf_r+0x114>
   4b314:	3088000c 	andi	r2,r6,8192
   4b318:	8c403fcc 	andi	r17,r17,255
   4b31c:	10001726 	beq	r2,zero,4b37c <__swbuf_r+0xb0>
   4b320:	80800017 	ldw	r2,0(r16)
   4b324:	81000517 	ldw	r4,20(r16)
   4b328:	10c7c83a 	sub	r3,r2,r3
   4b32c:	19001d0e 	bge	r3,r4,4b3a4 <__swbuf_r+0xd8>
   4b330:	18c00044 	addi	r3,r3,1
   4b334:	81400217 	ldw	r5,8(r16)
   4b338:	11000044 	addi	r4,r2,1
   4b33c:	81000015 	stw	r4,0(r16)
   4b340:	297fffc4 	addi	r5,r5,-1
   4b344:	81400215 	stw	r5,8(r16)
   4b348:	14400005 	stb	r17,0(r2)
   4b34c:	80800517 	ldw	r2,20(r16)
   4b350:	10c01d26 	beq	r2,r3,4b3c8 <__swbuf_r+0xfc>
   4b354:	8080030b 	ldhu	r2,12(r16)
   4b358:	1080004c 	andi	r2,r2,1
   4b35c:	1000181e 	bne	r2,zero,4b3c0 <__swbuf_r+0xf4>
   4b360:	8805883a 	mov	r2,r17
   4b364:	dfc00317 	ldw	ra,12(sp)
   4b368:	dc800217 	ldw	r18,8(sp)
   4b36c:	dc400117 	ldw	r17,4(sp)
   4b370:	dc000017 	ldw	r16,0(sp)
   4b374:	dec00404 	addi	sp,sp,16
   4b378:	f800283a 	ret
   4b37c:	81001917 	ldw	r4,100(r16)
   4b380:	00b7ffc4 	movi	r2,-8193
   4b384:	31880014 	ori	r6,r6,8192
   4b388:	2084703a 	and	r2,r4,r2
   4b38c:	80801915 	stw	r2,100(r16)
   4b390:	80800017 	ldw	r2,0(r16)
   4b394:	81000517 	ldw	r4,20(r16)
   4b398:	8180030d 	sth	r6,12(r16)
   4b39c:	10c7c83a 	sub	r3,r2,r3
   4b3a0:	193fe316 	blt	r3,r4,4b330 <__alt_data_end+0xfffcb330>
   4b3a4:	9009883a 	mov	r4,r18
   4b3a8:	800b883a 	mov	r5,r16
   4b3ac:	0045ff00 	call	45ff0 <_fflush_r>
   4b3b0:	1000091e 	bne	r2,zero,4b3d8 <__swbuf_r+0x10c>
   4b3b4:	80800017 	ldw	r2,0(r16)
   4b3b8:	00c00044 	movi	r3,1
   4b3bc:	003fdd06 	br	4b334 <__alt_data_end+0xfffcb334>
   4b3c0:	00800284 	movi	r2,10
   4b3c4:	88bfe61e 	bne	r17,r2,4b360 <__alt_data_end+0xfffcb360>
   4b3c8:	9009883a 	mov	r4,r18
   4b3cc:	800b883a 	mov	r5,r16
   4b3d0:	0045ff00 	call	45ff0 <_fflush_r>
   4b3d4:	103fe226 	beq	r2,zero,4b360 <__alt_data_end+0xfffcb360>
   4b3d8:	00bfffc4 	movi	r2,-1
   4b3dc:	003fe106 	br	4b364 <__alt_data_end+0xfffcb364>
   4b3e0:	9009883a 	mov	r4,r18
   4b3e4:	800b883a 	mov	r5,r16
   4b3e8:	00445700 	call	44570 <__swsetup_r>
   4b3ec:	1000051e 	bne	r2,zero,4b404 <__swbuf_r+0x138>
   4b3f0:	8180030b 	ldhu	r6,12(r16)
   4b3f4:	80c00417 	ldw	r3,16(r16)
   4b3f8:	003fc606 	br	4b314 <__alt_data_end+0xfffcb314>
   4b3fc:	00465ac0 	call	465ac <__sinit>
   4b400:	003fbd06 	br	4b2f8 <__alt_data_end+0xfffcb2f8>
   4b404:	80c0030b 	ldhu	r3,12(r16)
   4b408:	00bfffc4 	movi	r2,-1
   4b40c:	18c01014 	ori	r3,r3,64
   4b410:	80c0030d 	sth	r3,12(r16)
   4b414:	00c00244 	movi	r3,9
   4b418:	90c00015 	stw	r3,0(r18)
   4b41c:	003fd106 	br	4b364 <__alt_data_end+0xfffcb364>

0004b420 <__swbuf>:
   4b420:	00c00174 	movhi	r3,5
   4b424:	18ce5d04 	addi	r3,r3,14708
   4b428:	2005883a 	mov	r2,r4
   4b42c:	19000017 	ldw	r4,0(r3)
   4b430:	280d883a 	mov	r6,r5
   4b434:	100b883a 	mov	r5,r2
   4b438:	004b2cc1 	jmpi	4b2cc <__swbuf_r>

0004b43c <_wcrtomb_r>:
   4b43c:	defff604 	addi	sp,sp,-40
   4b440:	00800174 	movhi	r2,5
   4b444:	dc800815 	stw	r18,32(sp)
   4b448:	dc400715 	stw	r17,28(sp)
   4b44c:	dc000615 	stw	r16,24(sp)
   4b450:	108e6104 	addi	r2,r2,14724
   4b454:	dfc00915 	stw	ra,36(sp)
   4b458:	2021883a 	mov	r16,r4
   4b45c:	3823883a 	mov	r17,r7
   4b460:	14800017 	ldw	r18,0(r2)
   4b464:	28001426 	beq	r5,zero,4b4b8 <_wcrtomb_r+0x7c>
   4b468:	d9400415 	stw	r5,16(sp)
   4b46c:	d9800515 	stw	r6,20(sp)
   4b470:	00470a00 	call	470a0 <__locale_charset>
   4b474:	d9400417 	ldw	r5,16(sp)
   4b478:	d9800517 	ldw	r6,20(sp)
   4b47c:	8009883a 	mov	r4,r16
   4b480:	dc400015 	stw	r17,0(sp)
   4b484:	100f883a 	mov	r7,r2
   4b488:	903ee83a 	callr	r18
   4b48c:	00ffffc4 	movi	r3,-1
   4b490:	10c0031e 	bne	r2,r3,4b4a0 <_wcrtomb_r+0x64>
   4b494:	88000015 	stw	zero,0(r17)
   4b498:	00c02284 	movi	r3,138
   4b49c:	80c00015 	stw	r3,0(r16)
   4b4a0:	dfc00917 	ldw	ra,36(sp)
   4b4a4:	dc800817 	ldw	r18,32(sp)
   4b4a8:	dc400717 	ldw	r17,28(sp)
   4b4ac:	dc000617 	ldw	r16,24(sp)
   4b4b0:	dec00a04 	addi	sp,sp,40
   4b4b4:	f800283a 	ret
   4b4b8:	00470a00 	call	470a0 <__locale_charset>
   4b4bc:	8009883a 	mov	r4,r16
   4b4c0:	dc400015 	stw	r17,0(sp)
   4b4c4:	d9400104 	addi	r5,sp,4
   4b4c8:	000d883a 	mov	r6,zero
   4b4cc:	100f883a 	mov	r7,r2
   4b4d0:	903ee83a 	callr	r18
   4b4d4:	003fed06 	br	4b48c <__alt_data_end+0xfffcb48c>

0004b4d8 <wcrtomb>:
   4b4d8:	defff504 	addi	sp,sp,-44
   4b4dc:	dc400515 	stw	r17,20(sp)
   4b4e0:	dc000415 	stw	r16,16(sp)
   4b4e4:	dfc00a15 	stw	ra,40(sp)
   4b4e8:	dd400915 	stw	r21,36(sp)
   4b4ec:	dd000815 	stw	r20,32(sp)
   4b4f0:	dcc00715 	stw	r19,28(sp)
   4b4f4:	dc800615 	stw	r18,24(sp)
   4b4f8:	2021883a 	mov	r16,r4
   4b4fc:	3023883a 	mov	r17,r6
   4b500:	20001d26 	beq	r4,zero,4b578 <wcrtomb+0xa0>
   4b504:	04800174 	movhi	r18,5
   4b508:	948e5d04 	addi	r18,r18,14708
   4b50c:	00800174 	movhi	r2,5
   4b510:	95400017 	ldw	r21,0(r18)
   4b514:	108e6104 	addi	r2,r2,14724
   4b518:	15000017 	ldw	r20,0(r2)
   4b51c:	2827883a 	mov	r19,r5
   4b520:	00470a00 	call	470a0 <__locale_charset>
   4b524:	a809883a 	mov	r4,r21
   4b528:	dc400015 	stw	r17,0(sp)
   4b52c:	800b883a 	mov	r5,r16
   4b530:	980d883a 	mov	r6,r19
   4b534:	100f883a 	mov	r7,r2
   4b538:	a03ee83a 	callr	r20
   4b53c:	00ffffc4 	movi	r3,-1
   4b540:	10c0041e 	bne	r2,r3,4b554 <wcrtomb+0x7c>
   4b544:	90c00017 	ldw	r3,0(r18)
   4b548:	01002284 	movi	r4,138
   4b54c:	88000015 	stw	zero,0(r17)
   4b550:	19000015 	stw	r4,0(r3)
   4b554:	dfc00a17 	ldw	ra,40(sp)
   4b558:	dd400917 	ldw	r21,36(sp)
   4b55c:	dd000817 	ldw	r20,32(sp)
   4b560:	dcc00717 	ldw	r19,28(sp)
   4b564:	dc800617 	ldw	r18,24(sp)
   4b568:	dc400517 	ldw	r17,20(sp)
   4b56c:	dc000417 	ldw	r16,16(sp)
   4b570:	dec00b04 	addi	sp,sp,44
   4b574:	f800283a 	ret
   4b578:	04800174 	movhi	r18,5
   4b57c:	948e5d04 	addi	r18,r18,14708
   4b580:	00800174 	movhi	r2,5
   4b584:	94c00017 	ldw	r19,0(r18)
   4b588:	108e6104 	addi	r2,r2,14724
   4b58c:	14000017 	ldw	r16,0(r2)
   4b590:	00470a00 	call	470a0 <__locale_charset>
   4b594:	9809883a 	mov	r4,r19
   4b598:	dc400015 	stw	r17,0(sp)
   4b59c:	d9400104 	addi	r5,sp,4
   4b5a0:	000d883a 	mov	r6,zero
   4b5a4:	100f883a 	mov	r7,r2
   4b5a8:	803ee83a 	callr	r16
   4b5ac:	003fe306 	br	4b53c <__alt_data_end+0xfffcb53c>

0004b5b0 <__ascii_wctomb>:
   4b5b0:	28000526 	beq	r5,zero,4b5c8 <__ascii_wctomb+0x18>
   4b5b4:	00803fc4 	movi	r2,255
   4b5b8:	11800536 	bltu	r2,r6,4b5d0 <__ascii_wctomb+0x20>
   4b5bc:	29800005 	stb	r6,0(r5)
   4b5c0:	00800044 	movi	r2,1
   4b5c4:	f800283a 	ret
   4b5c8:	0005883a 	mov	r2,zero
   4b5cc:	f800283a 	ret
   4b5d0:	00802284 	movi	r2,138
   4b5d4:	20800015 	stw	r2,0(r4)
   4b5d8:	00bfffc4 	movi	r2,-1
   4b5dc:	f800283a 	ret

0004b5e0 <_wctomb_r>:
   4b5e0:	00800174 	movhi	r2,5
   4b5e4:	defff904 	addi	sp,sp,-28
   4b5e8:	108e6104 	addi	r2,r2,14724
   4b5ec:	dfc00615 	stw	ra,24(sp)
   4b5f0:	dc400515 	stw	r17,20(sp)
   4b5f4:	dc000415 	stw	r16,16(sp)
   4b5f8:	3823883a 	mov	r17,r7
   4b5fc:	14000017 	ldw	r16,0(r2)
   4b600:	d9000115 	stw	r4,4(sp)
   4b604:	d9400215 	stw	r5,8(sp)
   4b608:	d9800315 	stw	r6,12(sp)
   4b60c:	00470a00 	call	470a0 <__locale_charset>
   4b610:	d9000117 	ldw	r4,4(sp)
   4b614:	d9400217 	ldw	r5,8(sp)
   4b618:	d9800317 	ldw	r6,12(sp)
   4b61c:	dc400015 	stw	r17,0(sp)
   4b620:	100f883a 	mov	r7,r2
   4b624:	803ee83a 	callr	r16
   4b628:	dfc00617 	ldw	ra,24(sp)
   4b62c:	dc400517 	ldw	r17,20(sp)
   4b630:	dc000417 	ldw	r16,16(sp)
   4b634:	dec00704 	addi	sp,sp,28
   4b638:	f800283a 	ret

0004b63c <__udivdi3>:
   4b63c:	defff504 	addi	sp,sp,-44
   4b640:	dcc00415 	stw	r19,16(sp)
   4b644:	dc000115 	stw	r16,4(sp)
   4b648:	dfc00a15 	stw	ra,40(sp)
   4b64c:	df000915 	stw	fp,36(sp)
   4b650:	ddc00815 	stw	r23,32(sp)
   4b654:	dd800715 	stw	r22,28(sp)
   4b658:	dd400615 	stw	r21,24(sp)
   4b65c:	dd000515 	stw	r20,20(sp)
   4b660:	dc800315 	stw	r18,12(sp)
   4b664:	dc400215 	stw	r17,8(sp)
   4b668:	2027883a 	mov	r19,r4
   4b66c:	2821883a 	mov	r16,r5
   4b670:	3800471e 	bne	r7,zero,4b790 <__udivdi3+0x154>
   4b674:	3025883a 	mov	r18,r6
   4b678:	2023883a 	mov	r17,r4
   4b67c:	2980592e 	bgeu	r5,r6,4b7e4 <__udivdi3+0x1a8>
   4b680:	00bfffd4 	movui	r2,65535
   4b684:	2829883a 	mov	r20,r5
   4b688:	1180b236 	bltu	r2,r6,4b954 <__udivdi3+0x318>
   4b68c:	00803fc4 	movi	r2,255
   4b690:	1181622e 	bgeu	r2,r6,4bc1c <__udivdi3+0x5e0>
   4b694:	00800204 	movi	r2,8
   4b698:	1007883a 	mov	r3,r2
   4b69c:	3084d83a 	srl	r2,r6,r2
   4b6a0:	01000174 	movhi	r4,5
   4b6a4:	21076404 	addi	r4,r4,7568
   4b6a8:	2085883a 	add	r2,r4,r2
   4b6ac:	11000003 	ldbu	r4,0(r2)
   4b6b0:	20c9883a 	add	r4,r4,r3
   4b6b4:	00c00804 	movi	r3,32
   4b6b8:	1907c83a 	sub	r3,r3,r4
   4b6bc:	18000526 	beq	r3,zero,4b6d4 <__udivdi3+0x98>
   4b6c0:	80e0983a 	sll	r16,r16,r3
   4b6c4:	9908d83a 	srl	r4,r19,r4
   4b6c8:	30e4983a 	sll	r18,r6,r3
   4b6cc:	98e2983a 	sll	r17,r19,r3
   4b6d0:	8128b03a 	or	r20,r16,r4
   4b6d4:	902ad43a 	srli	r21,r18,16
   4b6d8:	a009883a 	mov	r4,r20
   4b6dc:	95bfffcc 	andi	r22,r18,65535
   4b6e0:	a80b883a 	mov	r5,r21
   4b6e4:	004c3bc0 	call	4c3bc <__umodsi3>
   4b6e8:	a009883a 	mov	r4,r20
   4b6ec:	a80b883a 	mov	r5,r21
   4b6f0:	102f883a 	mov	r23,r2
   4b6f4:	004c3b40 	call	4c3b4 <__udivsi3>
   4b6f8:	1009883a 	mov	r4,r2
   4b6fc:	b00b883a 	mov	r5,r22
   4b700:	1021883a 	mov	r16,r2
   4b704:	004c3c40 	call	4c3c4 <__mulsi3>
   4b708:	b82e943a 	slli	r23,r23,16
   4b70c:	8808d43a 	srli	r4,r17,16
   4b710:	b906b03a 	or	r3,r23,r4
   4b714:	1880052e 	bgeu	r3,r2,4b72c <__udivdi3+0xf0>
   4b718:	1c87883a 	add	r3,r3,r18
   4b71c:	813fffc4 	addi	r4,r16,-1
   4b720:	1c800136 	bltu	r3,r18,4b728 <__udivdi3+0xec>
   4b724:	18815236 	bltu	r3,r2,4bc70 <__udivdi3+0x634>
   4b728:	2021883a 	mov	r16,r4
   4b72c:	18a7c83a 	sub	r19,r3,r2
   4b730:	9809883a 	mov	r4,r19
   4b734:	a80b883a 	mov	r5,r21
   4b738:	004c3bc0 	call	4c3bc <__umodsi3>
   4b73c:	1029883a 	mov	r20,r2
   4b740:	9809883a 	mov	r4,r19
   4b744:	a80b883a 	mov	r5,r21
   4b748:	a028943a 	slli	r20,r20,16
   4b74c:	004c3b40 	call	4c3b4 <__udivsi3>
   4b750:	1009883a 	mov	r4,r2
   4b754:	b00b883a 	mov	r5,r22
   4b758:	8c7fffcc 	andi	r17,r17,65535
   4b75c:	1027883a 	mov	r19,r2
   4b760:	a462b03a 	or	r17,r20,r17
   4b764:	004c3c40 	call	4c3c4 <__mulsi3>
   4b768:	8880052e 	bgeu	r17,r2,4b780 <__udivdi3+0x144>
   4b76c:	8ca3883a 	add	r17,r17,r18
   4b770:	98ffffc4 	addi	r3,r19,-1
   4b774:	8c811036 	bltu	r17,r18,4bbb8 <__udivdi3+0x57c>
   4b778:	88810f2e 	bgeu	r17,r2,4bbb8 <__udivdi3+0x57c>
   4b77c:	9cffff84 	addi	r19,r19,-2
   4b780:	8020943a 	slli	r16,r16,16
   4b784:	0007883a 	mov	r3,zero
   4b788:	9c04b03a 	or	r2,r19,r16
   4b78c:	00006006 	br	4b910 <__udivdi3+0x2d4>
   4b790:	29c05d36 	bltu	r5,r7,4b908 <__udivdi3+0x2cc>
   4b794:	00bfffd4 	movui	r2,65535
   4b798:	11c0692e 	bgeu	r2,r7,4b940 <__udivdi3+0x304>
   4b79c:	00804034 	movhi	r2,256
   4b7a0:	10bfffc4 	addi	r2,r2,-1
   4b7a4:	11c10e2e 	bgeu	r2,r7,4bbe0 <__udivdi3+0x5a4>
   4b7a8:	01400604 	movi	r5,24
   4b7ac:	2811883a 	mov	r8,r5
   4b7b0:	394ad83a 	srl	r5,r7,r5
   4b7b4:	00800174 	movhi	r2,5
   4b7b8:	10876404 	addi	r2,r2,7568
   4b7bc:	114b883a 	add	r5,r2,r5
   4b7c0:	29400003 	ldbu	r5,0(r5)
   4b7c4:	00c00804 	movi	r3,32
   4b7c8:	2a0b883a 	add	r5,r5,r8
   4b7cc:	196fc83a 	sub	r23,r3,r5
   4b7d0:	b8006b1e 	bne	r23,zero,4b980 <__udivdi3+0x344>
   4b7d4:	3c011436 	bltu	r7,r16,4bc28 <__udivdi3+0x5ec>
   4b7d8:	9985403a 	cmpgeu	r2,r19,r6
   4b7dc:	0007883a 	mov	r3,zero
   4b7e0:	00004b06 	br	4b910 <__udivdi3+0x2d4>
   4b7e4:	3000041e 	bne	r6,zero,4b7f8 <__udivdi3+0x1bc>
   4b7e8:	01000044 	movi	r4,1
   4b7ec:	000b883a 	mov	r5,zero
   4b7f0:	004c3b40 	call	4c3b4 <__udivsi3>
   4b7f4:	1025883a 	mov	r18,r2
   4b7f8:	00bfffd4 	movui	r2,65535
   4b7fc:	14805b2e 	bgeu	r2,r18,4b96c <__udivdi3+0x330>
   4b800:	00804034 	movhi	r2,256
   4b804:	10bfffc4 	addi	r2,r2,-1
   4b808:	1480fe2e 	bgeu	r2,r18,4bc04 <__udivdi3+0x5c8>
   4b80c:	00800604 	movi	r2,24
   4b810:	1007883a 	mov	r3,r2
   4b814:	9084d83a 	srl	r2,r18,r2
   4b818:	01000174 	movhi	r4,5
   4b81c:	21076404 	addi	r4,r4,7568
   4b820:	2085883a 	add	r2,r4,r2
   4b824:	11800003 	ldbu	r6,0(r2)
   4b828:	01c00804 	movi	r7,32
   4b82c:	30c7883a 	add	r3,r6,r3
   4b830:	38cfc83a 	sub	r7,r7,r3
   4b834:	3800a71e 	bne	r7,zero,4bad4 <__udivdi3+0x498>
   4b838:	9028d43a 	srli	r20,r18,16
   4b83c:	84a1c83a 	sub	r16,r16,r18
   4b840:	957fffcc 	andi	r21,r18,65535
   4b844:	00c00044 	movi	r3,1
   4b848:	8009883a 	mov	r4,r16
   4b84c:	a00b883a 	mov	r5,r20
   4b850:	d8c00015 	stw	r3,0(sp)
   4b854:	004c3bc0 	call	4c3bc <__umodsi3>
   4b858:	8009883a 	mov	r4,r16
   4b85c:	a00b883a 	mov	r5,r20
   4b860:	102d883a 	mov	r22,r2
   4b864:	004c3b40 	call	4c3b4 <__udivsi3>
   4b868:	1009883a 	mov	r4,r2
   4b86c:	a80b883a 	mov	r5,r21
   4b870:	1021883a 	mov	r16,r2
   4b874:	004c3c40 	call	4c3c4 <__mulsi3>
   4b878:	b02c943a 	slli	r22,r22,16
   4b87c:	880ed43a 	srli	r7,r17,16
   4b880:	d8c00017 	ldw	r3,0(sp)
   4b884:	b1ccb03a 	or	r6,r22,r7
   4b888:	3080052e 	bgeu	r6,r2,4b8a0 <__udivdi3+0x264>
   4b88c:	348d883a 	add	r6,r6,r18
   4b890:	813fffc4 	addi	r4,r16,-1
   4b894:	34800136 	bltu	r6,r18,4b89c <__udivdi3+0x260>
   4b898:	3080f236 	bltu	r6,r2,4bc64 <__udivdi3+0x628>
   4b89c:	2021883a 	mov	r16,r4
   4b8a0:	30a7c83a 	sub	r19,r6,r2
   4b8a4:	9809883a 	mov	r4,r19
   4b8a8:	a00b883a 	mov	r5,r20
   4b8ac:	d8c00015 	stw	r3,0(sp)
   4b8b0:	004c3bc0 	call	4c3bc <__umodsi3>
   4b8b4:	102d883a 	mov	r22,r2
   4b8b8:	9809883a 	mov	r4,r19
   4b8bc:	a00b883a 	mov	r5,r20
   4b8c0:	b02c943a 	slli	r22,r22,16
   4b8c4:	004c3b40 	call	4c3b4 <__udivsi3>
   4b8c8:	1009883a 	mov	r4,r2
   4b8cc:	a80b883a 	mov	r5,r21
   4b8d0:	8c7fffcc 	andi	r17,r17,65535
   4b8d4:	1027883a 	mov	r19,r2
   4b8d8:	b462b03a 	or	r17,r22,r17
   4b8dc:	004c3c40 	call	4c3c4 <__mulsi3>
   4b8e0:	d8c00017 	ldw	r3,0(sp)
   4b8e4:	8880052e 	bgeu	r17,r2,4b8fc <__udivdi3+0x2c0>
   4b8e8:	8ca3883a 	add	r17,r17,r18
   4b8ec:	993fffc4 	addi	r4,r19,-1
   4b8f0:	8c80af36 	bltu	r17,r18,4bbb0 <__udivdi3+0x574>
   4b8f4:	8880ae2e 	bgeu	r17,r2,4bbb0 <__udivdi3+0x574>
   4b8f8:	9cffff84 	addi	r19,r19,-2
   4b8fc:	8020943a 	slli	r16,r16,16
   4b900:	9c04b03a 	or	r2,r19,r16
   4b904:	00000206 	br	4b910 <__udivdi3+0x2d4>
   4b908:	0007883a 	mov	r3,zero
   4b90c:	0005883a 	mov	r2,zero
   4b910:	dfc00a17 	ldw	ra,40(sp)
   4b914:	df000917 	ldw	fp,36(sp)
   4b918:	ddc00817 	ldw	r23,32(sp)
   4b91c:	dd800717 	ldw	r22,28(sp)
   4b920:	dd400617 	ldw	r21,24(sp)
   4b924:	dd000517 	ldw	r20,20(sp)
   4b928:	dcc00417 	ldw	r19,16(sp)
   4b92c:	dc800317 	ldw	r18,12(sp)
   4b930:	dc400217 	ldw	r17,8(sp)
   4b934:	dc000117 	ldw	r16,4(sp)
   4b938:	dec00b04 	addi	sp,sp,44
   4b93c:	f800283a 	ret
   4b940:	00803fc4 	movi	r2,255
   4b944:	11c0a92e 	bgeu	r2,r7,4bbec <__udivdi3+0x5b0>
   4b948:	01400204 	movi	r5,8
   4b94c:	2811883a 	mov	r8,r5
   4b950:	003f9706 	br	4b7b0 <__alt_data_end+0xfffcb7b0>
   4b954:	00804034 	movhi	r2,256
   4b958:	10bfffc4 	addi	r2,r2,-1
   4b95c:	1180a62e 	bgeu	r2,r6,4bbf8 <__udivdi3+0x5bc>
   4b960:	00800604 	movi	r2,24
   4b964:	1007883a 	mov	r3,r2
   4b968:	003f4c06 	br	4b69c <__alt_data_end+0xfffcb69c>
   4b96c:	00803fc4 	movi	r2,255
   4b970:	1480a72e 	bgeu	r2,r18,4bc10 <__udivdi3+0x5d4>
   4b974:	00800204 	movi	r2,8
   4b978:	1007883a 	mov	r3,r2
   4b97c:	003fa506 	br	4b814 <__alt_data_end+0xfffcb814>
   4b980:	3178d83a 	srl	fp,r6,r5
   4b984:	3dce983a 	sll	r7,r7,r23
   4b988:	8168d83a 	srl	r20,r16,r5
   4b98c:	9950d83a 	srl	r8,r19,r5
   4b990:	3f38b03a 	or	fp,r7,fp
   4b994:	e024d43a 	srli	r18,fp,16
   4b998:	85e0983a 	sll	r16,r16,r23
   4b99c:	a009883a 	mov	r4,r20
   4b9a0:	900b883a 	mov	r5,r18
   4b9a4:	8220b03a 	or	r16,r16,r8
   4b9a8:	35ea983a 	sll	r21,r6,r23
   4b9ac:	004c3bc0 	call	4c3bc <__umodsi3>
   4b9b0:	a009883a 	mov	r4,r20
   4b9b4:	900b883a 	mov	r5,r18
   4b9b8:	1023883a 	mov	r17,r2
   4b9bc:	e5bfffcc 	andi	r22,fp,65535
   4b9c0:	004c3b40 	call	4c3b4 <__udivsi3>
   4b9c4:	1009883a 	mov	r4,r2
   4b9c8:	b00b883a 	mov	r5,r22
   4b9cc:	1029883a 	mov	r20,r2
   4b9d0:	004c3c40 	call	4c3c4 <__mulsi3>
   4b9d4:	8806943a 	slli	r3,r17,16
   4b9d8:	8014d43a 	srli	r10,r16,16
   4b9dc:	1a92b03a 	or	r9,r3,r10
   4b9e0:	4880042e 	bgeu	r9,r2,4b9f4 <__udivdi3+0x3b8>
   4b9e4:	4f13883a 	add	r9,r9,fp
   4b9e8:	a0ffffc4 	addi	r3,r20,-1
   4b9ec:	4f00952e 	bgeu	r9,fp,4bc44 <__udivdi3+0x608>
   4b9f0:	1829883a 	mov	r20,r3
   4b9f4:	48a3c83a 	sub	r17,r9,r2
   4b9f8:	8809883a 	mov	r4,r17
   4b9fc:	900b883a 	mov	r5,r18
   4ba00:	004c3bc0 	call	4c3bc <__umodsi3>
   4ba04:	8809883a 	mov	r4,r17
   4ba08:	900b883a 	mov	r5,r18
   4ba0c:	d8800015 	stw	r2,0(sp)
   4ba10:	004c3b40 	call	4c3b4 <__udivsi3>
   4ba14:	1009883a 	mov	r4,r2
   4ba18:	b00b883a 	mov	r5,r22
   4ba1c:	1023883a 	mov	r17,r2
   4ba20:	004c3c40 	call	4c3c4 <__mulsi3>
   4ba24:	d8c00017 	ldw	r3,0(sp)
   4ba28:	823fffcc 	andi	r8,r16,65535
   4ba2c:	1806943a 	slli	r3,r3,16
   4ba30:	1a20b03a 	or	r16,r3,r8
   4ba34:	8080042e 	bgeu	r16,r2,4ba48 <__udivdi3+0x40c>
   4ba38:	8721883a 	add	r16,r16,fp
   4ba3c:	88ffffc4 	addi	r3,r17,-1
   4ba40:	87007c2e 	bgeu	r16,fp,4bc34 <__udivdi3+0x5f8>
   4ba44:	1823883a 	mov	r17,r3
   4ba48:	a028943a 	slli	r20,r20,16
   4ba4c:	acbfffcc 	andi	r18,r21,65535
   4ba50:	900b883a 	mov	r5,r18
   4ba54:	8d28b03a 	or	r20,r17,r20
   4ba58:	a022d43a 	srli	r17,r20,16
   4ba5c:	a5bfffcc 	andi	r22,r20,65535
   4ba60:	b009883a 	mov	r4,r22
   4ba64:	a82ad43a 	srli	r21,r21,16
   4ba68:	80a1c83a 	sub	r16,r16,r2
   4ba6c:	004c3c40 	call	4c3c4 <__mulsi3>
   4ba70:	8809883a 	mov	r4,r17
   4ba74:	900b883a 	mov	r5,r18
   4ba78:	1039883a 	mov	fp,r2
   4ba7c:	004c3c40 	call	4c3c4 <__mulsi3>
   4ba80:	8809883a 	mov	r4,r17
   4ba84:	a80b883a 	mov	r5,r21
   4ba88:	1025883a 	mov	r18,r2
   4ba8c:	004c3c40 	call	4c3c4 <__mulsi3>
   4ba90:	b009883a 	mov	r4,r22
   4ba94:	a80b883a 	mov	r5,r21
   4ba98:	1023883a 	mov	r17,r2
   4ba9c:	004c3c40 	call	4c3c4 <__mulsi3>
   4baa0:	e006d43a 	srli	r3,fp,16
   4baa4:	9085883a 	add	r2,r18,r2
   4baa8:	10c7883a 	add	r3,r2,r3
   4baac:	1c80022e 	bgeu	r3,r18,4bab8 <__udivdi3+0x47c>
   4bab0:	00800074 	movhi	r2,1
   4bab4:	88a3883a 	add	r17,r17,r2
   4bab8:	1808d43a 	srli	r4,r3,16
   4babc:	8909883a 	add	r4,r17,r4
   4bac0:	81004436 	bltu	r16,r4,4bbd4 <__udivdi3+0x598>
   4bac4:	81003e26 	beq	r16,r4,4bbc0 <__udivdi3+0x584>
   4bac8:	a005883a 	mov	r2,r20
   4bacc:	0007883a 	mov	r3,zero
   4bad0:	003f8f06 	br	4b910 <__alt_data_end+0xfffcb910>
   4bad4:	91e4983a 	sll	r18,r18,r7
   4bad8:	80eed83a 	srl	r23,r16,r3
   4badc:	81cc983a 	sll	r6,r16,r7
   4bae0:	9028d43a 	srli	r20,r18,16
   4bae4:	98c6d83a 	srl	r3,r19,r3
   4bae8:	b809883a 	mov	r4,r23
   4baec:	a00b883a 	mov	r5,r20
   4baf0:	30ecb03a 	or	r22,r6,r3
   4baf4:	99e2983a 	sll	r17,r19,r7
   4baf8:	004c3bc0 	call	4c3bc <__umodsi3>
   4bafc:	b809883a 	mov	r4,r23
   4bb00:	a00b883a 	mov	r5,r20
   4bb04:	1021883a 	mov	r16,r2
   4bb08:	957fffcc 	andi	r21,r18,65535
   4bb0c:	004c3b40 	call	4c3b4 <__udivsi3>
   4bb10:	a80b883a 	mov	r5,r21
   4bb14:	1009883a 	mov	r4,r2
   4bb18:	102f883a 	mov	r23,r2
   4bb1c:	004c3c40 	call	4c3c4 <__mulsi3>
   4bb20:	8020943a 	slli	r16,r16,16
   4bb24:	b00ad43a 	srli	r5,r22,16
   4bb28:	814cb03a 	or	r6,r16,r5
   4bb2c:	3080062e 	bgeu	r6,r2,4bb48 <__udivdi3+0x50c>
   4bb30:	348d883a 	add	r6,r6,r18
   4bb34:	b8ffffc4 	addi	r3,r23,-1
   4bb38:	34804836 	bltu	r6,r18,4bc5c <__udivdi3+0x620>
   4bb3c:	3080472e 	bgeu	r6,r2,4bc5c <__udivdi3+0x620>
   4bb40:	bdffff84 	addi	r23,r23,-2
   4bb44:	348d883a 	add	r6,r6,r18
   4bb48:	30a7c83a 	sub	r19,r6,r2
   4bb4c:	9809883a 	mov	r4,r19
   4bb50:	a00b883a 	mov	r5,r20
   4bb54:	004c3bc0 	call	4c3bc <__umodsi3>
   4bb58:	9809883a 	mov	r4,r19
   4bb5c:	a00b883a 	mov	r5,r20
   4bb60:	1039883a 	mov	fp,r2
   4bb64:	004c3b40 	call	4c3b4 <__udivsi3>
   4bb68:	1009883a 	mov	r4,r2
   4bb6c:	a80b883a 	mov	r5,r21
   4bb70:	e038943a 	slli	fp,fp,16
   4bb74:	1027883a 	mov	r19,r2
   4bb78:	004c3c40 	call	4c3c4 <__mulsi3>
   4bb7c:	b1bfffcc 	andi	r6,r22,65535
   4bb80:	e18cb03a 	or	r6,fp,r6
   4bb84:	3080062e 	bgeu	r6,r2,4bba0 <__udivdi3+0x564>
   4bb88:	348d883a 	add	r6,r6,r18
   4bb8c:	98ffffc4 	addi	r3,r19,-1
   4bb90:	34803036 	bltu	r6,r18,4bc54 <__udivdi3+0x618>
   4bb94:	30802f2e 	bgeu	r6,r2,4bc54 <__udivdi3+0x618>
   4bb98:	9cffff84 	addi	r19,r19,-2
   4bb9c:	348d883a 	add	r6,r6,r18
   4bba0:	b82e943a 	slli	r23,r23,16
   4bba4:	30a1c83a 	sub	r16,r6,r2
   4bba8:	9dc6b03a 	or	r3,r19,r23
   4bbac:	003f2606 	br	4b848 <__alt_data_end+0xfffcb848>
   4bbb0:	2027883a 	mov	r19,r4
   4bbb4:	003f5106 	br	4b8fc <__alt_data_end+0xfffcb8fc>
   4bbb8:	1827883a 	mov	r19,r3
   4bbbc:	003ef006 	br	4b780 <__alt_data_end+0xfffcb780>
   4bbc0:	1808943a 	slli	r4,r3,16
   4bbc4:	9dc6983a 	sll	r3,r19,r23
   4bbc8:	e73fffcc 	andi	fp,fp,65535
   4bbcc:	2709883a 	add	r4,r4,fp
   4bbd0:	193fbd2e 	bgeu	r3,r4,4bac8 <__alt_data_end+0xfffcbac8>
   4bbd4:	a0bfffc4 	addi	r2,r20,-1
   4bbd8:	0007883a 	mov	r3,zero
   4bbdc:	003f4c06 	br	4b910 <__alt_data_end+0xfffcb910>
   4bbe0:	01400404 	movi	r5,16
   4bbe4:	2811883a 	mov	r8,r5
   4bbe8:	003ef106 	br	4b7b0 <__alt_data_end+0xfffcb7b0>
   4bbec:	000b883a 	mov	r5,zero
   4bbf0:	0011883a 	mov	r8,zero
   4bbf4:	003eee06 	br	4b7b0 <__alt_data_end+0xfffcb7b0>
   4bbf8:	00800404 	movi	r2,16
   4bbfc:	1007883a 	mov	r3,r2
   4bc00:	003ea606 	br	4b69c <__alt_data_end+0xfffcb69c>
   4bc04:	00800404 	movi	r2,16
   4bc08:	1007883a 	mov	r3,r2
   4bc0c:	003f0106 	br	4b814 <__alt_data_end+0xfffcb814>
   4bc10:	0005883a 	mov	r2,zero
   4bc14:	0007883a 	mov	r3,zero
   4bc18:	003efe06 	br	4b814 <__alt_data_end+0xfffcb814>
   4bc1c:	0005883a 	mov	r2,zero
   4bc20:	0007883a 	mov	r3,zero
   4bc24:	003e9d06 	br	4b69c <__alt_data_end+0xfffcb69c>
   4bc28:	0007883a 	mov	r3,zero
   4bc2c:	00800044 	movi	r2,1
   4bc30:	003f3706 	br	4b910 <__alt_data_end+0xfffcb910>
   4bc34:	80bf832e 	bgeu	r16,r2,4ba44 <__alt_data_end+0xfffcba44>
   4bc38:	8c7fff84 	addi	r17,r17,-2
   4bc3c:	8721883a 	add	r16,r16,fp
   4bc40:	003f8106 	br	4ba48 <__alt_data_end+0xfffcba48>
   4bc44:	48bf6a2e 	bgeu	r9,r2,4b9f0 <__alt_data_end+0xfffcb9f0>
   4bc48:	a53fff84 	addi	r20,r20,-2
   4bc4c:	4f13883a 	add	r9,r9,fp
   4bc50:	003f6806 	br	4b9f4 <__alt_data_end+0xfffcb9f4>
   4bc54:	1827883a 	mov	r19,r3
   4bc58:	003fd106 	br	4bba0 <__alt_data_end+0xfffcbba0>
   4bc5c:	182f883a 	mov	r23,r3
   4bc60:	003fb906 	br	4bb48 <__alt_data_end+0xfffcbb48>
   4bc64:	843fff84 	addi	r16,r16,-2
   4bc68:	348d883a 	add	r6,r6,r18
   4bc6c:	003f0c06 	br	4b8a0 <__alt_data_end+0xfffcb8a0>
   4bc70:	843fff84 	addi	r16,r16,-2
   4bc74:	1c87883a 	add	r3,r3,r18
   4bc78:	003eac06 	br	4b72c <__alt_data_end+0xfffcb72c>

0004bc7c <__umoddi3>:
   4bc7c:	defff404 	addi	sp,sp,-48
   4bc80:	dd800815 	stw	r22,32(sp)
   4bc84:	dc400315 	stw	r17,12(sp)
   4bc88:	dc000215 	stw	r16,8(sp)
   4bc8c:	dfc00b15 	stw	ra,44(sp)
   4bc90:	df000a15 	stw	fp,40(sp)
   4bc94:	ddc00915 	stw	r23,36(sp)
   4bc98:	dd400715 	stw	r21,28(sp)
   4bc9c:	dd000615 	stw	r20,24(sp)
   4bca0:	dcc00515 	stw	r19,20(sp)
   4bca4:	dc800415 	stw	r18,16(sp)
   4bca8:	2021883a 	mov	r16,r4
   4bcac:	2823883a 	mov	r17,r5
   4bcb0:	282d883a 	mov	r22,r5
   4bcb4:	38003c1e 	bne	r7,zero,4bda8 <__umoddi3+0x12c>
   4bcb8:	3027883a 	mov	r19,r6
   4bcbc:	2029883a 	mov	r20,r4
   4bcc0:	2980522e 	bgeu	r5,r6,4be0c <__umoddi3+0x190>
   4bcc4:	00bfffd4 	movui	r2,65535
   4bcc8:	1180a436 	bltu	r2,r6,4bf5c <__umoddi3+0x2e0>
   4bccc:	00803fc4 	movi	r2,255
   4bcd0:	11815e2e 	bgeu	r2,r6,4c24c <__umoddi3+0x5d0>
   4bcd4:	01400204 	movi	r5,8
   4bcd8:	2805883a 	mov	r2,r5
   4bcdc:	314ad83a 	srl	r5,r6,r5
   4bce0:	00c00174 	movhi	r3,5
   4bce4:	18c76404 	addi	r3,r3,7568
   4bce8:	194b883a 	add	r5,r3,r5
   4bcec:	29000003 	ldbu	r4,0(r5)
   4bcf0:	2089883a 	add	r4,r4,r2
   4bcf4:	00800804 	movi	r2,32
   4bcf8:	1105c83a 	sub	r2,r2,r4
   4bcfc:	10010c26 	beq	r2,zero,4c130 <__umoddi3+0x4b4>
   4bd00:	88a2983a 	sll	r17,r17,r2
   4bd04:	8108d83a 	srl	r4,r16,r4
   4bd08:	30a6983a 	sll	r19,r6,r2
   4bd0c:	80a8983a 	sll	r20,r16,r2
   4bd10:	1025883a 	mov	r18,r2
   4bd14:	892cb03a 	or	r22,r17,r4
   4bd18:	9822d43a 	srli	r17,r19,16
   4bd1c:	b009883a 	mov	r4,r22
   4bd20:	9d7fffcc 	andi	r21,r19,65535
   4bd24:	880b883a 	mov	r5,r17
   4bd28:	004c3bc0 	call	4c3bc <__umodsi3>
   4bd2c:	b009883a 	mov	r4,r22
   4bd30:	880b883a 	mov	r5,r17
   4bd34:	102f883a 	mov	r23,r2
   4bd38:	004c3b40 	call	4c3b4 <__udivsi3>
   4bd3c:	1009883a 	mov	r4,r2
   4bd40:	a80b883a 	mov	r5,r21
   4bd44:	004c3c40 	call	4c3c4 <__mulsi3>
   4bd48:	b82e943a 	slli	r23,r23,16
   4bd4c:	a008d43a 	srli	r4,r20,16
   4bd50:	b906b03a 	or	r3,r23,r4
   4bd54:	1880042e 	bgeu	r3,r2,4bd68 <__umoddi3+0xec>
   4bd58:	1cc7883a 	add	r3,r3,r19
   4bd5c:	1cc00236 	bltu	r3,r19,4bd68 <__umoddi3+0xec>
   4bd60:	1880012e 	bgeu	r3,r2,4bd68 <__umoddi3+0xec>
   4bd64:	1cc7883a 	add	r3,r3,r19
   4bd68:	18a1c83a 	sub	r16,r3,r2
   4bd6c:	8009883a 	mov	r4,r16
   4bd70:	880b883a 	mov	r5,r17
   4bd74:	004c3bc0 	call	4c3bc <__umodsi3>
   4bd78:	8009883a 	mov	r4,r16
   4bd7c:	880b883a 	mov	r5,r17
   4bd80:	102d883a 	mov	r22,r2
   4bd84:	004c3b40 	call	4c3b4 <__udivsi3>
   4bd88:	1009883a 	mov	r4,r2
   4bd8c:	a80b883a 	mov	r5,r21
   4bd90:	b02c943a 	slli	r22,r22,16
   4bd94:	004c3c40 	call	4c3c4 <__mulsi3>
   4bd98:	a13fffcc 	andi	r4,r20,65535
   4bd9c:	b106b03a 	or	r3,r22,r4
   4bda0:	1880572e 	bgeu	r3,r2,4bf00 <__umoddi3+0x284>
   4bda4:	00005206 	br	4bef0 <__umoddi3+0x274>
   4bda8:	29c05936 	bltu	r5,r7,4bf10 <__umoddi3+0x294>
   4bdac:	00bfffd4 	movui	r2,65535
   4bdb0:	11c0652e 	bgeu	r2,r7,4bf48 <__umoddi3+0x2cc>
   4bdb4:	00804034 	movhi	r2,256
   4bdb8:	10bfffc4 	addi	r2,r2,-1
   4bdbc:	11c1172e 	bgeu	r2,r7,4c21c <__umoddi3+0x5a0>
   4bdc0:	01400604 	movi	r5,24
   4bdc4:	282b883a 	mov	r21,r5
   4bdc8:	394ad83a 	srl	r5,r7,r5
   4bdcc:	00c00174 	movhi	r3,5
   4bdd0:	18c76404 	addi	r3,r3,7568
   4bdd4:	194b883a 	add	r5,r3,r5
   4bdd8:	28800003 	ldbu	r2,0(r5)
   4bddc:	00c00804 	movi	r3,32
   4bde0:	156b883a 	add	r21,r2,r21
   4bde4:	1d69c83a 	sub	r20,r3,r21
   4bde8:	a000671e 	bne	r20,zero,4bf88 <__umoddi3+0x30c>
   4bdec:	3c400136 	bltu	r7,r17,4bdf4 <__umoddi3+0x178>
   4bdf0:	81812336 	bltu	r16,r6,4c280 <__umoddi3+0x604>
   4bdf4:	8185c83a 	sub	r2,r16,r6
   4bdf8:	89e3c83a 	sub	r17,r17,r7
   4bdfc:	8087803a 	cmpltu	r3,r16,r2
   4be00:	88edc83a 	sub	r22,r17,r3
   4be04:	b007883a 	mov	r3,r22
   4be08:	00004306 	br	4bf18 <__umoddi3+0x29c>
   4be0c:	3000041e 	bne	r6,zero,4be20 <__umoddi3+0x1a4>
   4be10:	01000044 	movi	r4,1
   4be14:	000b883a 	mov	r5,zero
   4be18:	004c3b40 	call	4c3b4 <__udivsi3>
   4be1c:	1027883a 	mov	r19,r2
   4be20:	00bfffd4 	movui	r2,65535
   4be24:	14c0532e 	bgeu	r2,r19,4bf74 <__umoddi3+0x2f8>
   4be28:	00804034 	movhi	r2,256
   4be2c:	10bfffc4 	addi	r2,r2,-1
   4be30:	14c1032e 	bgeu	r2,r19,4c240 <__umoddi3+0x5c4>
   4be34:	00800604 	movi	r2,24
   4be38:	1007883a 	mov	r3,r2
   4be3c:	9884d83a 	srl	r2,r19,r2
   4be40:	01000174 	movhi	r4,5
   4be44:	21076404 	addi	r4,r4,7568
   4be48:	2085883a 	add	r2,r4,r2
   4be4c:	11000003 	ldbu	r4,0(r2)
   4be50:	00800804 	movi	r2,32
   4be54:	20c7883a 	add	r3,r4,r3
   4be58:	10c5c83a 	sub	r2,r2,r3
   4be5c:	1000b61e 	bne	r2,zero,4c138 <__umoddi3+0x4bc>
   4be60:	982ad43a 	srli	r21,r19,16
   4be64:	8ce3c83a 	sub	r17,r17,r19
   4be68:	9dbfffcc 	andi	r22,r19,65535
   4be6c:	0025883a 	mov	r18,zero
   4be70:	8809883a 	mov	r4,r17
   4be74:	a80b883a 	mov	r5,r21
   4be78:	004c3bc0 	call	4c3bc <__umodsi3>
   4be7c:	8809883a 	mov	r4,r17
   4be80:	a80b883a 	mov	r5,r21
   4be84:	102f883a 	mov	r23,r2
   4be88:	004c3b40 	call	4c3b4 <__udivsi3>
   4be8c:	1009883a 	mov	r4,r2
   4be90:	b00b883a 	mov	r5,r22
   4be94:	004c3c40 	call	4c3c4 <__mulsi3>
   4be98:	b82e943a 	slli	r23,r23,16
   4be9c:	a008d43a 	srli	r4,r20,16
   4bea0:	b906b03a 	or	r3,r23,r4
   4bea4:	1880032e 	bgeu	r3,r2,4beb4 <__umoddi3+0x238>
   4bea8:	1cc7883a 	add	r3,r3,r19
   4beac:	1cc00136 	bltu	r3,r19,4beb4 <__umoddi3+0x238>
   4beb0:	1880f136 	bltu	r3,r2,4c278 <__umoddi3+0x5fc>
   4beb4:	18a1c83a 	sub	r16,r3,r2
   4beb8:	8009883a 	mov	r4,r16
   4bebc:	a80b883a 	mov	r5,r21
   4bec0:	004c3bc0 	call	4c3bc <__umodsi3>
   4bec4:	8009883a 	mov	r4,r16
   4bec8:	a80b883a 	mov	r5,r21
   4becc:	1023883a 	mov	r17,r2
   4bed0:	004c3b40 	call	4c3b4 <__udivsi3>
   4bed4:	1009883a 	mov	r4,r2
   4bed8:	b00b883a 	mov	r5,r22
   4bedc:	8822943a 	slli	r17,r17,16
   4bee0:	004c3c40 	call	4c3c4 <__mulsi3>
   4bee4:	a13fffcc 	andi	r4,r20,65535
   4bee8:	8906b03a 	or	r3,r17,r4
   4beec:	1880042e 	bgeu	r3,r2,4bf00 <__umoddi3+0x284>
   4bef0:	1cc7883a 	add	r3,r3,r19
   4bef4:	1cc00236 	bltu	r3,r19,4bf00 <__umoddi3+0x284>
   4bef8:	1880012e 	bgeu	r3,r2,4bf00 <__umoddi3+0x284>
   4befc:	1cc7883a 	add	r3,r3,r19
   4bf00:	1887c83a 	sub	r3,r3,r2
   4bf04:	1c84d83a 	srl	r2,r3,r18
   4bf08:	0007883a 	mov	r3,zero
   4bf0c:	00000206 	br	4bf18 <__umoddi3+0x29c>
   4bf10:	2005883a 	mov	r2,r4
   4bf14:	2807883a 	mov	r3,r5
   4bf18:	dfc00b17 	ldw	ra,44(sp)
   4bf1c:	df000a17 	ldw	fp,40(sp)
   4bf20:	ddc00917 	ldw	r23,36(sp)
   4bf24:	dd800817 	ldw	r22,32(sp)
   4bf28:	dd400717 	ldw	r21,28(sp)
   4bf2c:	dd000617 	ldw	r20,24(sp)
   4bf30:	dcc00517 	ldw	r19,20(sp)
   4bf34:	dc800417 	ldw	r18,16(sp)
   4bf38:	dc400317 	ldw	r17,12(sp)
   4bf3c:	dc000217 	ldw	r16,8(sp)
   4bf40:	dec00c04 	addi	sp,sp,48
   4bf44:	f800283a 	ret
   4bf48:	00803fc4 	movi	r2,255
   4bf4c:	11c0b02e 	bgeu	r2,r7,4c210 <__umoddi3+0x594>
   4bf50:	01400204 	movi	r5,8
   4bf54:	282b883a 	mov	r21,r5
   4bf58:	003f9b06 	br	4bdc8 <__alt_data_end+0xfffcbdc8>
   4bf5c:	00804034 	movhi	r2,256
   4bf60:	10bfffc4 	addi	r2,r2,-1
   4bf64:	1180b02e 	bgeu	r2,r6,4c228 <__umoddi3+0x5ac>
   4bf68:	01400604 	movi	r5,24
   4bf6c:	2805883a 	mov	r2,r5
   4bf70:	003f5a06 	br	4bcdc <__alt_data_end+0xfffcbcdc>
   4bf74:	00803fc4 	movi	r2,255
   4bf78:	14c0ae2e 	bgeu	r2,r19,4c234 <__umoddi3+0x5b8>
   4bf7c:	00800204 	movi	r2,8
   4bf80:	1007883a 	mov	r3,r2
   4bf84:	003fad06 	br	4be3c <__alt_data_end+0xfffcbe3c>
   4bf88:	3d0a983a 	sll	r5,r7,r20
   4bf8c:	356cd83a 	srl	r22,r6,r21
   4bf90:	8d78d83a 	srl	fp,r17,r21
   4bf94:	8d10983a 	sll	r8,r17,r20
   4bf98:	2dacb03a 	or	r22,r5,r22
   4bf9c:	b02ed43a 	srli	r23,r22,16
   4bfa0:	8564d83a 	srl	r18,r16,r21
   4bfa4:	e009883a 	mov	r4,fp
   4bfa8:	b80b883a 	mov	r5,r23
   4bfac:	44a4b03a 	or	r18,r8,r18
   4bfb0:	3526983a 	sll	r19,r6,r20
   4bfb4:	004c3bc0 	call	4c3bc <__umodsi3>
   4bfb8:	e009883a 	mov	r4,fp
   4bfbc:	b80b883a 	mov	r5,r23
   4bfc0:	b47fffcc 	andi	r17,r22,65535
   4bfc4:	d8800015 	stw	r2,0(sp)
   4bfc8:	004c3b40 	call	4c3b4 <__udivsi3>
   4bfcc:	1009883a 	mov	r4,r2
   4bfd0:	880b883a 	mov	r5,r17
   4bfd4:	1039883a 	mov	fp,r2
   4bfd8:	004c3c40 	call	4c3c4 <__mulsi3>
   4bfdc:	d9800017 	ldw	r6,0(sp)
   4bfe0:	9008d43a 	srli	r4,r18,16
   4bfe4:	8520983a 	sll	r16,r16,r20
   4bfe8:	300c943a 	slli	r6,r6,16
   4bfec:	3106b03a 	or	r3,r6,r4
   4bff0:	1880042e 	bgeu	r3,r2,4c004 <__umoddi3+0x388>
   4bff4:	1d87883a 	add	r3,r3,r22
   4bff8:	e13fffc4 	addi	r4,fp,-1
   4bffc:	1d809a2e 	bgeu	r3,r22,4c268 <__umoddi3+0x5ec>
   4c000:	2039883a 	mov	fp,r4
   4c004:	1887c83a 	sub	r3,r3,r2
   4c008:	1809883a 	mov	r4,r3
   4c00c:	b80b883a 	mov	r5,r23
   4c010:	d8c00115 	stw	r3,4(sp)
   4c014:	004c3bc0 	call	4c3bc <__umodsi3>
   4c018:	d8c00117 	ldw	r3,4(sp)
   4c01c:	b80b883a 	mov	r5,r23
   4c020:	d8800015 	stw	r2,0(sp)
   4c024:	1809883a 	mov	r4,r3
   4c028:	004c3b40 	call	4c3b4 <__udivsi3>
   4c02c:	880b883a 	mov	r5,r17
   4c030:	1009883a 	mov	r4,r2
   4c034:	102f883a 	mov	r23,r2
   4c038:	004c3c40 	call	4c3c4 <__mulsi3>
   4c03c:	d9800017 	ldw	r6,0(sp)
   4c040:	947fffcc 	andi	r17,r18,65535
   4c044:	300c943a 	slli	r6,r6,16
   4c048:	3464b03a 	or	r18,r6,r17
   4c04c:	9080042e 	bgeu	r18,r2,4c060 <__umoddi3+0x3e4>
   4c050:	95a5883a 	add	r18,r18,r22
   4c054:	b8ffffc4 	addi	r3,r23,-1
   4c058:	95807f2e 	bgeu	r18,r22,4c258 <__umoddi3+0x5dc>
   4c05c:	182f883a 	mov	r23,r3
   4c060:	e038943a 	slli	fp,fp,16
   4c064:	980cd43a 	srli	r6,r19,16
   4c068:	98ffffcc 	andi	r3,r19,65535
   4c06c:	bf38b03a 	or	fp,r23,fp
   4c070:	e02ed43a 	srli	r23,fp,16
   4c074:	e73fffcc 	andi	fp,fp,65535
   4c078:	180b883a 	mov	r5,r3
   4c07c:	e009883a 	mov	r4,fp
   4c080:	d9800015 	stw	r6,0(sp)
   4c084:	d8c00115 	stw	r3,4(sp)
   4c088:	90a5c83a 	sub	r18,r18,r2
   4c08c:	004c3c40 	call	4c3c4 <__mulsi3>
   4c090:	d8c00117 	ldw	r3,4(sp)
   4c094:	b809883a 	mov	r4,r23
   4c098:	1023883a 	mov	r17,r2
   4c09c:	180b883a 	mov	r5,r3
   4c0a0:	004c3c40 	call	4c3c4 <__mulsi3>
   4c0a4:	d9800017 	ldw	r6,0(sp)
   4c0a8:	b809883a 	mov	r4,r23
   4c0ac:	d8800115 	stw	r2,4(sp)
   4c0b0:	300b883a 	mov	r5,r6
   4c0b4:	302f883a 	mov	r23,r6
   4c0b8:	004c3c40 	call	4c3c4 <__mulsi3>
   4c0bc:	e009883a 	mov	r4,fp
   4c0c0:	b80b883a 	mov	r5,r23
   4c0c4:	d8800015 	stw	r2,0(sp)
   4c0c8:	004c3c40 	call	4c3c4 <__mulsi3>
   4c0cc:	d8c00117 	ldw	r3,4(sp)
   4c0d0:	880cd43a 	srli	r6,r17,16
   4c0d4:	d9c00017 	ldw	r7,0(sp)
   4c0d8:	1885883a 	add	r2,r3,r2
   4c0dc:	118d883a 	add	r6,r2,r6
   4c0e0:	30c0022e 	bgeu	r6,r3,4c0ec <__umoddi3+0x470>
   4c0e4:	00800074 	movhi	r2,1
   4c0e8:	388f883a 	add	r7,r7,r2
   4c0ec:	3006d43a 	srli	r3,r6,16
   4c0f0:	300c943a 	slli	r6,r6,16
   4c0f4:	8c7fffcc 	andi	r17,r17,65535
   4c0f8:	38c7883a 	add	r3,r7,r3
   4c0fc:	3463883a 	add	r17,r6,r17
   4c100:	90c03d36 	bltu	r18,r3,4c1f8 <__umoddi3+0x57c>
   4c104:	90c06026 	beq	r18,r3,4c288 <__umoddi3+0x60c>
   4c108:	90c9c83a 	sub	r4,r18,r3
   4c10c:	880f883a 	mov	r7,r17
   4c110:	81cfc83a 	sub	r7,r16,r7
   4c114:	81c7803a 	cmpltu	r3,r16,r7
   4c118:	20c7c83a 	sub	r3,r4,r3
   4c11c:	1d44983a 	sll	r2,r3,r21
   4c120:	3d0ed83a 	srl	r7,r7,r20
   4c124:	1d06d83a 	srl	r3,r3,r20
   4c128:	11c4b03a 	or	r2,r2,r7
   4c12c:	003f7a06 	br	4bf18 <__alt_data_end+0xfffcbf18>
   4c130:	0025883a 	mov	r18,zero
   4c134:	003ef806 	br	4bd18 <__alt_data_end+0xfffcbd18>
   4c138:	98a6983a 	sll	r19,r19,r2
   4c13c:	88e8d83a 	srl	r20,r17,r3
   4c140:	80c6d83a 	srl	r3,r16,r3
   4c144:	982ad43a 	srli	r21,r19,16
   4c148:	88a2983a 	sll	r17,r17,r2
   4c14c:	a009883a 	mov	r4,r20
   4c150:	a80b883a 	mov	r5,r21
   4c154:	88eeb03a 	or	r23,r17,r3
   4c158:	1025883a 	mov	r18,r2
   4c15c:	004c3bc0 	call	4c3bc <__umodsi3>
   4c160:	a009883a 	mov	r4,r20
   4c164:	a80b883a 	mov	r5,r21
   4c168:	1023883a 	mov	r17,r2
   4c16c:	9dbfffcc 	andi	r22,r19,65535
   4c170:	004c3b40 	call	4c3b4 <__udivsi3>
   4c174:	1009883a 	mov	r4,r2
   4c178:	b00b883a 	mov	r5,r22
   4c17c:	004c3c40 	call	4c3c4 <__mulsi3>
   4c180:	8822943a 	slli	r17,r17,16
   4c184:	b808d43a 	srli	r4,r23,16
   4c188:	84a8983a 	sll	r20,r16,r18
   4c18c:	8906b03a 	or	r3,r17,r4
   4c190:	1880042e 	bgeu	r3,r2,4c1a4 <__umoddi3+0x528>
   4c194:	1cc7883a 	add	r3,r3,r19
   4c198:	1cc00236 	bltu	r3,r19,4c1a4 <__umoddi3+0x528>
   4c19c:	1880012e 	bgeu	r3,r2,4c1a4 <__umoddi3+0x528>
   4c1a0:	1cc7883a 	add	r3,r3,r19
   4c1a4:	18a1c83a 	sub	r16,r3,r2
   4c1a8:	8009883a 	mov	r4,r16
   4c1ac:	a80b883a 	mov	r5,r21
   4c1b0:	004c3bc0 	call	4c3bc <__umodsi3>
   4c1b4:	8009883a 	mov	r4,r16
   4c1b8:	a80b883a 	mov	r5,r21
   4c1bc:	1039883a 	mov	fp,r2
   4c1c0:	004c3b40 	call	4c3b4 <__udivsi3>
   4c1c4:	1009883a 	mov	r4,r2
   4c1c8:	b00b883a 	mov	r5,r22
   4c1cc:	004c3c40 	call	4c3c4 <__mulsi3>
   4c1d0:	e006943a 	slli	r3,fp,16
   4c1d4:	b93fffcc 	andi	r4,r23,65535
   4c1d8:	1906b03a 	or	r3,r3,r4
   4c1dc:	1880042e 	bgeu	r3,r2,4c1f0 <__umoddi3+0x574>
   4c1e0:	1cc7883a 	add	r3,r3,r19
   4c1e4:	1cc00236 	bltu	r3,r19,4c1f0 <__umoddi3+0x574>
   4c1e8:	1880012e 	bgeu	r3,r2,4c1f0 <__umoddi3+0x574>
   4c1ec:	1cc7883a 	add	r3,r3,r19
   4c1f0:	18a3c83a 	sub	r17,r3,r2
   4c1f4:	003f1e06 	br	4be70 <__alt_data_end+0xfffcbe70>
   4c1f8:	8ccfc83a 	sub	r7,r17,r19
   4c1fc:	1d89c83a 	sub	r4,r3,r22
   4c200:	89e3803a 	cmpltu	r17,r17,r7
   4c204:	2463c83a 	sub	r17,r4,r17
   4c208:	9449c83a 	sub	r4,r18,r17
   4c20c:	003fc006 	br	4c110 <__alt_data_end+0xfffcc110>
   4c210:	000b883a 	mov	r5,zero
   4c214:	002b883a 	mov	r21,zero
   4c218:	003eeb06 	br	4bdc8 <__alt_data_end+0xfffcbdc8>
   4c21c:	01400404 	movi	r5,16
   4c220:	282b883a 	mov	r21,r5
   4c224:	003ee806 	br	4bdc8 <__alt_data_end+0xfffcbdc8>
   4c228:	01400404 	movi	r5,16
   4c22c:	2805883a 	mov	r2,r5
   4c230:	003eaa06 	br	4bcdc <__alt_data_end+0xfffcbcdc>
   4c234:	0005883a 	mov	r2,zero
   4c238:	0007883a 	mov	r3,zero
   4c23c:	003eff06 	br	4be3c <__alt_data_end+0xfffcbe3c>
   4c240:	00800404 	movi	r2,16
   4c244:	1007883a 	mov	r3,r2
   4c248:	003efc06 	br	4be3c <__alt_data_end+0xfffcbe3c>
   4c24c:	000b883a 	mov	r5,zero
   4c250:	0005883a 	mov	r2,zero
   4c254:	003ea106 	br	4bcdc <__alt_data_end+0xfffcbcdc>
   4c258:	90bf802e 	bgeu	r18,r2,4c05c <__alt_data_end+0xfffcc05c>
   4c25c:	bdffff84 	addi	r23,r23,-2
   4c260:	95a5883a 	add	r18,r18,r22
   4c264:	003f7e06 	br	4c060 <__alt_data_end+0xfffcc060>
   4c268:	18bf652e 	bgeu	r3,r2,4c000 <__alt_data_end+0xfffcc000>
   4c26c:	e73fff84 	addi	fp,fp,-2
   4c270:	1d87883a 	add	r3,r3,r22
   4c274:	003f6306 	br	4c004 <__alt_data_end+0xfffcc004>
   4c278:	1cc7883a 	add	r3,r3,r19
   4c27c:	003f0d06 	br	4beb4 <__alt_data_end+0xfffcbeb4>
   4c280:	8005883a 	mov	r2,r16
   4c284:	003edf06 	br	4be04 <__alt_data_end+0xfffcbe04>
   4c288:	847fdb36 	bltu	r16,r17,4c1f8 <__alt_data_end+0xfffcc1f8>
   4c28c:	880f883a 	mov	r7,r17
   4c290:	0009883a 	mov	r4,zero
   4c294:	003f9e06 	br	4c110 <__alt_data_end+0xfffcc110>

0004c298 <udivmodsi4>:
   4c298:	2900182e 	bgeu	r5,r4,4c2fc <udivmodsi4+0x64>
   4c29c:	28001716 	blt	r5,zero,4c2fc <udivmodsi4+0x64>
   4c2a0:	00800804 	movi	r2,32
   4c2a4:	00c00044 	movi	r3,1
   4c2a8:	00000206 	br	4c2b4 <udivmodsi4+0x1c>
   4c2ac:	10001126 	beq	r2,zero,4c2f4 <udivmodsi4+0x5c>
   4c2b0:	28000516 	blt	r5,zero,4c2c8 <udivmodsi4+0x30>
   4c2b4:	294b883a 	add	r5,r5,r5
   4c2b8:	10bfffc4 	addi	r2,r2,-1
   4c2bc:	18c7883a 	add	r3,r3,r3
   4c2c0:	293ffa36 	bltu	r5,r4,4c2ac <__alt_data_end+0xfffcc2ac>
   4c2c4:	18000b26 	beq	r3,zero,4c2f4 <udivmodsi4+0x5c>
   4c2c8:	0005883a 	mov	r2,zero
   4c2cc:	21400236 	bltu	r4,r5,4c2d8 <udivmodsi4+0x40>
   4c2d0:	2149c83a 	sub	r4,r4,r5
   4c2d4:	10c4b03a 	or	r2,r2,r3
   4c2d8:	1806d07a 	srli	r3,r3,1
   4c2dc:	280ad07a 	srli	r5,r5,1
   4c2e0:	183ffa1e 	bne	r3,zero,4c2cc <__alt_data_end+0xfffcc2cc>
   4c2e4:	3000011e 	bne	r6,zero,4c2ec <udivmodsi4+0x54>
   4c2e8:	f800283a 	ret
   4c2ec:	2005883a 	mov	r2,r4
   4c2f0:	f800283a 	ret
   4c2f4:	0005883a 	mov	r2,zero
   4c2f8:	003ffa06 	br	4c2e4 <__alt_data_end+0xfffcc2e4>
   4c2fc:	00c00044 	movi	r3,1
   4c300:	003ff106 	br	4c2c8 <__alt_data_end+0xfffcc2c8>

0004c304 <__divsi3>:
   4c304:	defffe04 	addi	sp,sp,-8
   4c308:	dfc00115 	stw	ra,4(sp)
   4c30c:	dc000015 	stw	r16,0(sp)
   4c310:	20000b16 	blt	r4,zero,4c340 <__divsi3+0x3c>
   4c314:	0021883a 	mov	r16,zero
   4c318:	28000c16 	blt	r5,zero,4c34c <__divsi3+0x48>
   4c31c:	000d883a 	mov	r6,zero
   4c320:	004c2980 	call	4c298 <udivmodsi4>
   4c324:	0407c83a 	sub	r3,zero,r16
   4c328:	1884f03a 	xor	r2,r3,r2
   4c32c:	1405883a 	add	r2,r2,r16
   4c330:	dfc00117 	ldw	ra,4(sp)
   4c334:	dc000017 	ldw	r16,0(sp)
   4c338:	dec00204 	addi	sp,sp,8
   4c33c:	f800283a 	ret
   4c340:	0109c83a 	sub	r4,zero,r4
   4c344:	04000044 	movi	r16,1
   4c348:	283ff40e 	bge	r5,zero,4c31c <__alt_data_end+0xfffcc31c>
   4c34c:	014bc83a 	sub	r5,zero,r5
   4c350:	8400005c 	xori	r16,r16,1
   4c354:	003ff106 	br	4c31c <__alt_data_end+0xfffcc31c>

0004c358 <__modsi3>:
   4c358:	defffd04 	addi	sp,sp,-12
   4c35c:	dfc00215 	stw	ra,8(sp)
   4c360:	dc400115 	stw	r17,4(sp)
   4c364:	dc000015 	stw	r16,0(sp)
   4c368:	20000c16 	blt	r4,zero,4c39c <__modsi3+0x44>
   4c36c:	0023883a 	mov	r17,zero
   4c370:	0021883a 	mov	r16,zero
   4c374:	28000d16 	blt	r5,zero,4c3ac <__modsi3+0x54>
   4c378:	01800044 	movi	r6,1
   4c37c:	004c2980 	call	4c298 <udivmodsi4>
   4c380:	1404f03a 	xor	r2,r2,r16
   4c384:	8885883a 	add	r2,r17,r2
   4c388:	dfc00217 	ldw	ra,8(sp)
   4c38c:	dc400117 	ldw	r17,4(sp)
   4c390:	dc000017 	ldw	r16,0(sp)
   4c394:	dec00304 	addi	sp,sp,12
   4c398:	f800283a 	ret
   4c39c:	0109c83a 	sub	r4,zero,r4
   4c3a0:	04400044 	movi	r17,1
   4c3a4:	043fffc4 	movi	r16,-1
   4c3a8:	283ff30e 	bge	r5,zero,4c378 <__alt_data_end+0xfffcc378>
   4c3ac:	014bc83a 	sub	r5,zero,r5
   4c3b0:	003ff106 	br	4c378 <__alt_data_end+0xfffcc378>

0004c3b4 <__udivsi3>:
   4c3b4:	000d883a 	mov	r6,zero
   4c3b8:	004c2981 	jmpi	4c298 <udivmodsi4>

0004c3bc <__umodsi3>:
   4c3bc:	01800044 	movi	r6,1
   4c3c0:	004c2981 	jmpi	4c298 <udivmodsi4>

0004c3c4 <__mulsi3>:
   4c3c4:	0005883a 	mov	r2,zero
   4c3c8:	20000726 	beq	r4,zero,4c3e8 <__mulsi3+0x24>
   4c3cc:	20c0004c 	andi	r3,r4,1
   4c3d0:	2008d07a 	srli	r4,r4,1
   4c3d4:	18000126 	beq	r3,zero,4c3dc <__mulsi3+0x18>
   4c3d8:	1145883a 	add	r2,r2,r5
   4c3dc:	294b883a 	add	r5,r5,r5
   4c3e0:	203ffa1e 	bne	r4,zero,4c3cc <__alt_data_end+0xfffcc3cc>
   4c3e4:	f800283a 	ret
   4c3e8:	f800283a 	ret

0004c3ec <__adddf3>:
   4c3ec:	02000434 	movhi	r8,16
   4c3f0:	423fffc4 	addi	r8,r8,-1
   4c3f4:	defffb04 	addi	sp,sp,-20
   4c3f8:	2a12703a 	and	r9,r5,r8
   4c3fc:	2806d7fa 	srli	r3,r5,31
   4c400:	3a10703a 	and	r8,r7,r8
   4c404:	3804d53a 	srli	r2,r7,20
   4c408:	3014d77a 	srli	r10,r6,29
   4c40c:	dc000015 	stw	r16,0(sp)
   4c410:	481290fa 	slli	r9,r9,3
   4c414:	2820d53a 	srli	r16,r5,20
   4c418:	401090fa 	slli	r8,r8,3
   4c41c:	200ad77a 	srli	r5,r4,29
   4c420:	380ed7fa 	srli	r7,r7,31
   4c424:	dc800215 	stw	r18,8(sp)
   4c428:	dc400115 	stw	r17,4(sp)
   4c42c:	dfc00415 	stw	ra,16(sp)
   4c430:	dcc00315 	stw	r19,12(sp)
   4c434:	1c803fcc 	andi	r18,r3,255
   4c438:	8401ffcc 	andi	r16,r16,2047
   4c43c:	494ab03a 	or	r5,r9,r5
   4c440:	202290fa 	slli	r17,r4,3
   4c444:	1081ffcc 	andi	r2,r2,2047
   4c448:	4290b03a 	or	r8,r8,r10
   4c44c:	300c90fa 	slli	r6,r6,3
   4c450:	91c07026 	beq	r18,r7,4c614 <__adddf3+0x228>
   4c454:	8087c83a 	sub	r3,r16,r2
   4c458:	00c0b30e 	bge	zero,r3,4c728 <__adddf3+0x33c>
   4c45c:	10002a1e 	bne	r2,zero,4c508 <__adddf3+0x11c>
   4c460:	4184b03a 	or	r2,r8,r6
   4c464:	1000991e 	bne	r2,zero,4c6cc <__adddf3+0x2e0>
   4c468:	888001cc 	andi	r2,r17,7
   4c46c:	10005b26 	beq	r2,zero,4c5dc <__adddf3+0x1f0>
   4c470:	88c003cc 	andi	r3,r17,15
   4c474:	00800104 	movi	r2,4
   4c478:	18805826 	beq	r3,r2,4c5dc <__adddf3+0x1f0>
   4c47c:	89800104 	addi	r6,r17,4
   4c480:	3463803a 	cmpltu	r17,r6,r17
   4c484:	2c4b883a 	add	r5,r5,r17
   4c488:	2880202c 	andhi	r2,r5,128
   4c48c:	9007883a 	mov	r3,r18
   4c490:	3023883a 	mov	r17,r6
   4c494:	10005426 	beq	r2,zero,4c5e8 <__adddf3+0x1fc>
   4c498:	84000044 	addi	r16,r16,1
   4c49c:	0081ffc4 	movi	r2,2047
   4c4a0:	8080c126 	beq	r16,r2,4c7a8 <__adddf3+0x3bc>
   4c4a4:	013fe034 	movhi	r4,65408
   4c4a8:	213fffc4 	addi	r4,r4,-1
   4c4ac:	290a703a 	and	r5,r5,r4
   4c4b0:	2804977a 	slli	r2,r5,29
   4c4b4:	280a927a 	slli	r5,r5,9
   4c4b8:	8822d0fa 	srli	r17,r17,3
   4c4bc:	8401ffcc 	andi	r16,r16,2047
   4c4c0:	2808d33a 	srli	r4,r5,12
   4c4c4:	1444b03a 	or	r2,r2,r17
   4c4c8:	8401ffcc 	andi	r16,r16,2047
   4c4cc:	800a953a 	slli	r5,r16,20
   4c4d0:	18c03fcc 	andi	r3,r3,255
   4c4d4:	04000434 	movhi	r16,16
   4c4d8:	180697fa 	slli	r3,r3,31
   4c4dc:	843fffc4 	addi	r16,r16,-1
   4c4e0:	2420703a 	and	r16,r4,r16
   4c4e4:	8160b03a 	or	r16,r16,r5
   4c4e8:	80c6b03a 	or	r3,r16,r3
   4c4ec:	dfc00417 	ldw	ra,16(sp)
   4c4f0:	dcc00317 	ldw	r19,12(sp)
   4c4f4:	dc800217 	ldw	r18,8(sp)
   4c4f8:	dc400117 	ldw	r17,4(sp)
   4c4fc:	dc000017 	ldw	r16,0(sp)
   4c500:	dec00504 	addi	sp,sp,20
   4c504:	f800283a 	ret
   4c508:	0081ffc4 	movi	r2,2047
   4c50c:	80bfd626 	beq	r16,r2,4c468 <__alt_data_end+0xfffcc468>
   4c510:	42002034 	orhi	r8,r8,128
   4c514:	00800e04 	movi	r2,56
   4c518:	10c0a616 	blt	r2,r3,4c7b4 <__adddf3+0x3c8>
   4c51c:	008007c4 	movi	r2,31
   4c520:	10c0c916 	blt	r2,r3,4c848 <__adddf3+0x45c>
   4c524:	00800804 	movi	r2,32
   4c528:	10c5c83a 	sub	r2,r2,r3
   4c52c:	408e983a 	sll	r7,r8,r2
   4c530:	30c8d83a 	srl	r4,r6,r3
   4c534:	3084983a 	sll	r2,r6,r2
   4c538:	40c6d83a 	srl	r3,r8,r3
   4c53c:	390cb03a 	or	r6,r7,r4
   4c540:	1004c03a 	cmpne	r2,r2,zero
   4c544:	308cb03a 	or	r6,r6,r2
   4c548:	898dc83a 	sub	r6,r17,r6
   4c54c:	89a3803a 	cmpltu	r17,r17,r6
   4c550:	28cbc83a 	sub	r5,r5,r3
   4c554:	2c4bc83a 	sub	r5,r5,r17
   4c558:	3023883a 	mov	r17,r6
   4c55c:	2880202c 	andhi	r2,r5,128
   4c560:	10006d26 	beq	r2,zero,4c718 <__adddf3+0x32c>
   4c564:	04c02034 	movhi	r19,128
   4c568:	9cffffc4 	addi	r19,r19,-1
   4c56c:	2ce6703a 	and	r19,r5,r19
   4c570:	98007e26 	beq	r19,zero,4c76c <__adddf3+0x380>
   4c574:	9809883a 	mov	r4,r19
   4c578:	004eb840 	call	4eb84 <__clzsi2>
   4c57c:	10fffe04 	addi	r3,r2,-8
   4c580:	010007c4 	movi	r4,31
   4c584:	20c07f16 	blt	r4,r3,4c784 <__adddf3+0x398>
   4c588:	01400a04 	movi	r5,40
   4c58c:	2885c83a 	sub	r2,r5,r2
   4c590:	888ad83a 	srl	r5,r17,r2
   4c594:	98e6983a 	sll	r19,r19,r3
   4c598:	88e2983a 	sll	r17,r17,r3
   4c59c:	2ce6b03a 	or	r19,r5,r19
   4c5a0:	1c007c16 	blt	r3,r16,4c794 <__adddf3+0x3a8>
   4c5a4:	1c21c83a 	sub	r16,r3,r16
   4c5a8:	81400044 	addi	r5,r16,1
   4c5ac:	00c007c4 	movi	r3,31
   4c5b0:	19409816 	blt	r3,r5,4c814 <__adddf3+0x428>
   4c5b4:	1c21c83a 	sub	r16,r3,r16
   4c5b8:	8c08983a 	sll	r4,r17,r16
   4c5bc:	8946d83a 	srl	r3,r17,r5
   4c5c0:	9c20983a 	sll	r16,r19,r16
   4c5c4:	2008c03a 	cmpne	r4,r4,zero
   4c5c8:	994ad83a 	srl	r5,r19,r5
   4c5cc:	1c06b03a 	or	r3,r3,r16
   4c5d0:	1922b03a 	or	r17,r3,r4
   4c5d4:	0021883a 	mov	r16,zero
   4c5d8:	003fa306 	br	4c468 <__alt_data_end+0xfffcc468>
   4c5dc:	2880202c 	andhi	r2,r5,128
   4c5e0:	9007883a 	mov	r3,r18
   4c5e4:	103fac1e 	bne	r2,zero,4c498 <__alt_data_end+0xfffcc498>
   4c5e8:	2804977a 	slli	r2,r5,29
   4c5ec:	8822d0fa 	srli	r17,r17,3
   4c5f0:	0101ffc4 	movi	r4,2047
   4c5f4:	280ad0fa 	srli	r5,r5,3
   4c5f8:	1444b03a 	or	r2,r2,r17
   4c5fc:	81002c26 	beq	r16,r4,4c6b0 <__adddf3+0x2c4>
   4c600:	8120703a 	and	r16,r16,r4
   4c604:	01000434 	movhi	r4,16
   4c608:	213fffc4 	addi	r4,r4,-1
   4c60c:	2908703a 	and	r4,r5,r4
   4c610:	003fad06 	br	4c4c8 <__alt_data_end+0xfffcc4c8>
   4c614:	8089c83a 	sub	r4,r16,r2
   4c618:	01006a0e 	bge	zero,r4,4c7c4 <__adddf3+0x3d8>
   4c61c:	10003326 	beq	r2,zero,4c6ec <__adddf3+0x300>
   4c620:	0081ffc4 	movi	r2,2047
   4c624:	80bf9026 	beq	r16,r2,4c468 <__alt_data_end+0xfffcc468>
   4c628:	42002034 	orhi	r8,r8,128
   4c62c:	00800e04 	movi	r2,56
   4c630:	1100b116 	blt	r2,r4,4c8f8 <__adddf3+0x50c>
   4c634:	008007c4 	movi	r2,31
   4c638:	1100e216 	blt	r2,r4,4c9c4 <__adddf3+0x5d8>
   4c63c:	00800804 	movi	r2,32
   4c640:	1105c83a 	sub	r2,r2,r4
   4c644:	4092983a 	sll	r9,r8,r2
   4c648:	310ed83a 	srl	r7,r6,r4
   4c64c:	3084983a 	sll	r2,r6,r2
   4c650:	4110d83a 	srl	r8,r8,r4
   4c654:	49ccb03a 	or	r6,r9,r7
   4c658:	1004c03a 	cmpne	r2,r2,zero
   4c65c:	308cb03a 	or	r6,r6,r2
   4c660:	344d883a 	add	r6,r6,r17
   4c664:	3463803a 	cmpltu	r17,r6,r17
   4c668:	414b883a 	add	r5,r8,r5
   4c66c:	2c4b883a 	add	r5,r5,r17
   4c670:	3023883a 	mov	r17,r6
   4c674:	2880202c 	andhi	r2,r5,128
   4c678:	10002726 	beq	r2,zero,4c718 <__adddf3+0x32c>
   4c67c:	84000044 	addi	r16,r16,1
   4c680:	0081ffc4 	movi	r2,2047
   4c684:	8080ae26 	beq	r16,r2,4c940 <__adddf3+0x554>
   4c688:	00bfe034 	movhi	r2,65408
   4c68c:	10bfffc4 	addi	r2,r2,-1
   4c690:	288a703a 	and	r5,r5,r2
   4c694:	880cd07a 	srli	r6,r17,1
   4c698:	280897fa 	slli	r4,r5,31
   4c69c:	88c0004c 	andi	r3,r17,1
   4c6a0:	30e2b03a 	or	r17,r6,r3
   4c6a4:	280ad07a 	srli	r5,r5,1
   4c6a8:	8922b03a 	or	r17,r17,r4
   4c6ac:	003f6e06 	br	4c468 <__alt_data_end+0xfffcc468>
   4c6b0:	1148b03a 	or	r4,r2,r5
   4c6b4:	20003c26 	beq	r4,zero,4c7a8 <__adddf3+0x3bc>
   4c6b8:	29000234 	orhi	r4,r5,8
   4c6bc:	01400434 	movhi	r5,16
   4c6c0:	297fffc4 	addi	r5,r5,-1
   4c6c4:	2148703a 	and	r4,r4,r5
   4c6c8:	003f7f06 	br	4c4c8 <__alt_data_end+0xfffcc4c8>
   4c6cc:	18ffffc4 	addi	r3,r3,-1
   4c6d0:	18004d1e 	bne	r3,zero,4c808 <__adddf3+0x41c>
   4c6d4:	898dc83a 	sub	r6,r17,r6
   4c6d8:	89a3803a 	cmpltu	r17,r17,r6
   4c6dc:	2a0bc83a 	sub	r5,r5,r8
   4c6e0:	2c4bc83a 	sub	r5,r5,r17
   4c6e4:	3023883a 	mov	r17,r6
   4c6e8:	003f9c06 	br	4c55c <__alt_data_end+0xfffcc55c>
   4c6ec:	4184b03a 	or	r2,r8,r6
   4c6f0:	103f5d26 	beq	r2,zero,4c468 <__alt_data_end+0xfffcc468>
   4c6f4:	213fffc4 	addi	r4,r4,-1
   4c6f8:	203fd926 	beq	r4,zero,4c660 <__alt_data_end+0xfffcc660>
   4c6fc:	0081ffc4 	movi	r2,2047
   4c700:	80bfca1e 	bne	r16,r2,4c62c <__alt_data_end+0xfffcc62c>
   4c704:	003f5806 	br	4c468 <__alt_data_end+0xfffcc468>
   4c708:	10c8b03a 	or	r4,r2,r3
   4c70c:	20008b26 	beq	r4,zero,4c93c <__adddf3+0x550>
   4c710:	100b883a 	mov	r5,r2
   4c714:	1823883a 	mov	r17,r3
   4c718:	888001cc 	andi	r2,r17,7
   4c71c:	103f541e 	bne	r2,zero,4c470 <__alt_data_end+0xfffcc470>
   4c720:	9007883a 	mov	r3,r18
   4c724:	003fb006 	br	4c5e8 <__alt_data_end+0xfffcc5e8>
   4c728:	1800531e 	bne	r3,zero,4c878 <__adddf3+0x48c>
   4c72c:	80800044 	addi	r2,r16,1
   4c730:	1081ffcc 	andi	r2,r2,2047
   4c734:	00c00044 	movi	r3,1
   4c738:	1880990e 	bge	r3,r2,4c9a0 <__adddf3+0x5b4>
   4c73c:	8985c83a 	sub	r2,r17,r6
   4c740:	8887803a 	cmpltu	r3,r17,r2
   4c744:	2a27c83a 	sub	r19,r5,r8
   4c748:	98e7c83a 	sub	r19,r19,r3
   4c74c:	98c0202c 	andhi	r3,r19,128
   4c750:	18006226 	beq	r3,zero,4c8dc <__adddf3+0x4f0>
   4c754:	3463c83a 	sub	r17,r6,r17
   4c758:	4151c83a 	sub	r8,r8,r5
   4c75c:	344d803a 	cmpltu	r6,r6,r17
   4c760:	41a7c83a 	sub	r19,r8,r6
   4c764:	3825883a 	mov	r18,r7
   4c768:	983f821e 	bne	r19,zero,4c574 <__alt_data_end+0xfffcc574>
   4c76c:	8809883a 	mov	r4,r17
   4c770:	004eb840 	call	4eb84 <__clzsi2>
   4c774:	10800804 	addi	r2,r2,32
   4c778:	10fffe04 	addi	r3,r2,-8
   4c77c:	010007c4 	movi	r4,31
   4c780:	20ff810e 	bge	r4,r3,4c588 <__alt_data_end+0xfffcc588>
   4c784:	14fff604 	addi	r19,r2,-40
   4c788:	8ce6983a 	sll	r19,r17,r19
   4c78c:	0023883a 	mov	r17,zero
   4c790:	1c3f840e 	bge	r3,r16,4c5a4 <__alt_data_end+0xfffcc5a4>
   4c794:	017fe034 	movhi	r5,65408
   4c798:	297fffc4 	addi	r5,r5,-1
   4c79c:	80e1c83a 	sub	r16,r16,r3
   4c7a0:	994a703a 	and	r5,r19,r5
   4c7a4:	003f3006 	br	4c468 <__alt_data_end+0xfffcc468>
   4c7a8:	0009883a 	mov	r4,zero
   4c7ac:	0005883a 	mov	r2,zero
   4c7b0:	003f4506 	br	4c4c8 <__alt_data_end+0xfffcc4c8>
   4c7b4:	418cb03a 	or	r6,r8,r6
   4c7b8:	300cc03a 	cmpne	r6,r6,zero
   4c7bc:	0007883a 	mov	r3,zero
   4c7c0:	003f6106 	br	4c548 <__alt_data_end+0xfffcc548>
   4c7c4:	2000921e 	bne	r4,zero,4ca10 <__adddf3+0x624>
   4c7c8:	80800044 	addi	r2,r16,1
   4c7cc:	11c1ffcc 	andi	r7,r2,2047
   4c7d0:	01000044 	movi	r4,1
   4c7d4:	21c0610e 	bge	r4,r7,4c95c <__adddf3+0x570>
   4c7d8:	0101ffc4 	movi	r4,2047
   4c7dc:	1100a326 	beq	r2,r4,4ca6c <__adddf3+0x680>
   4c7e0:	344d883a 	add	r6,r6,r17
   4c7e4:	3463803a 	cmpltu	r17,r6,r17
   4c7e8:	414b883a 	add	r5,r8,r5
   4c7ec:	2c4b883a 	add	r5,r5,r17
   4c7f0:	282297fa 	slli	r17,r5,31
   4c7f4:	300cd07a 	srli	r6,r6,1
   4c7f8:	280ad07a 	srli	r5,r5,1
   4c7fc:	1021883a 	mov	r16,r2
   4c800:	89a2b03a 	or	r17,r17,r6
   4c804:	003f1806 	br	4c468 <__alt_data_end+0xfffcc468>
   4c808:	0081ffc4 	movi	r2,2047
   4c80c:	80bf411e 	bne	r16,r2,4c514 <__alt_data_end+0xfffcc514>
   4c810:	003f1506 	br	4c468 <__alt_data_end+0xfffcc468>
   4c814:	80bff844 	addi	r2,r16,-31
   4c818:	00c00804 	movi	r3,32
   4c81c:	9884d83a 	srl	r2,r19,r2
   4c820:	28c04a26 	beq	r5,r3,4c94c <__adddf3+0x560>
   4c824:	00c00fc4 	movi	r3,63
   4c828:	1c21c83a 	sub	r16,r3,r16
   4c82c:	9c26983a 	sll	r19,r19,r16
   4c830:	9c62b03a 	or	r17,r19,r17
   4c834:	8822c03a 	cmpne	r17,r17,zero
   4c838:	88a2b03a 	or	r17,r17,r2
   4c83c:	000b883a 	mov	r5,zero
   4c840:	0021883a 	mov	r16,zero
   4c844:	003fb406 	br	4c718 <__alt_data_end+0xfffcc718>
   4c848:	18bff804 	addi	r2,r3,-32
   4c84c:	01000804 	movi	r4,32
   4c850:	4084d83a 	srl	r2,r8,r2
   4c854:	19003f26 	beq	r3,r4,4c954 <__adddf3+0x568>
   4c858:	01001004 	movi	r4,64
   4c85c:	20c7c83a 	sub	r3,r4,r3
   4c860:	40d0983a 	sll	r8,r8,r3
   4c864:	418cb03a 	or	r6,r8,r6
   4c868:	300cc03a 	cmpne	r6,r6,zero
   4c86c:	308cb03a 	or	r6,r6,r2
   4c870:	0007883a 	mov	r3,zero
   4c874:	003f3406 	br	4c548 <__alt_data_end+0xfffcc548>
   4c878:	80002326 	beq	r16,zero,4c908 <__adddf3+0x51c>
   4c87c:	0101ffc4 	movi	r4,2047
   4c880:	11005e26 	beq	r2,r4,4c9fc <__adddf3+0x610>
   4c884:	00c7c83a 	sub	r3,zero,r3
   4c888:	29402034 	orhi	r5,r5,128
   4c88c:	01000e04 	movi	r4,56
   4c890:	20c07216 	blt	r4,r3,4ca5c <__adddf3+0x670>
   4c894:	010007c4 	movi	r4,31
   4c898:	20c0ce16 	blt	r4,r3,4cbd4 <__adddf3+0x7e8>
   4c89c:	01000804 	movi	r4,32
   4c8a0:	20c9c83a 	sub	r4,r4,r3
   4c8a4:	2914983a 	sll	r10,r5,r4
   4c8a8:	88d2d83a 	srl	r9,r17,r3
   4c8ac:	8908983a 	sll	r4,r17,r4
   4c8b0:	28c6d83a 	srl	r3,r5,r3
   4c8b4:	5262b03a 	or	r17,r10,r9
   4c8b8:	2008c03a 	cmpne	r4,r4,zero
   4c8bc:	8922b03a 	or	r17,r17,r4
   4c8c0:	3463c83a 	sub	r17,r6,r17
   4c8c4:	40c7c83a 	sub	r3,r8,r3
   4c8c8:	344d803a 	cmpltu	r6,r6,r17
   4c8cc:	198bc83a 	sub	r5,r3,r6
   4c8d0:	1021883a 	mov	r16,r2
   4c8d4:	3825883a 	mov	r18,r7
   4c8d8:	003f2006 	br	4c55c <__alt_data_end+0xfffcc55c>
   4c8dc:	9886b03a 	or	r3,r19,r2
   4c8e0:	1800141e 	bne	r3,zero,4c934 <__adddf3+0x548>
   4c8e4:	0007883a 	mov	r3,zero
   4c8e8:	000b883a 	mov	r5,zero
   4c8ec:	0023883a 	mov	r17,zero
   4c8f0:	0021883a 	mov	r16,zero
   4c8f4:	003f3c06 	br	4c5e8 <__alt_data_end+0xfffcc5e8>
   4c8f8:	418cb03a 	or	r6,r8,r6
   4c8fc:	300cc03a 	cmpne	r6,r6,zero
   4c900:	0011883a 	mov	r8,zero
   4c904:	003f5606 	br	4c660 <__alt_data_end+0xfffcc660>
   4c908:	2c48b03a 	or	r4,r5,r17
   4c90c:	20003b26 	beq	r4,zero,4c9fc <__adddf3+0x610>
   4c910:	00c6303a 	nor	r3,zero,r3
   4c914:	1800371e 	bne	r3,zero,4c9f4 <__adddf3+0x608>
   4c918:	3463c83a 	sub	r17,r6,r17
   4c91c:	414bc83a 	sub	r5,r8,r5
   4c920:	344d803a 	cmpltu	r6,r6,r17
   4c924:	298bc83a 	sub	r5,r5,r6
   4c928:	1021883a 	mov	r16,r2
   4c92c:	3825883a 	mov	r18,r7
   4c930:	003f0a06 	br	4c55c <__alt_data_end+0xfffcc55c>
   4c934:	1023883a 	mov	r17,r2
   4c938:	003f0d06 	br	4c570 <__alt_data_end+0xfffcc570>
   4c93c:	0007883a 	mov	r3,zero
   4c940:	000b883a 	mov	r5,zero
   4c944:	0023883a 	mov	r17,zero
   4c948:	003f2706 	br	4c5e8 <__alt_data_end+0xfffcc5e8>
   4c94c:	0027883a 	mov	r19,zero
   4c950:	003fb706 	br	4c830 <__alt_data_end+0xfffcc830>
   4c954:	0011883a 	mov	r8,zero
   4c958:	003fc206 	br	4c864 <__alt_data_end+0xfffcc864>
   4c95c:	2c44b03a 	or	r2,r5,r17
   4c960:	8000871e 	bne	r16,zero,4cb80 <__adddf3+0x794>
   4c964:	1000b126 	beq	r2,zero,4cc2c <__adddf3+0x840>
   4c968:	4184b03a 	or	r2,r8,r6
   4c96c:	103ebe26 	beq	r2,zero,4c468 <__alt_data_end+0xfffcc468>
   4c970:	3445883a 	add	r2,r6,r17
   4c974:	1463803a 	cmpltu	r17,r2,r17
   4c978:	414b883a 	add	r5,r8,r5
   4c97c:	2c4b883a 	add	r5,r5,r17
   4c980:	28c0202c 	andhi	r3,r5,128
   4c984:	1023883a 	mov	r17,r2
   4c988:	183f6326 	beq	r3,zero,4c718 <__alt_data_end+0xfffcc718>
   4c98c:	00bfe034 	movhi	r2,65408
   4c990:	10bfffc4 	addi	r2,r2,-1
   4c994:	2021883a 	mov	r16,r4
   4c998:	288a703a 	and	r5,r5,r2
   4c99c:	003eb206 	br	4c468 <__alt_data_end+0xfffcc468>
   4c9a0:	2c44b03a 	or	r2,r5,r17
   4c9a4:	8000251e 	bne	r16,zero,4ca3c <__adddf3+0x650>
   4c9a8:	10004b1e 	bne	r2,zero,4cad8 <__adddf3+0x6ec>
   4c9ac:	4184b03a 	or	r2,r8,r6
   4c9b0:	103fe226 	beq	r2,zero,4c93c <__alt_data_end+0xfffcc93c>
   4c9b4:	400b883a 	mov	r5,r8
   4c9b8:	3023883a 	mov	r17,r6
   4c9bc:	3825883a 	mov	r18,r7
   4c9c0:	003ea906 	br	4c468 <__alt_data_end+0xfffcc468>
   4c9c4:	20bff804 	addi	r2,r4,-32
   4c9c8:	01c00804 	movi	r7,32
   4c9cc:	4084d83a 	srl	r2,r8,r2
   4c9d0:	21c07e26 	beq	r4,r7,4cbcc <__adddf3+0x7e0>
   4c9d4:	01c01004 	movi	r7,64
   4c9d8:	3909c83a 	sub	r4,r7,r4
   4c9dc:	4110983a 	sll	r8,r8,r4
   4c9e0:	418cb03a 	or	r6,r8,r6
   4c9e4:	300cc03a 	cmpne	r6,r6,zero
   4c9e8:	308cb03a 	or	r6,r6,r2
   4c9ec:	0011883a 	mov	r8,zero
   4c9f0:	003f1b06 	br	4c660 <__alt_data_end+0xfffcc660>
   4c9f4:	0101ffc4 	movi	r4,2047
   4c9f8:	113fa41e 	bne	r2,r4,4c88c <__alt_data_end+0xfffcc88c>
   4c9fc:	400b883a 	mov	r5,r8
   4ca00:	3023883a 	mov	r17,r6
   4ca04:	1021883a 	mov	r16,r2
   4ca08:	3825883a 	mov	r18,r7
   4ca0c:	003e9606 	br	4c468 <__alt_data_end+0xfffcc468>
   4ca10:	80001a1e 	bne	r16,zero,4ca7c <__adddf3+0x690>
   4ca14:	2c4eb03a 	or	r7,r5,r17
   4ca18:	38005526 	beq	r7,zero,4cb70 <__adddf3+0x784>
   4ca1c:	0108303a 	nor	r4,zero,r4
   4ca20:	2000511e 	bne	r4,zero,4cb68 <__adddf3+0x77c>
   4ca24:	89a3883a 	add	r17,r17,r6
   4ca28:	414b883a 	add	r5,r8,r5
   4ca2c:	898d803a 	cmpltu	r6,r17,r6
   4ca30:	298b883a 	add	r5,r5,r6
   4ca34:	1021883a 	mov	r16,r2
   4ca38:	003f0e06 	br	4c674 <__alt_data_end+0xfffcc674>
   4ca3c:	1000341e 	bne	r2,zero,4cb10 <__adddf3+0x724>
   4ca40:	4184b03a 	or	r2,r8,r6
   4ca44:	10006f26 	beq	r2,zero,4cc04 <__adddf3+0x818>
   4ca48:	400b883a 	mov	r5,r8
   4ca4c:	3023883a 	mov	r17,r6
   4ca50:	3825883a 	mov	r18,r7
   4ca54:	0401ffc4 	movi	r16,2047
   4ca58:	003e8306 	br	4c468 <__alt_data_end+0xfffcc468>
   4ca5c:	2c62b03a 	or	r17,r5,r17
   4ca60:	8822c03a 	cmpne	r17,r17,zero
   4ca64:	0007883a 	mov	r3,zero
   4ca68:	003f9506 	br	4c8c0 <__alt_data_end+0xfffcc8c0>
   4ca6c:	1021883a 	mov	r16,r2
   4ca70:	000b883a 	mov	r5,zero
   4ca74:	0023883a 	mov	r17,zero
   4ca78:	003edb06 	br	4c5e8 <__alt_data_end+0xfffcc5e8>
   4ca7c:	01c1ffc4 	movi	r7,2047
   4ca80:	11c03b26 	beq	r2,r7,4cb70 <__adddf3+0x784>
   4ca84:	0109c83a 	sub	r4,zero,r4
   4ca88:	29402034 	orhi	r5,r5,128
   4ca8c:	01c00e04 	movi	r7,56
   4ca90:	39006216 	blt	r7,r4,4cc1c <__adddf3+0x830>
   4ca94:	01c007c4 	movi	r7,31
   4ca98:	39006b16 	blt	r7,r4,4cc48 <__adddf3+0x85c>
   4ca9c:	01c00804 	movi	r7,32
   4caa0:	390fc83a 	sub	r7,r7,r4
   4caa4:	29d4983a 	sll	r10,r5,r7
   4caa8:	8912d83a 	srl	r9,r17,r4
   4caac:	89ce983a 	sll	r7,r17,r7
   4cab0:	2908d83a 	srl	r4,r5,r4
   4cab4:	5262b03a 	or	r17,r10,r9
   4cab8:	380ac03a 	cmpne	r5,r7,zero
   4cabc:	8962b03a 	or	r17,r17,r5
   4cac0:	89a3883a 	add	r17,r17,r6
   4cac4:	2211883a 	add	r8,r4,r8
   4cac8:	898d803a 	cmpltu	r6,r17,r6
   4cacc:	418b883a 	add	r5,r8,r6
   4cad0:	1021883a 	mov	r16,r2
   4cad4:	003ee706 	br	4c674 <__alt_data_end+0xfffcc674>
   4cad8:	4184b03a 	or	r2,r8,r6
   4cadc:	103e6226 	beq	r2,zero,4c468 <__alt_data_end+0xfffcc468>
   4cae0:	8987c83a 	sub	r3,r17,r6
   4cae4:	88c9803a 	cmpltu	r4,r17,r3
   4cae8:	2a05c83a 	sub	r2,r5,r8
   4caec:	1105c83a 	sub	r2,r2,r4
   4caf0:	1100202c 	andhi	r4,r2,128
   4caf4:	203f0426 	beq	r4,zero,4c708 <__alt_data_end+0xfffcc708>
   4caf8:	3463c83a 	sub	r17,r6,r17
   4cafc:	414bc83a 	sub	r5,r8,r5
   4cb00:	344d803a 	cmpltu	r6,r6,r17
   4cb04:	298bc83a 	sub	r5,r5,r6
   4cb08:	3825883a 	mov	r18,r7
   4cb0c:	003e5606 	br	4c468 <__alt_data_end+0xfffcc468>
   4cb10:	4184b03a 	or	r2,r8,r6
   4cb14:	10002b26 	beq	r2,zero,4cbc4 <__adddf3+0x7d8>
   4cb18:	2804d0fa 	srli	r2,r5,3
   4cb1c:	8822d0fa 	srli	r17,r17,3
   4cb20:	280a977a 	slli	r5,r5,29
   4cb24:	10c0022c 	andhi	r3,r2,8
   4cb28:	2c62b03a 	or	r17,r5,r17
   4cb2c:	18000826 	beq	r3,zero,4cb50 <__adddf3+0x764>
   4cb30:	4008d0fa 	srli	r4,r8,3
   4cb34:	20c0022c 	andhi	r3,r4,8
   4cb38:	1800051e 	bne	r3,zero,4cb50 <__adddf3+0x764>
   4cb3c:	300cd0fa 	srli	r6,r6,3
   4cb40:	4010977a 	slli	r8,r8,29
   4cb44:	2005883a 	mov	r2,r4
   4cb48:	3825883a 	mov	r18,r7
   4cb4c:	41a2b03a 	or	r17,r8,r6
   4cb50:	880ad77a 	srli	r5,r17,29
   4cb54:	100490fa 	slli	r2,r2,3
   4cb58:	882290fa 	slli	r17,r17,3
   4cb5c:	0401ffc4 	movi	r16,2047
   4cb60:	288ab03a 	or	r5,r5,r2
   4cb64:	003e4006 	br	4c468 <__alt_data_end+0xfffcc468>
   4cb68:	01c1ffc4 	movi	r7,2047
   4cb6c:	11ffc71e 	bne	r2,r7,4ca8c <__alt_data_end+0xfffcca8c>
   4cb70:	400b883a 	mov	r5,r8
   4cb74:	3023883a 	mov	r17,r6
   4cb78:	1021883a 	mov	r16,r2
   4cb7c:	003e3a06 	br	4c468 <__alt_data_end+0xfffcc468>
   4cb80:	10002d26 	beq	r2,zero,4cc38 <__adddf3+0x84c>
   4cb84:	4184b03a 	or	r2,r8,r6
   4cb88:	10000e26 	beq	r2,zero,4cbc4 <__adddf3+0x7d8>
   4cb8c:	2804d0fa 	srli	r2,r5,3
   4cb90:	8822d0fa 	srli	r17,r17,3
   4cb94:	280a977a 	slli	r5,r5,29
   4cb98:	10c0022c 	andhi	r3,r2,8
   4cb9c:	2c62b03a 	or	r17,r5,r17
   4cba0:	183feb26 	beq	r3,zero,4cb50 <__alt_data_end+0xfffccb50>
   4cba4:	4008d0fa 	srli	r4,r8,3
   4cba8:	20c0022c 	andhi	r3,r4,8
   4cbac:	183fe81e 	bne	r3,zero,4cb50 <__alt_data_end+0xfffccb50>
   4cbb0:	300cd0fa 	srli	r6,r6,3
   4cbb4:	4010977a 	slli	r8,r8,29
   4cbb8:	2005883a 	mov	r2,r4
   4cbbc:	41a2b03a 	or	r17,r8,r6
   4cbc0:	003fe306 	br	4cb50 <__alt_data_end+0xfffccb50>
   4cbc4:	0401ffc4 	movi	r16,2047
   4cbc8:	003e2706 	br	4c468 <__alt_data_end+0xfffcc468>
   4cbcc:	0011883a 	mov	r8,zero
   4cbd0:	003f8306 	br	4c9e0 <__alt_data_end+0xfffcc9e0>
   4cbd4:	193ff804 	addi	r4,r3,-32
   4cbd8:	02400804 	movi	r9,32
   4cbdc:	2908d83a 	srl	r4,r5,r4
   4cbe0:	1a402526 	beq	r3,r9,4cc78 <__adddf3+0x88c>
   4cbe4:	02401004 	movi	r9,64
   4cbe8:	48c7c83a 	sub	r3,r9,r3
   4cbec:	28ca983a 	sll	r5,r5,r3
   4cbf0:	2c62b03a 	or	r17,r5,r17
   4cbf4:	8822c03a 	cmpne	r17,r17,zero
   4cbf8:	8922b03a 	or	r17,r17,r4
   4cbfc:	0007883a 	mov	r3,zero
   4cc00:	003f2f06 	br	4c8c0 <__alt_data_end+0xfffcc8c0>
   4cc04:	01402034 	movhi	r5,128
   4cc08:	0007883a 	mov	r3,zero
   4cc0c:	297fffc4 	addi	r5,r5,-1
   4cc10:	047ffe04 	movi	r17,-8
   4cc14:	0401ffc4 	movi	r16,2047
   4cc18:	003e7306 	br	4c5e8 <__alt_data_end+0xfffcc5e8>
   4cc1c:	2c62b03a 	or	r17,r5,r17
   4cc20:	8822c03a 	cmpne	r17,r17,zero
   4cc24:	0009883a 	mov	r4,zero
   4cc28:	003fa506 	br	4cac0 <__alt_data_end+0xfffccac0>
   4cc2c:	400b883a 	mov	r5,r8
   4cc30:	3023883a 	mov	r17,r6
   4cc34:	003e0c06 	br	4c468 <__alt_data_end+0xfffcc468>
   4cc38:	400b883a 	mov	r5,r8
   4cc3c:	3023883a 	mov	r17,r6
   4cc40:	0401ffc4 	movi	r16,2047
   4cc44:	003e0806 	br	4c468 <__alt_data_end+0xfffcc468>
   4cc48:	21fff804 	addi	r7,r4,-32
   4cc4c:	02400804 	movi	r9,32
   4cc50:	29ced83a 	srl	r7,r5,r7
   4cc54:	22400a26 	beq	r4,r9,4cc80 <__adddf3+0x894>
   4cc58:	02401004 	movi	r9,64
   4cc5c:	4909c83a 	sub	r4,r9,r4
   4cc60:	290a983a 	sll	r5,r5,r4
   4cc64:	2c62b03a 	or	r17,r5,r17
   4cc68:	8822c03a 	cmpne	r17,r17,zero
   4cc6c:	89e2b03a 	or	r17,r17,r7
   4cc70:	0009883a 	mov	r4,zero
   4cc74:	003f9206 	br	4cac0 <__alt_data_end+0xfffccac0>
   4cc78:	000b883a 	mov	r5,zero
   4cc7c:	003fdc06 	br	4cbf0 <__alt_data_end+0xfffccbf0>
   4cc80:	000b883a 	mov	r5,zero
   4cc84:	003ff706 	br	4cc64 <__alt_data_end+0xfffccc64>

0004cc88 <__divdf3>:
   4cc88:	defff004 	addi	sp,sp,-64
   4cc8c:	dc800815 	stw	r18,32(sp)
   4cc90:	2824d53a 	srli	r18,r5,20
   4cc94:	dd800c15 	stw	r22,48(sp)
   4cc98:	282cd7fa 	srli	r22,r5,31
   4cc9c:	dc000615 	stw	r16,24(sp)
   4cca0:	04000434 	movhi	r16,16
   4cca4:	df000e15 	stw	fp,56(sp)
   4cca8:	dd000a15 	stw	r20,40(sp)
   4ccac:	dcc00915 	stw	r19,36(sp)
   4ccb0:	dc400715 	stw	r17,28(sp)
   4ccb4:	843fffc4 	addi	r16,r16,-1
   4ccb8:	dfc00f15 	stw	ra,60(sp)
   4ccbc:	ddc00d15 	stw	r23,52(sp)
   4ccc0:	dd400b15 	stw	r21,44(sp)
   4ccc4:	9481ffcc 	andi	r18,r18,2047
   4ccc8:	2029883a 	mov	r20,r4
   4cccc:	2027883a 	mov	r19,r4
   4ccd0:	2c22703a 	and	r17,r5,r16
   4ccd4:	b7003fcc 	andi	fp,r22,255
   4ccd8:	90005e26 	beq	r18,zero,4ce54 <__divdf3+0x1cc>
   4ccdc:	0081ffc4 	movi	r2,2047
   4cce0:	90803526 	beq	r18,r2,4cdb8 <__divdf3+0x130>
   4cce4:	8c000434 	orhi	r16,r17,16
   4cce8:	2004d77a 	srli	r2,r4,29
   4ccec:	802090fa 	slli	r16,r16,3
   4ccf0:	202690fa 	slli	r19,r4,3
   4ccf4:	94bf0044 	addi	r18,r18,-1023
   4ccf8:	80a2b03a 	or	r17,r16,r2
   4ccfc:	0029883a 	mov	r20,zero
   4cd00:	0011883a 	mov	r8,zero
   4cd04:	380ad53a 	srli	r5,r7,20
   4cd08:	382ed7fa 	srli	r23,r7,31
   4cd0c:	04000434 	movhi	r16,16
   4cd10:	843fffc4 	addi	r16,r16,-1
   4cd14:	2941ffcc 	andi	r5,r5,2047
   4cd18:	302b883a 	mov	r21,r6
   4cd1c:	3c20703a 	and	r16,r7,r16
   4cd20:	ba403fcc 	andi	r9,r23,255
   4cd24:	28006726 	beq	r5,zero,4cec4 <__divdf3+0x23c>
   4cd28:	0081ffc4 	movi	r2,2047
   4cd2c:	28805f26 	beq	r5,r2,4ceac <__divdf3+0x224>
   4cd30:	84000434 	orhi	r16,r16,16
   4cd34:	3004d77a 	srli	r2,r6,29
   4cd38:	802090fa 	slli	r16,r16,3
   4cd3c:	302a90fa 	slli	r21,r6,3
   4cd40:	297f0044 	addi	r5,r5,-1023
   4cd44:	80a0b03a 	or	r16,r16,r2
   4cd48:	000f883a 	mov	r7,zero
   4cd4c:	3d06b03a 	or	r3,r7,r20
   4cd50:	180690ba 	slli	r3,r3,2
   4cd54:	00800174 	movhi	r2,5
   4cd58:	10b35e04 	addi	r2,r2,-12936
   4cd5c:	1885883a 	add	r2,r3,r2
   4cd60:	10800017 	ldw	r2,0(r2)
   4cd64:	b5c8f03a 	xor	r4,r22,r23
   4cd68:	200d883a 	mov	r6,r4
   4cd6c:	25003fcc 	andi	r20,r4,255
   4cd70:	9165c83a 	sub	r18,r18,r5
   4cd74:	1000683a 	jmp	r2
   4cd78:	0004cfc0 	call	4cfc <__alt_mem_onchip_memory2_0-0x3b304>
   4cd7c:	0004cdf0 	cmpltui	zero,zero,4919
   4cd80:	0004cf84 	movi	zero,4926
   4cd84:	0004cdd4 	movui	zero,4919
   4cd88:	0004cf84 	movi	zero,4926
   4cd8c:	0004cf58 	cmpnei	zero,zero,4925
   4cd90:	0004cf84 	movi	zero,4926
   4cd94:	0004cdd4 	movui	zero,4919
   4cd98:	0004cdf0 	cmpltui	zero,zero,4919
   4cd9c:	0004cdf0 	cmpltui	zero,zero,4919
   4cda0:	0004cf58 	cmpnei	zero,zero,4925
   4cda4:	0004cdd4 	movui	zero,4919
   4cda8:	0004cde4 	muli	zero,zero,4919
   4cdac:	0004cde4 	muli	zero,zero,4919
   4cdb0:	0004cde4 	muli	zero,zero,4919
   4cdb4:	0004cf94 	movui	zero,4926
   4cdb8:	8904b03a 	or	r2,r17,r4
   4cdbc:	1000631e 	bne	r2,zero,4cf4c <__divdf3+0x2c4>
   4cdc0:	05000204 	movi	r20,8
   4cdc4:	0023883a 	mov	r17,zero
   4cdc8:	0027883a 	mov	r19,zero
   4cdcc:	02000084 	movi	r8,2
   4cdd0:	003fcc06 	br	4cd04 <__alt_data_end+0xfffccd04>
   4cdd4:	8023883a 	mov	r17,r16
   4cdd8:	a827883a 	mov	r19,r21
   4cddc:	4839883a 	mov	fp,r9
   4cde0:	3811883a 	mov	r8,r7
   4cde4:	00800084 	movi	r2,2
   4cde8:	4081531e 	bne	r8,r2,4d338 <__divdf3+0x6b0>
   4cdec:	e029883a 	mov	r20,fp
   4cdf0:	a180004c 	andi	r6,r20,1
   4cdf4:	0201ffc4 	movi	r8,2047
   4cdf8:	000b883a 	mov	r5,zero
   4cdfc:	0027883a 	mov	r19,zero
   4ce00:	4010953a 	slli	r8,r8,20
   4ce04:	30c03fcc 	andi	r3,r6,255
   4ce08:	04000434 	movhi	r16,16
   4ce0c:	180697fa 	slli	r3,r3,31
   4ce10:	843fffc4 	addi	r16,r16,-1
   4ce14:	2c20703a 	and	r16,r5,r16
   4ce18:	8220b03a 	or	r16,r16,r8
   4ce1c:	80c6b03a 	or	r3,r16,r3
   4ce20:	9805883a 	mov	r2,r19
   4ce24:	dfc00f17 	ldw	ra,60(sp)
   4ce28:	df000e17 	ldw	fp,56(sp)
   4ce2c:	ddc00d17 	ldw	r23,52(sp)
   4ce30:	dd800c17 	ldw	r22,48(sp)
   4ce34:	dd400b17 	ldw	r21,44(sp)
   4ce38:	dd000a17 	ldw	r20,40(sp)
   4ce3c:	dcc00917 	ldw	r19,36(sp)
   4ce40:	dc800817 	ldw	r18,32(sp)
   4ce44:	dc400717 	ldw	r17,28(sp)
   4ce48:	dc000617 	ldw	r16,24(sp)
   4ce4c:	dec01004 	addi	sp,sp,64
   4ce50:	f800283a 	ret
   4ce54:	8904b03a 	or	r2,r17,r4
   4ce58:	10003726 	beq	r2,zero,4cf38 <__divdf3+0x2b0>
   4ce5c:	88014d26 	beq	r17,zero,4d394 <__divdf3+0x70c>
   4ce60:	8809883a 	mov	r4,r17
   4ce64:	d9800215 	stw	r6,8(sp)
   4ce68:	d9c00515 	stw	r7,20(sp)
   4ce6c:	004eb840 	call	4eb84 <__clzsi2>
   4ce70:	d9800217 	ldw	r6,8(sp)
   4ce74:	d9c00517 	ldw	r7,20(sp)
   4ce78:	1007883a 	mov	r3,r2
   4ce7c:	01000a04 	movi	r4,40
   4ce80:	1cfffe04 	addi	r19,r3,-8
   4ce84:	20c9c83a 	sub	r4,r4,r3
   4ce88:	8cca983a 	sll	r5,r17,r19
   4ce8c:	a108d83a 	srl	r4,r20,r4
   4ce90:	a4e6983a 	sll	r19,r20,r19
   4ce94:	2162b03a 	or	r17,r4,r5
   4ce98:	04bf0344 	movi	r18,-1011
   4ce9c:	90e5c83a 	sub	r18,r18,r3
   4cea0:	0029883a 	mov	r20,zero
   4cea4:	0011883a 	mov	r8,zero
   4cea8:	003f9606 	br	4cd04 <__alt_data_end+0xfffccd04>
   4ceac:	8184b03a 	or	r2,r16,r6
   4ceb0:	10001f1e 	bne	r2,zero,4cf30 <__divdf3+0x2a8>
   4ceb4:	0021883a 	mov	r16,zero
   4ceb8:	002b883a 	mov	r21,zero
   4cebc:	01c00084 	movi	r7,2
   4cec0:	003fa206 	br	4cd4c <__alt_data_end+0xfffccd4c>
   4cec4:	8184b03a 	or	r2,r16,r6
   4cec8:	10001526 	beq	r2,zero,4cf20 <__divdf3+0x298>
   4cecc:	80013d26 	beq	r16,zero,4d3c4 <__divdf3+0x73c>
   4ced0:	8009883a 	mov	r4,r16
   4ced4:	d9800215 	stw	r6,8(sp)
   4ced8:	da000315 	stw	r8,12(sp)
   4cedc:	da400415 	stw	r9,16(sp)
   4cee0:	004eb840 	call	4eb84 <__clzsi2>
   4cee4:	d9800217 	ldw	r6,8(sp)
   4cee8:	da000317 	ldw	r8,12(sp)
   4ceec:	da400417 	ldw	r9,16(sp)
   4cef0:	1007883a 	mov	r3,r2
   4cef4:	01000a04 	movi	r4,40
   4cef8:	1d7ffe04 	addi	r21,r3,-8
   4cefc:	20c9c83a 	sub	r4,r4,r3
   4cf00:	8560983a 	sll	r16,r16,r21
   4cf04:	3108d83a 	srl	r4,r6,r4
   4cf08:	356a983a 	sll	r21,r6,r21
   4cf0c:	2420b03a 	or	r16,r4,r16
   4cf10:	017f0344 	movi	r5,-1011
   4cf14:	28cbc83a 	sub	r5,r5,r3
   4cf18:	000f883a 	mov	r7,zero
   4cf1c:	003f8b06 	br	4cd4c <__alt_data_end+0xfffccd4c>
   4cf20:	0021883a 	mov	r16,zero
   4cf24:	002b883a 	mov	r21,zero
   4cf28:	01c00044 	movi	r7,1
   4cf2c:	003f8706 	br	4cd4c <__alt_data_end+0xfffccd4c>
   4cf30:	01c000c4 	movi	r7,3
   4cf34:	003f8506 	br	4cd4c <__alt_data_end+0xfffccd4c>
   4cf38:	05000104 	movi	r20,4
   4cf3c:	0023883a 	mov	r17,zero
   4cf40:	0027883a 	mov	r19,zero
   4cf44:	02000044 	movi	r8,1
   4cf48:	003f6e06 	br	4cd04 <__alt_data_end+0xfffccd04>
   4cf4c:	05000304 	movi	r20,12
   4cf50:	020000c4 	movi	r8,3
   4cf54:	003f6b06 	br	4cd04 <__alt_data_end+0xfffccd04>
   4cf58:	01400434 	movhi	r5,16
   4cf5c:	000d883a 	mov	r6,zero
   4cf60:	297fffc4 	addi	r5,r5,-1
   4cf64:	04ffffc4 	movi	r19,-1
   4cf68:	0201ffc4 	movi	r8,2047
   4cf6c:	003fa406 	br	4ce00 <__alt_data_end+0xfffcce00>
   4cf70:	043f0084 	movi	r16,-1022
   4cf74:	84a1c83a 	sub	r16,r16,r18
   4cf78:	00800e04 	movi	r2,56
   4cf7c:	14014d0e 	bge	r2,r16,4d4b4 <__divdf3+0x82c>
   4cf80:	a180004c 	andi	r6,r20,1
   4cf84:	0011883a 	mov	r8,zero
   4cf88:	000b883a 	mov	r5,zero
   4cf8c:	0027883a 	mov	r19,zero
   4cf90:	003f9b06 	br	4ce00 <__alt_data_end+0xfffcce00>
   4cf94:	8880022c 	andhi	r2,r17,8
   4cf98:	1000f026 	beq	r2,zero,4d35c <__divdf3+0x6d4>
   4cf9c:	8080022c 	andhi	r2,r16,8
   4cfa0:	1000ee1e 	bne	r2,zero,4d35c <__divdf3+0x6d4>
   4cfa4:	00800434 	movhi	r2,16
   4cfa8:	81400234 	orhi	r5,r16,8
   4cfac:	10bfffc4 	addi	r2,r2,-1
   4cfb0:	b80d883a 	mov	r6,r23
   4cfb4:	288a703a 	and	r5,r5,r2
   4cfb8:	a827883a 	mov	r19,r21
   4cfbc:	003fea06 	br	4cf68 <__alt_data_end+0xfffccf68>
   4cfc0:	84411c36 	bltu	r16,r17,4d434 <__divdf3+0x7ac>
   4cfc4:	8c011a26 	beq	r17,r16,4d430 <__divdf3+0x7a8>
   4cfc8:	94bfffc4 	addi	r18,r18,-1
   4cfcc:	dcc00015 	stw	r19,0(sp)
   4cfd0:	8811883a 	mov	r8,r17
   4cfd4:	002d883a 	mov	r22,zero
   4cfd8:	a80cd63a 	srli	r6,r21,24
   4cfdc:	8020923a 	slli	r16,r16,8
   4cfe0:	a82a923a 	slli	r21,r21,8
   4cfe4:	4009883a 	mov	r4,r8
   4cfe8:	342eb03a 	or	r23,r6,r16
   4cfec:	dd400115 	stw	r21,4(sp)
   4cff0:	b82ad43a 	srli	r21,r23,16
   4cff4:	da000315 	stw	r8,12(sp)
   4cff8:	bcffffcc 	andi	r19,r23,65535
   4cffc:	a80b883a 	mov	r5,r21
   4d000:	004c3b40 	call	4c3b4 <__udivsi3>
   4d004:	1009883a 	mov	r4,r2
   4d008:	980b883a 	mov	r5,r19
   4d00c:	1023883a 	mov	r17,r2
   4d010:	004c3c40 	call	4c3c4 <__mulsi3>
   4d014:	da000317 	ldw	r8,12(sp)
   4d018:	a80b883a 	mov	r5,r21
   4d01c:	1039883a 	mov	fp,r2
   4d020:	4009883a 	mov	r4,r8
   4d024:	004c3bc0 	call	4c3bc <__umodsi3>
   4d028:	d8c00017 	ldw	r3,0(sp)
   4d02c:	1004943a 	slli	r2,r2,16
   4d030:	1810d43a 	srli	r8,r3,16
   4d034:	120eb03a 	or	r7,r2,r8
   4d038:	3f00062e 	bgeu	r7,fp,4d054 <__divdf3+0x3cc>
   4d03c:	3dcf883a 	add	r7,r7,r23
   4d040:	88bfffc4 	addi	r2,r17,-1
   4d044:	3dc10a36 	bltu	r7,r23,4d470 <__divdf3+0x7e8>
   4d048:	3f01092e 	bgeu	r7,fp,4d470 <__divdf3+0x7e8>
   4d04c:	8c7fff84 	addi	r17,r17,-2
   4d050:	3dcf883a 	add	r7,r7,r23
   4d054:	3f39c83a 	sub	fp,r7,fp
   4d058:	e009883a 	mov	r4,fp
   4d05c:	a80b883a 	mov	r5,r21
   4d060:	004c3b40 	call	4c3b4 <__udivsi3>
   4d064:	1009883a 	mov	r4,r2
   4d068:	980b883a 	mov	r5,r19
   4d06c:	1021883a 	mov	r16,r2
   4d070:	004c3c40 	call	4c3c4 <__mulsi3>
   4d074:	e009883a 	mov	r4,fp
   4d078:	a80b883a 	mov	r5,r21
   4d07c:	d8800315 	stw	r2,12(sp)
   4d080:	004c3bc0 	call	4c3bc <__umodsi3>
   4d084:	d9000017 	ldw	r4,0(sp)
   4d088:	1004943a 	slli	r2,r2,16
   4d08c:	da000317 	ldw	r8,12(sp)
   4d090:	20ffffcc 	andi	r3,r4,65535
   4d094:	10ceb03a 	or	r7,r2,r3
   4d098:	3a00062e 	bgeu	r7,r8,4d0b4 <__divdf3+0x42c>
   4d09c:	3dcf883a 	add	r7,r7,r23
   4d0a0:	80bfffc4 	addi	r2,r16,-1
   4d0a4:	3dc0f036 	bltu	r7,r23,4d468 <__divdf3+0x7e0>
   4d0a8:	3a00ef2e 	bgeu	r7,r8,4d468 <__divdf3+0x7e0>
   4d0ac:	843fff84 	addi	r16,r16,-2
   4d0b0:	3dcf883a 	add	r7,r7,r23
   4d0b4:	d8c00117 	ldw	r3,4(sp)
   4d0b8:	8822943a 	slli	r17,r17,16
   4d0bc:	3a0fc83a 	sub	r7,r7,r8
   4d0c0:	1806d43a 	srli	r3,r3,16
   4d0c4:	8462b03a 	or	r17,r16,r17
   4d0c8:	8affffcc 	andi	r11,r17,65535
   4d0cc:	d8c00015 	stw	r3,0(sp)
   4d0d0:	d8c00117 	ldw	r3,4(sp)
   4d0d4:	8820d43a 	srli	r16,r17,16
   4d0d8:	5809883a 	mov	r4,r11
   4d0dc:	1f3fffcc 	andi	fp,r3,65535
   4d0e0:	e00b883a 	mov	r5,fp
   4d0e4:	d9c00515 	stw	r7,20(sp)
   4d0e8:	dac00215 	stw	r11,8(sp)
   4d0ec:	004c3c40 	call	4c3c4 <__mulsi3>
   4d0f0:	8009883a 	mov	r4,r16
   4d0f4:	e00b883a 	mov	r5,fp
   4d0f8:	d8800415 	stw	r2,16(sp)
   4d0fc:	004c3c40 	call	4c3c4 <__mulsi3>
   4d100:	d9400017 	ldw	r5,0(sp)
   4d104:	8009883a 	mov	r4,r16
   4d108:	d8800315 	stw	r2,12(sp)
   4d10c:	004c3c40 	call	4c3c4 <__mulsi3>
   4d110:	dac00217 	ldw	r11,8(sp)
   4d114:	d9400017 	ldw	r5,0(sp)
   4d118:	d8800215 	stw	r2,8(sp)
   4d11c:	5809883a 	mov	r4,r11
   4d120:	004c3c40 	call	4c3c4 <__mulsi3>
   4d124:	da400417 	ldw	r9,16(sp)
   4d128:	da800317 	ldw	r10,12(sp)
   4d12c:	d9c00517 	ldw	r7,20(sp)
   4d130:	480ad43a 	srli	r5,r9,16
   4d134:	5085883a 	add	r2,r10,r2
   4d138:	db000217 	ldw	r12,8(sp)
   4d13c:	1151883a 	add	r8,r2,r5
   4d140:	4280022e 	bgeu	r8,r10,4d14c <__divdf3+0x4c4>
   4d144:	00800074 	movhi	r2,1
   4d148:	6099883a 	add	r12,r12,r2
   4d14c:	400ad43a 	srli	r5,r8,16
   4d150:	4010943a 	slli	r8,r8,16
   4d154:	4c3fffcc 	andi	r16,r9,65535
   4d158:	6149883a 	add	r4,r12,r5
   4d15c:	4411883a 	add	r8,r8,r16
   4d160:	3900a736 	bltu	r7,r4,4d400 <__divdf3+0x778>
   4d164:	3900c426 	beq	r7,r4,4d478 <__divdf3+0x7f0>
   4d168:	3909c83a 	sub	r4,r7,r4
   4d16c:	b221c83a 	sub	r16,r22,r8
   4d170:	b42d803a 	cmpltu	r22,r22,r16
   4d174:	25adc83a 	sub	r22,r4,r22
   4d178:	b5c0c626 	beq	r22,r23,4d494 <__divdf3+0x80c>
   4d17c:	b009883a 	mov	r4,r22
   4d180:	a80b883a 	mov	r5,r21
   4d184:	004c3b40 	call	4c3b4 <__udivsi3>
   4d188:	1009883a 	mov	r4,r2
   4d18c:	980b883a 	mov	r5,r19
   4d190:	d8800315 	stw	r2,12(sp)
   4d194:	004c3c40 	call	4c3c4 <__mulsi3>
   4d198:	a80b883a 	mov	r5,r21
   4d19c:	b009883a 	mov	r4,r22
   4d1a0:	d8800415 	stw	r2,16(sp)
   4d1a4:	004c3bc0 	call	4c3bc <__umodsi3>
   4d1a8:	1004943a 	slli	r2,r2,16
   4d1ac:	800ed43a 	srli	r7,r16,16
   4d1b0:	da400417 	ldw	r9,16(sp)
   4d1b4:	da000317 	ldw	r8,12(sp)
   4d1b8:	11cab03a 	or	r5,r2,r7
   4d1bc:	2a40062e 	bgeu	r5,r9,4d1d8 <__divdf3+0x550>
   4d1c0:	2dcb883a 	add	r5,r5,r23
   4d1c4:	40bfffc4 	addi	r2,r8,-1
   4d1c8:	2dc0b436 	bltu	r5,r23,4d49c <__divdf3+0x814>
   4d1cc:	2a40b32e 	bgeu	r5,r9,4d49c <__divdf3+0x814>
   4d1d0:	423fff84 	addi	r8,r8,-2
   4d1d4:	2dcb883a 	add	r5,r5,r23
   4d1d8:	2a6dc83a 	sub	r22,r5,r9
   4d1dc:	b009883a 	mov	r4,r22
   4d1e0:	a80b883a 	mov	r5,r21
   4d1e4:	da000315 	stw	r8,12(sp)
   4d1e8:	004c3b40 	call	4c3b4 <__udivsi3>
   4d1ec:	980b883a 	mov	r5,r19
   4d1f0:	1009883a 	mov	r4,r2
   4d1f4:	d8800415 	stw	r2,16(sp)
   4d1f8:	004c3c40 	call	4c3c4 <__mulsi3>
   4d1fc:	b009883a 	mov	r4,r22
   4d200:	a80b883a 	mov	r5,r21
   4d204:	1027883a 	mov	r19,r2
   4d208:	004c3bc0 	call	4c3bc <__umodsi3>
   4d20c:	1004943a 	slli	r2,r2,16
   4d210:	843fffcc 	andi	r16,r16,65535
   4d214:	da000317 	ldw	r8,12(sp)
   4d218:	140eb03a 	or	r7,r2,r16
   4d21c:	da400417 	ldw	r9,16(sp)
   4d220:	3cc0062e 	bgeu	r7,r19,4d23c <__divdf3+0x5b4>
   4d224:	3dcf883a 	add	r7,r7,r23
   4d228:	48bfffc4 	addi	r2,r9,-1
   4d22c:	3dc09d36 	bltu	r7,r23,4d4a4 <__divdf3+0x81c>
   4d230:	3cc09c2e 	bgeu	r7,r19,4d4a4 <__divdf3+0x81c>
   4d234:	4a7fff84 	addi	r9,r9,-2
   4d238:	3dcf883a 	add	r7,r7,r23
   4d23c:	4010943a 	slli	r8,r8,16
   4d240:	3cebc83a 	sub	r21,r7,r19
   4d244:	e00b883a 	mov	r5,fp
   4d248:	4a26b03a 	or	r19,r9,r8
   4d24c:	99ffffcc 	andi	r7,r19,65535
   4d250:	9820d43a 	srli	r16,r19,16
   4d254:	3809883a 	mov	r4,r7
   4d258:	d9c00515 	stw	r7,20(sp)
   4d25c:	004c3c40 	call	4c3c4 <__mulsi3>
   4d260:	8009883a 	mov	r4,r16
   4d264:	e00b883a 	mov	r5,fp
   4d268:	102d883a 	mov	r22,r2
   4d26c:	004c3c40 	call	4c3c4 <__mulsi3>
   4d270:	d9400017 	ldw	r5,0(sp)
   4d274:	8009883a 	mov	r4,r16
   4d278:	1039883a 	mov	fp,r2
   4d27c:	004c3c40 	call	4c3c4 <__mulsi3>
   4d280:	d9c00517 	ldw	r7,20(sp)
   4d284:	d9400017 	ldw	r5,0(sp)
   4d288:	1021883a 	mov	r16,r2
   4d28c:	3809883a 	mov	r4,r7
   4d290:	004c3c40 	call	4c3c4 <__mulsi3>
   4d294:	b008d43a 	srli	r4,r22,16
   4d298:	e085883a 	add	r2,fp,r2
   4d29c:	1109883a 	add	r4,r2,r4
   4d2a0:	2700022e 	bgeu	r4,fp,4d2ac <__divdf3+0x624>
   4d2a4:	00800074 	movhi	r2,1
   4d2a8:	80a1883a 	add	r16,r16,r2
   4d2ac:	200ad43a 	srli	r5,r4,16
   4d2b0:	2008943a 	slli	r4,r4,16
   4d2b4:	b5bfffcc 	andi	r22,r22,65535
   4d2b8:	8145883a 	add	r2,r16,r5
   4d2bc:	2589883a 	add	r4,r4,r22
   4d2c0:	a8802c36 	bltu	r21,r2,4d374 <__divdf3+0x6ec>
   4d2c4:	a880a426 	beq	r21,r2,4d558 <__divdf3+0x8d0>
   4d2c8:	9cc00054 	ori	r19,r19,1
   4d2cc:	9200ffc4 	addi	r8,r18,1023
   4d2d0:	023f270e 	bge	zero,r8,4cf70 <__alt_data_end+0xfffccf70>
   4d2d4:	988001cc 	andi	r2,r19,7
   4d2d8:	10000726 	beq	r2,zero,4d2f8 <__divdf3+0x670>
   4d2dc:	990003cc 	andi	r4,r19,15
   4d2e0:	00800104 	movi	r2,4
   4d2e4:	20800426 	beq	r4,r2,4d2f8 <__divdf3+0x670>
   4d2e8:	9885883a 	add	r2,r19,r2
   4d2ec:	14e7803a 	cmpltu	r19,r2,r19
   4d2f0:	8ce3883a 	add	r17,r17,r19
   4d2f4:	1027883a 	mov	r19,r2
   4d2f8:	8880402c 	andhi	r2,r17,256
   4d2fc:	10000426 	beq	r2,zero,4d310 <__divdf3+0x688>
   4d300:	00bfc034 	movhi	r2,65280
   4d304:	10bfffc4 	addi	r2,r2,-1
   4d308:	92010004 	addi	r8,r18,1024
   4d30c:	88a2703a 	and	r17,r17,r2
   4d310:	0081ff84 	movi	r2,2046
   4d314:	123eb616 	blt	r2,r8,4cdf0 <__alt_data_end+0xfffccdf0>
   4d318:	9826d0fa 	srli	r19,r19,3
   4d31c:	8804977a 	slli	r2,r17,29
   4d320:	8820927a 	slli	r16,r17,9
   4d324:	4201ffcc 	andi	r8,r8,2047
   4d328:	14e6b03a 	or	r19,r2,r19
   4d32c:	800ad33a 	srli	r5,r16,12
   4d330:	a180004c 	andi	r6,r20,1
   4d334:	003eb206 	br	4ce00 <__alt_data_end+0xfffcce00>
   4d338:	008000c4 	movi	r2,3
   4d33c:	4080ac26 	beq	r8,r2,4d5f0 <__divdf3+0x968>
   4d340:	00800044 	movi	r2,1
   4d344:	4080591e 	bne	r8,r2,4d4ac <__divdf3+0x824>
   4d348:	e00d883a 	mov	r6,fp
   4d34c:	0011883a 	mov	r8,zero
   4d350:	000b883a 	mov	r5,zero
   4d354:	0027883a 	mov	r19,zero
   4d358:	003ea906 	br	4ce00 <__alt_data_end+0xfffcce00>
   4d35c:	00800434 	movhi	r2,16
   4d360:	89400234 	orhi	r5,r17,8
   4d364:	10bfffc4 	addi	r2,r2,-1
   4d368:	b00d883a 	mov	r6,r22
   4d36c:	288a703a 	and	r5,r5,r2
   4d370:	003efd06 	br	4cf68 <__alt_data_end+0xfffccf68>
   4d374:	adcf883a 	add	r7,r21,r23
   4d378:	997fffc4 	addi	r5,r19,-1
   4d37c:	3dc0412e 	bgeu	r7,r23,4d484 <__divdf3+0x7fc>
   4d380:	2827883a 	mov	r19,r5
   4d384:	38bfd01e 	bne	r7,r2,4d2c8 <__alt_data_end+0xfffcd2c8>
   4d388:	d8c00117 	ldw	r3,4(sp)
   4d38c:	193fce1e 	bne	r3,r4,4d2c8 <__alt_data_end+0xfffcd2c8>
   4d390:	003fce06 	br	4d2cc <__alt_data_end+0xfffcd2cc>
   4d394:	d9800215 	stw	r6,8(sp)
   4d398:	d9c00515 	stw	r7,20(sp)
   4d39c:	004eb840 	call	4eb84 <__clzsi2>
   4d3a0:	10c00804 	addi	r3,r2,32
   4d3a4:	010009c4 	movi	r4,39
   4d3a8:	d9800217 	ldw	r6,8(sp)
   4d3ac:	d9c00517 	ldw	r7,20(sp)
   4d3b0:	20feb20e 	bge	r4,r3,4ce7c <__alt_data_end+0xfffcce7c>
   4d3b4:	117ffe04 	addi	r5,r2,-8
   4d3b8:	a162983a 	sll	r17,r20,r5
   4d3bc:	0027883a 	mov	r19,zero
   4d3c0:	003eb506 	br	4ce98 <__alt_data_end+0xfffcce98>
   4d3c4:	3009883a 	mov	r4,r6
   4d3c8:	d9800215 	stw	r6,8(sp)
   4d3cc:	da000315 	stw	r8,12(sp)
   4d3d0:	da400415 	stw	r9,16(sp)
   4d3d4:	004eb840 	call	4eb84 <__clzsi2>
   4d3d8:	10c00804 	addi	r3,r2,32
   4d3dc:	010009c4 	movi	r4,39
   4d3e0:	d9800217 	ldw	r6,8(sp)
   4d3e4:	da000317 	ldw	r8,12(sp)
   4d3e8:	da400417 	ldw	r9,16(sp)
   4d3ec:	20fec10e 	bge	r4,r3,4cef4 <__alt_data_end+0xfffccef4>
   4d3f0:	10bffe04 	addi	r2,r2,-8
   4d3f4:	a8a0983a 	sll	r16,r21,r2
   4d3f8:	002b883a 	mov	r21,zero
   4d3fc:	003ec406 	br	4cf10 <__alt_data_end+0xfffccf10>
   4d400:	d8c00117 	ldw	r3,4(sp)
   4d404:	b0ed883a 	add	r22,r22,r3
   4d408:	b0c5803a 	cmpltu	r2,r22,r3
   4d40c:	15c5883a 	add	r2,r2,r23
   4d410:	11cf883a 	add	r7,r2,r7
   4d414:	88bfffc4 	addi	r2,r17,-1
   4d418:	b9c00d2e 	bgeu	r23,r7,4d450 <__divdf3+0x7c8>
   4d41c:	39003f36 	bltu	r7,r4,4d51c <__divdf3+0x894>
   4d420:	21c06a26 	beq	r4,r7,4d5cc <__divdf3+0x944>
   4d424:	3909c83a 	sub	r4,r7,r4
   4d428:	1023883a 	mov	r17,r2
   4d42c:	003f4f06 	br	4d16c <__alt_data_end+0xfffcd16c>
   4d430:	9d7ee536 	bltu	r19,r21,4cfc8 <__alt_data_end+0xfffccfc8>
   4d434:	982ed07a 	srli	r23,r19,1
   4d438:	880497fa 	slli	r2,r17,31
   4d43c:	8810d07a 	srli	r8,r17,1
   4d440:	982c97fa 	slli	r22,r19,31
   4d444:	b884b03a 	or	r2,r23,r2
   4d448:	d8800015 	stw	r2,0(sp)
   4d44c:	003ee206 	br	4cfd8 <__alt_data_end+0xfffccfd8>
   4d450:	3dfff41e 	bne	r7,r23,4d424 <__alt_data_end+0xfffcd424>
   4d454:	d8c00117 	ldw	r3,4(sp)
   4d458:	b0fff02e 	bgeu	r22,r3,4d41c <__alt_data_end+0xfffcd41c>
   4d45c:	b909c83a 	sub	r4,r23,r4
   4d460:	1023883a 	mov	r17,r2
   4d464:	003f4106 	br	4d16c <__alt_data_end+0xfffcd16c>
   4d468:	1021883a 	mov	r16,r2
   4d46c:	003f1106 	br	4d0b4 <__alt_data_end+0xfffcd0b4>
   4d470:	1023883a 	mov	r17,r2
   4d474:	003ef706 	br	4d054 <__alt_data_end+0xfffcd054>
   4d478:	b23fe136 	bltu	r22,r8,4d400 <__alt_data_end+0xfffcd400>
   4d47c:	0009883a 	mov	r4,zero
   4d480:	003f3a06 	br	4d16c <__alt_data_end+0xfffcd16c>
   4d484:	38802c36 	bltu	r7,r2,4d538 <__divdf3+0x8b0>
   4d488:	11c05326 	beq	r2,r7,4d5d8 <__divdf3+0x950>
   4d48c:	2827883a 	mov	r19,r5
   4d490:	003f8d06 	br	4d2c8 <__alt_data_end+0xfffcd2c8>
   4d494:	04ffffc4 	movi	r19,-1
   4d498:	003f8c06 	br	4d2cc <__alt_data_end+0xfffcd2cc>
   4d49c:	1011883a 	mov	r8,r2
   4d4a0:	003f4d06 	br	4d1d8 <__alt_data_end+0xfffcd1d8>
   4d4a4:	1013883a 	mov	r9,r2
   4d4a8:	003f6406 	br	4d23c <__alt_data_end+0xfffcd23c>
   4d4ac:	e029883a 	mov	r20,fp
   4d4b0:	003f8606 	br	4d2cc <__alt_data_end+0xfffcd2cc>
   4d4b4:	008007c4 	movi	r2,31
   4d4b8:	14002a16 	blt	r2,r16,4d564 <__divdf3+0x8dc>
   4d4bc:	91410784 	addi	r5,r18,1054
   4d4c0:	9c0cd83a 	srl	r6,r19,r16
   4d4c4:	8948983a 	sll	r4,r17,r5
   4d4c8:	9944983a 	sll	r2,r19,r5
   4d4cc:	8c20d83a 	srl	r16,r17,r16
   4d4d0:	3108b03a 	or	r4,r6,r4
   4d4d4:	1004c03a 	cmpne	r2,r2,zero
   4d4d8:	2084b03a 	or	r2,r4,r2
   4d4dc:	110001cc 	andi	r4,r2,7
   4d4e0:	20000726 	beq	r4,zero,4d500 <__divdf3+0x878>
   4d4e4:	114003cc 	andi	r5,r2,15
   4d4e8:	01000104 	movi	r4,4
   4d4ec:	29000426 	beq	r5,r4,4d500 <__divdf3+0x878>
   4d4f0:	11000104 	addi	r4,r2,4
   4d4f4:	2085803a 	cmpltu	r2,r4,r2
   4d4f8:	80a1883a 	add	r16,r16,r2
   4d4fc:	2005883a 	mov	r2,r4
   4d500:	8100202c 	andhi	r4,r16,128
   4d504:	20002d26 	beq	r4,zero,4d5bc <__divdf3+0x934>
   4d508:	a180004c 	andi	r6,r20,1
   4d50c:	02000044 	movi	r8,1
   4d510:	000b883a 	mov	r5,zero
   4d514:	0027883a 	mov	r19,zero
   4d518:	003e3906 	br	4ce00 <__alt_data_end+0xfffcce00>
   4d51c:	d8c00117 	ldw	r3,4(sp)
   4d520:	8c7fff84 	addi	r17,r17,-2
   4d524:	b0ed883a 	add	r22,r22,r3
   4d528:	b0c5803a 	cmpltu	r2,r22,r3
   4d52c:	15c5883a 	add	r2,r2,r23
   4d530:	11cf883a 	add	r7,r2,r7
   4d534:	003f0c06 	br	4d168 <__alt_data_end+0xfffcd168>
   4d538:	d8c00117 	ldw	r3,4(sp)
   4d53c:	997fff84 	addi	r5,r19,-2
   4d540:	18d1883a 	add	r8,r3,r3
   4d544:	40c7803a 	cmpltu	r3,r8,r3
   4d548:	1dcd883a 	add	r6,r3,r23
   4d54c:	398f883a 	add	r7,r7,r6
   4d550:	da000115 	stw	r8,4(sp)
   4d554:	003f8a06 	br	4d380 <__alt_data_end+0xfffcd380>
   4d558:	203f861e 	bne	r4,zero,4d374 <__alt_data_end+0xfffcd374>
   4d55c:	d8000115 	stw	zero,4(sp)
   4d560:	003f8906 	br	4d388 <__alt_data_end+0xfffcd388>
   4d564:	00bef884 	movi	r2,-1054
   4d568:	1485c83a 	sub	r2,r2,r18
   4d56c:	01000804 	movi	r4,32
   4d570:	8884d83a 	srl	r2,r17,r2
   4d574:	81001c26 	beq	r16,r4,4d5e8 <__divdf3+0x960>
   4d578:	91010f84 	addi	r4,r18,1086
   4d57c:	8908983a 	sll	r4,r17,r4
   4d580:	24c8b03a 	or	r4,r4,r19
   4d584:	2008c03a 	cmpne	r4,r4,zero
   4d588:	2084b03a 	or	r2,r4,r2
   4d58c:	140001cc 	andi	r16,r2,7
   4d590:	8000061e 	bne	r16,zero,4d5ac <__divdf3+0x924>
   4d594:	000b883a 	mov	r5,zero
   4d598:	1004d0fa 	srli	r2,r2,3
   4d59c:	a180004c 	andi	r6,r20,1
   4d5a0:	0011883a 	mov	r8,zero
   4d5a4:	1426b03a 	or	r19,r2,r16
   4d5a8:	003e1506 	br	4ce00 <__alt_data_end+0xfffcce00>
   4d5ac:	114003cc 	andi	r5,r2,15
   4d5b0:	01000104 	movi	r4,4
   4d5b4:	0021883a 	mov	r16,zero
   4d5b8:	293fcd1e 	bne	r5,r4,4d4f0 <__alt_data_end+0xfffcd4f0>
   4d5bc:	800a927a 	slli	r5,r16,9
   4d5c0:	8020977a 	slli	r16,r16,29
   4d5c4:	280ad33a 	srli	r5,r5,12
   4d5c8:	003ff306 	br	4d598 <__alt_data_end+0xfffcd598>
   4d5cc:	b23fd336 	bltu	r22,r8,4d51c <__alt_data_end+0xfffcd51c>
   4d5d0:	1023883a 	mov	r17,r2
   4d5d4:	003fa906 	br	4d47c <__alt_data_end+0xfffcd47c>
   4d5d8:	d8c00117 	ldw	r3,4(sp)
   4d5dc:	193fd636 	bltu	r3,r4,4d538 <__alt_data_end+0xfffcd538>
   4d5e0:	2827883a 	mov	r19,r5
   4d5e4:	003f6806 	br	4d388 <__alt_data_end+0xfffcd388>
   4d5e8:	0009883a 	mov	r4,zero
   4d5ec:	003fe406 	br	4d580 <__alt_data_end+0xfffcd580>
   4d5f0:	00800434 	movhi	r2,16
   4d5f4:	89400234 	orhi	r5,r17,8
   4d5f8:	10bfffc4 	addi	r2,r2,-1
   4d5fc:	e00d883a 	mov	r6,fp
   4d600:	288a703a 	and	r5,r5,r2
   4d604:	003e5806 	br	4cf68 <__alt_data_end+0xfffccf68>

0004d608 <__eqdf2>:
   4d608:	2804d53a 	srli	r2,r5,20
   4d60c:	3806d53a 	srli	r3,r7,20
   4d610:	02000434 	movhi	r8,16
   4d614:	423fffc4 	addi	r8,r8,-1
   4d618:	1081ffcc 	andi	r2,r2,2047
   4d61c:	0241ffc4 	movi	r9,2047
   4d620:	2a14703a 	and	r10,r5,r8
   4d624:	18c1ffcc 	andi	r3,r3,2047
   4d628:	3a10703a 	and	r8,r7,r8
   4d62c:	280ad7fa 	srli	r5,r5,31
   4d630:	380ed7fa 	srli	r7,r7,31
   4d634:	12400f26 	beq	r2,r9,4d674 <__eqdf2+0x6c>
   4d638:	0241ffc4 	movi	r9,2047
   4d63c:	1a400326 	beq	r3,r9,4d64c <__eqdf2+0x44>
   4d640:	10c00526 	beq	r2,r3,4d658 <__eqdf2+0x50>
   4d644:	00800044 	movi	r2,1
   4d648:	f800283a 	ret
   4d64c:	4192b03a 	or	r9,r8,r6
   4d650:	483ffc1e 	bne	r9,zero,4d644 <__alt_data_end+0xfffcd644>
   4d654:	10fffb1e 	bne	r2,r3,4d644 <__alt_data_end+0xfffcd644>
   4d658:	523ffa1e 	bne	r10,r8,4d644 <__alt_data_end+0xfffcd644>
   4d65c:	21bff91e 	bne	r4,r6,4d644 <__alt_data_end+0xfffcd644>
   4d660:	29c00826 	beq	r5,r7,4d684 <__eqdf2+0x7c>
   4d664:	103ff71e 	bne	r2,zero,4d644 <__alt_data_end+0xfffcd644>
   4d668:	5104b03a 	or	r2,r10,r4
   4d66c:	1004c03a 	cmpne	r2,r2,zero
   4d670:	f800283a 	ret
   4d674:	5112b03a 	or	r9,r10,r4
   4d678:	483fef26 	beq	r9,zero,4d638 <__alt_data_end+0xfffcd638>
   4d67c:	00800044 	movi	r2,1
   4d680:	f800283a 	ret
   4d684:	0005883a 	mov	r2,zero
   4d688:	f800283a 	ret

0004d68c <__gedf2>:
   4d68c:	2804d53a 	srli	r2,r5,20
   4d690:	3806d53a 	srli	r3,r7,20
   4d694:	02000434 	movhi	r8,16
   4d698:	423fffc4 	addi	r8,r8,-1
   4d69c:	0241ffc4 	movi	r9,2047
   4d6a0:	1081ffcc 	andi	r2,r2,2047
   4d6a4:	2a14703a 	and	r10,r5,r8
   4d6a8:	1a46703a 	and	r3,r3,r9
   4d6ac:	3a10703a 	and	r8,r7,r8
   4d6b0:	280ad7fa 	srli	r5,r5,31
   4d6b4:	380ed7fa 	srli	r7,r7,31
   4d6b8:	12400b26 	beq	r2,r9,4d6e8 <__gedf2+0x5c>
   4d6bc:	1a401626 	beq	r3,r9,4d718 <__gedf2+0x8c>
   4d6c0:	10000c1e 	bne	r2,zero,4d6f4 <__gedf2+0x68>
   4d6c4:	5112b03a 	or	r9,r10,r4
   4d6c8:	4813003a 	cmpeq	r9,r9,zero
   4d6cc:	4817883a 	mov	r11,r9
   4d6d0:	18000c1e 	bne	r3,zero,4d704 <__gedf2+0x78>
   4d6d4:	4198b03a 	or	r12,r8,r6
   4d6d8:	60000a1e 	bne	r12,zero,4d704 <__gedf2+0x78>
   4d6dc:	48001326 	beq	r9,zero,4d72c <__gedf2+0xa0>
   4d6e0:	0005883a 	mov	r2,zero
   4d6e4:	f800283a 	ret
   4d6e8:	5112b03a 	or	r9,r10,r4
   4d6ec:	4800191e 	bne	r9,zero,4d754 <__gedf2+0xc8>
   4d6f0:	18800926 	beq	r3,r2,4d718 <__gedf2+0x8c>
   4d6f4:	18000b1e 	bne	r3,zero,4d724 <__gedf2+0x98>
   4d6f8:	4192b03a 	or	r9,r8,r6
   4d6fc:	0017883a 	mov	r11,zero
   4d700:	48000a26 	beq	r9,zero,4d72c <__gedf2+0xa0>
   4d704:	39c03fcc 	andi	r7,r7,255
   4d708:	58000726 	beq	r11,zero,4d728 <__gedf2+0x9c>
   4d70c:	3800081e 	bne	r7,zero,4d730 <__gedf2+0xa4>
   4d710:	00bfffc4 	movi	r2,-1
   4d714:	f800283a 	ret
   4d718:	4192b03a 	or	r9,r8,r6
   4d71c:	48000d1e 	bne	r9,zero,4d754 <__gedf2+0xc8>
   4d720:	103fe826 	beq	r2,zero,4d6c4 <__alt_data_end+0xfffcd6c4>
   4d724:	39c03fcc 	andi	r7,r7,255
   4d728:	29c00326 	beq	r5,r7,4d738 <__gedf2+0xac>
   4d72c:	283ff81e 	bne	r5,zero,4d710 <__alt_data_end+0xfffcd710>
   4d730:	00800044 	movi	r2,1
   4d734:	f800283a 	ret
   4d738:	18bffc16 	blt	r3,r2,4d72c <__alt_data_end+0xfffcd72c>
   4d73c:	10c00316 	blt	r2,r3,4d74c <__gedf2+0xc0>
   4d740:	42bffa36 	bltu	r8,r10,4d72c <__alt_data_end+0xfffcd72c>
   4d744:	52000526 	beq	r10,r8,4d75c <__gedf2+0xd0>
   4d748:	523fe52e 	bgeu	r10,r8,4d6e0 <__alt_data_end+0xfffcd6e0>
   4d74c:	283ff026 	beq	r5,zero,4d710 <__alt_data_end+0xfffcd710>
   4d750:	003ff706 	br	4d730 <__alt_data_end+0xfffcd730>
   4d754:	00bfff84 	movi	r2,-2
   4d758:	f800283a 	ret
   4d75c:	313ff336 	bltu	r6,r4,4d72c <__alt_data_end+0xfffcd72c>
   4d760:	21bfdf2e 	bgeu	r4,r6,4d6e0 <__alt_data_end+0xfffcd6e0>
   4d764:	283fea26 	beq	r5,zero,4d710 <__alt_data_end+0xfffcd710>
   4d768:	003ff106 	br	4d730 <__alt_data_end+0xfffcd730>

0004d76c <__ledf2>:
   4d76c:	2804d53a 	srli	r2,r5,20
   4d770:	3810d53a 	srli	r8,r7,20
   4d774:	00c00434 	movhi	r3,16
   4d778:	18ffffc4 	addi	r3,r3,-1
   4d77c:	0241ffc4 	movi	r9,2047
   4d780:	1081ffcc 	andi	r2,r2,2047
   4d784:	28d4703a 	and	r10,r5,r3
   4d788:	4250703a 	and	r8,r8,r9
   4d78c:	38c6703a 	and	r3,r7,r3
   4d790:	280ad7fa 	srli	r5,r5,31
   4d794:	380ed7fa 	srli	r7,r7,31
   4d798:	12400b26 	beq	r2,r9,4d7c8 <__ledf2+0x5c>
   4d79c:	42401926 	beq	r8,r9,4d804 <__ledf2+0x98>
   4d7a0:	10000c1e 	bne	r2,zero,4d7d4 <__ledf2+0x68>
   4d7a4:	5112b03a 	or	r9,r10,r4
   4d7a8:	4813003a 	cmpeq	r9,r9,zero
   4d7ac:	4817883a 	mov	r11,r9
   4d7b0:	40000f26 	beq	r8,zero,4d7f0 <__ledf2+0x84>
   4d7b4:	39c03fcc 	andi	r7,r7,255
   4d7b8:	58001826 	beq	r11,zero,4d81c <__ledf2+0xb0>
   4d7bc:	38000a1e 	bne	r7,zero,4d7e8 <__ledf2+0x7c>
   4d7c0:	00bfffc4 	movi	r2,-1
   4d7c4:	f800283a 	ret
   4d7c8:	5112b03a 	or	r9,r10,r4
   4d7cc:	48000f1e 	bne	r9,zero,4d80c <__ledf2+0xa0>
   4d7d0:	40800c26 	beq	r8,r2,4d804 <__ledf2+0x98>
   4d7d4:	4000101e 	bne	r8,zero,4d818 <__ledf2+0xac>
   4d7d8:	1992b03a 	or	r9,r3,r6
   4d7dc:	0017883a 	mov	r11,zero
   4d7e0:	483ff41e 	bne	r9,zero,4d7b4 <__alt_data_end+0xfffcd7b4>
   4d7e4:	283ff61e 	bne	r5,zero,4d7c0 <__alt_data_end+0xfffcd7c0>
   4d7e8:	00800044 	movi	r2,1
   4d7ec:	f800283a 	ret
   4d7f0:	1998b03a 	or	r12,r3,r6
   4d7f4:	603fef1e 	bne	r12,zero,4d7b4 <__alt_data_end+0xfffcd7b4>
   4d7f8:	483ffa26 	beq	r9,zero,4d7e4 <__alt_data_end+0xfffcd7e4>
   4d7fc:	0005883a 	mov	r2,zero
   4d800:	f800283a 	ret
   4d804:	1992b03a 	or	r9,r3,r6
   4d808:	48000226 	beq	r9,zero,4d814 <__ledf2+0xa8>
   4d80c:	00800084 	movi	r2,2
   4d810:	f800283a 	ret
   4d814:	103fe326 	beq	r2,zero,4d7a4 <__alt_data_end+0xfffcd7a4>
   4d818:	39c03fcc 	andi	r7,r7,255
   4d81c:	29fff11e 	bne	r5,r7,4d7e4 <__alt_data_end+0xfffcd7e4>
   4d820:	40bff016 	blt	r8,r2,4d7e4 <__alt_data_end+0xfffcd7e4>
   4d824:	12000316 	blt	r2,r8,4d834 <__ledf2+0xc8>
   4d828:	1abfee36 	bltu	r3,r10,4d7e4 <__alt_data_end+0xfffcd7e4>
   4d82c:	50c00326 	beq	r10,r3,4d83c <__ledf2+0xd0>
   4d830:	50fff22e 	bgeu	r10,r3,4d7fc <__alt_data_end+0xfffcd7fc>
   4d834:	283fe226 	beq	r5,zero,4d7c0 <__alt_data_end+0xfffcd7c0>
   4d838:	003feb06 	br	4d7e8 <__alt_data_end+0xfffcd7e8>
   4d83c:	313fe936 	bltu	r6,r4,4d7e4 <__alt_data_end+0xfffcd7e4>
   4d840:	21bfee2e 	bgeu	r4,r6,4d7fc <__alt_data_end+0xfffcd7fc>
   4d844:	283fde26 	beq	r5,zero,4d7c0 <__alt_data_end+0xfffcd7c0>
   4d848:	003fe706 	br	4d7e8 <__alt_data_end+0xfffcd7e8>

0004d84c <__muldf3>:
   4d84c:	deffee04 	addi	sp,sp,-72
   4d850:	dd000c15 	stw	r20,48(sp)
   4d854:	2828d53a 	srli	r20,r5,20
   4d858:	dd400d15 	stw	r21,52(sp)
   4d85c:	282ad7fa 	srli	r21,r5,31
   4d860:	dc000815 	stw	r16,32(sp)
   4d864:	04000434 	movhi	r16,16
   4d868:	ddc00f15 	stw	r23,60(sp)
   4d86c:	dcc00b15 	stw	r19,44(sp)
   4d870:	dc800a15 	stw	r18,40(sp)
   4d874:	843fffc4 	addi	r16,r16,-1
   4d878:	dfc01115 	stw	ra,68(sp)
   4d87c:	df001015 	stw	fp,64(sp)
   4d880:	dd800e15 	stw	r22,56(sp)
   4d884:	dc400915 	stw	r17,36(sp)
   4d888:	a501ffcc 	andi	r20,r20,2047
   4d88c:	2025883a 	mov	r18,r4
   4d890:	202f883a 	mov	r23,r4
   4d894:	2c20703a 	and	r16,r5,r16
   4d898:	a827883a 	mov	r19,r21
   4d89c:	aa403fcc 	andi	r9,r21,255
   4d8a0:	a0005926 	beq	r20,zero,4da08 <__muldf3+0x1bc>
   4d8a4:	0081ffc4 	movi	r2,2047
   4d8a8:	a0803426 	beq	r20,r2,4d97c <__muldf3+0x130>
   4d8ac:	84000434 	orhi	r16,r16,16
   4d8b0:	2004d77a 	srli	r2,r4,29
   4d8b4:	802090fa 	slli	r16,r16,3
   4d8b8:	202e90fa 	slli	r23,r4,3
   4d8bc:	a53f0044 	addi	r20,r20,-1023
   4d8c0:	80a0b03a 	or	r16,r16,r2
   4d8c4:	000b883a 	mov	r5,zero
   4d8c8:	0039883a 	mov	fp,zero
   4d8cc:	3806d53a 	srli	r3,r7,20
   4d8d0:	382cd7fa 	srli	r22,r7,31
   4d8d4:	00800434 	movhi	r2,16
   4d8d8:	10bfffc4 	addi	r2,r2,-1
   4d8dc:	18c1ffcc 	andi	r3,r3,2047
   4d8e0:	3025883a 	mov	r18,r6
   4d8e4:	38a2703a 	and	r17,r7,r2
   4d8e8:	b2803fcc 	andi	r10,r22,255
   4d8ec:	18006426 	beq	r3,zero,4da80 <__muldf3+0x234>
   4d8f0:	0081ffc4 	movi	r2,2047
   4d8f4:	18805c26 	beq	r3,r2,4da68 <__muldf3+0x21c>
   4d8f8:	8c400434 	orhi	r17,r17,16
   4d8fc:	3004d77a 	srli	r2,r6,29
   4d900:	882290fa 	slli	r17,r17,3
   4d904:	302490fa 	slli	r18,r6,3
   4d908:	18ff0044 	addi	r3,r3,-1023
   4d90c:	88a2b03a 	or	r17,r17,r2
   4d910:	000f883a 	mov	r7,zero
   4d914:	394ab03a 	or	r5,r7,r5
   4d918:	280a90ba 	slli	r5,r5,2
   4d91c:	00800174 	movhi	r2,5
   4d920:	10b64f04 	addi	r2,r2,-9924
   4d924:	288b883a 	add	r5,r5,r2
   4d928:	28800017 	ldw	r2,0(r5)
   4d92c:	a0c7883a 	add	r3,r20,r3
   4d930:	b54cf03a 	xor	r6,r22,r21
   4d934:	1a000044 	addi	r8,r3,1
   4d938:	1000683a 	jmp	r2
   4d93c:	0004db80 	call	4db8 <__alt_mem_onchip_memory2_0-0x3b248>
   4d940:	0004db6c 	andhi	zero,zero,4973
   4d944:	0004db6c 	andhi	zero,zero,4973
   4d948:	0004db58 	cmpnei	zero,zero,4973
   4d94c:	0004d998 	cmpnei	zero,zero,4966
   4d950:	0004d998 	cmpnei	zero,zero,4966
   4d954:	0004db40 	call	4db4 <__alt_mem_onchip_memory2_0-0x3b24c>
   4d958:	0004db58 	cmpnei	zero,zero,4973
   4d95c:	0004d998 	cmpnei	zero,zero,4966
   4d960:	0004db40 	call	4db4 <__alt_mem_onchip_memory2_0-0x3b24c>
   4d964:	0004d998 	cmpnei	zero,zero,4966
   4d968:	0004db58 	cmpnei	zero,zero,4973
   4d96c:	0004d99c 	xori	zero,zero,4966
   4d970:	0004d99c 	xori	zero,zero,4966
   4d974:	0004d99c 	xori	zero,zero,4966
   4d978:	0004debc 	xorhi	zero,zero,4986
   4d97c:	8104b03a 	or	r2,r16,r4
   4d980:	10006c1e 	bne	r2,zero,4db34 <__muldf3+0x2e8>
   4d984:	01400204 	movi	r5,8
   4d988:	0021883a 	mov	r16,zero
   4d98c:	002f883a 	mov	r23,zero
   4d990:	07000084 	movi	fp,2
   4d994:	003fcd06 	br	4d8cc <__alt_data_end+0xfffcd8cc>
   4d998:	3013883a 	mov	r9,r6
   4d99c:	00800084 	movi	r2,2
   4d9a0:	e080501e 	bne	fp,r2,4dae4 <__muldf3+0x298>
   4d9a4:	4cc0004c 	andi	r19,r9,1
   4d9a8:	0101ffc4 	movi	r4,2047
   4d9ac:	0021883a 	mov	r16,zero
   4d9b0:	002f883a 	mov	r23,zero
   4d9b4:	2008953a 	slli	r4,r4,20
   4d9b8:	98c03fcc 	andi	r3,r19,255
   4d9bc:	04400434 	movhi	r17,16
   4d9c0:	8c7fffc4 	addi	r17,r17,-1
   4d9c4:	180697fa 	slli	r3,r3,31
   4d9c8:	8460703a 	and	r16,r16,r17
   4d9cc:	8120b03a 	or	r16,r16,r4
   4d9d0:	80c6b03a 	or	r3,r16,r3
   4d9d4:	b805883a 	mov	r2,r23
   4d9d8:	dfc01117 	ldw	ra,68(sp)
   4d9dc:	df001017 	ldw	fp,64(sp)
   4d9e0:	ddc00f17 	ldw	r23,60(sp)
   4d9e4:	dd800e17 	ldw	r22,56(sp)
   4d9e8:	dd400d17 	ldw	r21,52(sp)
   4d9ec:	dd000c17 	ldw	r20,48(sp)
   4d9f0:	dcc00b17 	ldw	r19,44(sp)
   4d9f4:	dc800a17 	ldw	r18,40(sp)
   4d9f8:	dc400917 	ldw	r17,36(sp)
   4d9fc:	dc000817 	ldw	r16,32(sp)
   4da00:	dec01204 	addi	sp,sp,72
   4da04:	f800283a 	ret
   4da08:	8104b03a 	or	r2,r16,r4
   4da0c:	10004426 	beq	r2,zero,4db20 <__muldf3+0x2d4>
   4da10:	80014b26 	beq	r16,zero,4df40 <__muldf3+0x6f4>
   4da14:	8009883a 	mov	r4,r16
   4da18:	d9800715 	stw	r6,28(sp)
   4da1c:	d9c00215 	stw	r7,8(sp)
   4da20:	da400415 	stw	r9,16(sp)
   4da24:	004eb840 	call	4eb84 <__clzsi2>
   4da28:	d9800717 	ldw	r6,28(sp)
   4da2c:	d9c00217 	ldw	r7,8(sp)
   4da30:	da400417 	ldw	r9,16(sp)
   4da34:	1007883a 	mov	r3,r2
   4da38:	01000a04 	movi	r4,40
   4da3c:	1dfffe04 	addi	r23,r3,-8
   4da40:	20c9c83a 	sub	r4,r4,r3
   4da44:	85e0983a 	sll	r16,r16,r23
   4da48:	9108d83a 	srl	r4,r18,r4
   4da4c:	95ee983a 	sll	r23,r18,r23
   4da50:	2420b03a 	or	r16,r4,r16
   4da54:	053f0344 	movi	r20,-1011
   4da58:	a0e9c83a 	sub	r20,r20,r3
   4da5c:	000b883a 	mov	r5,zero
   4da60:	0039883a 	mov	fp,zero
   4da64:	003f9906 	br	4d8cc <__alt_data_end+0xfffcd8cc>
   4da68:	8984b03a 	or	r2,r17,r6
   4da6c:	10002a1e 	bne	r2,zero,4db18 <__muldf3+0x2cc>
   4da70:	0023883a 	mov	r17,zero
   4da74:	0025883a 	mov	r18,zero
   4da78:	01c00084 	movi	r7,2
   4da7c:	003fa506 	br	4d914 <__alt_data_end+0xfffcd914>
   4da80:	8984b03a 	or	r2,r17,r6
   4da84:	10002026 	beq	r2,zero,4db08 <__muldf3+0x2bc>
   4da88:	88011c26 	beq	r17,zero,4defc <__muldf3+0x6b0>
   4da8c:	8809883a 	mov	r4,r17
   4da90:	d9400215 	stw	r5,8(sp)
   4da94:	d9800715 	stw	r6,28(sp)
   4da98:	da400415 	stw	r9,16(sp)
   4da9c:	da800315 	stw	r10,12(sp)
   4daa0:	004eb840 	call	4eb84 <__clzsi2>
   4daa4:	d9400217 	ldw	r5,8(sp)
   4daa8:	d9800717 	ldw	r6,28(sp)
   4daac:	da400417 	ldw	r9,16(sp)
   4dab0:	da800317 	ldw	r10,12(sp)
   4dab4:	1007883a 	mov	r3,r2
   4dab8:	01000a04 	movi	r4,40
   4dabc:	1cbffe04 	addi	r18,r3,-8
   4dac0:	20c9c83a 	sub	r4,r4,r3
   4dac4:	8ca2983a 	sll	r17,r17,r18
   4dac8:	3108d83a 	srl	r4,r6,r4
   4dacc:	34a4983a 	sll	r18,r6,r18
   4dad0:	2462b03a 	or	r17,r4,r17
   4dad4:	00bf0344 	movi	r2,-1011
   4dad8:	10c7c83a 	sub	r3,r2,r3
   4dadc:	000f883a 	mov	r7,zero
   4dae0:	003f8c06 	br	4d914 <__alt_data_end+0xfffcd914>
   4dae4:	008000c4 	movi	r2,3
   4dae8:	e0816d26 	beq	fp,r2,4e0a0 <__muldf3+0x854>
   4daec:	00800044 	movi	r2,1
   4daf0:	e081321e 	bne	fp,r2,4dfbc <__muldf3+0x770>
   4daf4:	48a6703a 	and	r19,r9,r2
   4daf8:	0009883a 	mov	r4,zero
   4dafc:	0021883a 	mov	r16,zero
   4db00:	002f883a 	mov	r23,zero
   4db04:	003fab06 	br	4d9b4 <__alt_data_end+0xfffcd9b4>
   4db08:	0023883a 	mov	r17,zero
   4db0c:	0025883a 	mov	r18,zero
   4db10:	01c00044 	movi	r7,1
   4db14:	003f7f06 	br	4d914 <__alt_data_end+0xfffcd914>
   4db18:	01c000c4 	movi	r7,3
   4db1c:	003f7d06 	br	4d914 <__alt_data_end+0xfffcd914>
   4db20:	01400104 	movi	r5,4
   4db24:	0021883a 	mov	r16,zero
   4db28:	002f883a 	mov	r23,zero
   4db2c:	07000044 	movi	fp,1
   4db30:	003f6606 	br	4d8cc <__alt_data_end+0xfffcd8cc>
   4db34:	01400304 	movi	r5,12
   4db38:	070000c4 	movi	fp,3
   4db3c:	003f6306 	br	4d8cc <__alt_data_end+0xfffcd8cc>
   4db40:	04000434 	movhi	r16,16
   4db44:	0027883a 	mov	r19,zero
   4db48:	843fffc4 	addi	r16,r16,-1
   4db4c:	05ffffc4 	movi	r23,-1
   4db50:	0101ffc4 	movi	r4,2047
   4db54:	003f9706 	br	4d9b4 <__alt_data_end+0xfffcd9b4>
   4db58:	8821883a 	mov	r16,r17
   4db5c:	902f883a 	mov	r23,r18
   4db60:	5013883a 	mov	r9,r10
   4db64:	3839883a 	mov	fp,r7
   4db68:	003f8c06 	br	4d99c <__alt_data_end+0xfffcd99c>
   4db6c:	8821883a 	mov	r16,r17
   4db70:	902f883a 	mov	r23,r18
   4db74:	3013883a 	mov	r9,r6
   4db78:	3839883a 	mov	fp,r7
   4db7c:	003f8706 	br	4d99c <__alt_data_end+0xfffcd99c>
   4db80:	b82ad43a 	srli	r21,r23,16
   4db84:	9038d43a 	srli	fp,r18,16
   4db88:	bdffffcc 	andi	r23,r23,65535
   4db8c:	94bfffcc 	andi	r18,r18,65535
   4db90:	9009883a 	mov	r4,r18
   4db94:	b80b883a 	mov	r5,r23
   4db98:	d8c00515 	stw	r3,20(sp)
   4db9c:	d9800715 	stw	r6,28(sp)
   4dba0:	da000615 	stw	r8,24(sp)
   4dba4:	004c3c40 	call	4c3c4 <__mulsi3>
   4dba8:	9009883a 	mov	r4,r18
   4dbac:	a80b883a 	mov	r5,r21
   4dbb0:	1029883a 	mov	r20,r2
   4dbb4:	004c3c40 	call	4c3c4 <__mulsi3>
   4dbb8:	e009883a 	mov	r4,fp
   4dbbc:	a80b883a 	mov	r5,r21
   4dbc0:	102d883a 	mov	r22,r2
   4dbc4:	004c3c40 	call	4c3c4 <__mulsi3>
   4dbc8:	e009883a 	mov	r4,fp
   4dbcc:	b80b883a 	mov	r5,r23
   4dbd0:	1027883a 	mov	r19,r2
   4dbd4:	004c3c40 	call	4c3c4 <__mulsi3>
   4dbd8:	a008d43a 	srli	r4,r20,16
   4dbdc:	b085883a 	add	r2,r22,r2
   4dbe0:	d8c00517 	ldw	r3,20(sp)
   4dbe4:	110f883a 	add	r7,r2,r4
   4dbe8:	d9800717 	ldw	r6,28(sp)
   4dbec:	da000617 	ldw	r8,24(sp)
   4dbf0:	3d80022e 	bgeu	r7,r22,4dbfc <__muldf3+0x3b0>
   4dbf4:	00800074 	movhi	r2,1
   4dbf8:	98a7883a 	add	r19,r19,r2
   4dbfc:	3804943a 	slli	r2,r7,16
   4dc00:	380ed43a 	srli	r7,r7,16
   4dc04:	882cd43a 	srli	r22,r17,16
   4dc08:	a53fffcc 	andi	r20,r20,65535
   4dc0c:	8c7fffcc 	andi	r17,r17,65535
   4dc10:	1529883a 	add	r20,r2,r20
   4dc14:	8809883a 	mov	r4,r17
   4dc18:	b80b883a 	mov	r5,r23
   4dc1c:	d8c00515 	stw	r3,20(sp)
   4dc20:	d9800715 	stw	r6,28(sp)
   4dc24:	da000615 	stw	r8,24(sp)
   4dc28:	d9c00015 	stw	r7,0(sp)
   4dc2c:	dd000115 	stw	r20,4(sp)
   4dc30:	004c3c40 	call	4c3c4 <__mulsi3>
   4dc34:	a80b883a 	mov	r5,r21
   4dc38:	8809883a 	mov	r4,r17
   4dc3c:	d8800415 	stw	r2,16(sp)
   4dc40:	004c3c40 	call	4c3c4 <__mulsi3>
   4dc44:	a80b883a 	mov	r5,r21
   4dc48:	b009883a 	mov	r4,r22
   4dc4c:	1029883a 	mov	r20,r2
   4dc50:	004c3c40 	call	4c3c4 <__mulsi3>
   4dc54:	b009883a 	mov	r4,r22
   4dc58:	b80b883a 	mov	r5,r23
   4dc5c:	102b883a 	mov	r21,r2
   4dc60:	004c3c40 	call	4c3c4 <__mulsi3>
   4dc64:	da400417 	ldw	r9,16(sp)
   4dc68:	a085883a 	add	r2,r20,r2
   4dc6c:	d8c00517 	ldw	r3,20(sp)
   4dc70:	4808d43a 	srli	r4,r9,16
   4dc74:	d9800717 	ldw	r6,28(sp)
   4dc78:	da000617 	ldw	r8,24(sp)
   4dc7c:	1109883a 	add	r4,r2,r4
   4dc80:	2500022e 	bgeu	r4,r20,4dc8c <__muldf3+0x440>
   4dc84:	00800074 	movhi	r2,1
   4dc88:	a8ab883a 	add	r21,r21,r2
   4dc8c:	200e943a 	slli	r7,r4,16
   4dc90:	2004d43a 	srli	r2,r4,16
   4dc94:	802ed43a 	srli	r23,r16,16
   4dc98:	843fffcc 	andi	r16,r16,65535
   4dc9c:	4d3fffcc 	andi	r20,r9,65535
   4dca0:	9009883a 	mov	r4,r18
   4dca4:	800b883a 	mov	r5,r16
   4dca8:	3d29883a 	add	r20,r7,r20
   4dcac:	d8c00515 	stw	r3,20(sp)
   4dcb0:	d9800715 	stw	r6,28(sp)
   4dcb4:	da000615 	stw	r8,24(sp)
   4dcb8:	a8ab883a 	add	r21,r21,r2
   4dcbc:	004c3c40 	call	4c3c4 <__mulsi3>
   4dcc0:	9009883a 	mov	r4,r18
   4dcc4:	b80b883a 	mov	r5,r23
   4dcc8:	d8800315 	stw	r2,12(sp)
   4dccc:	004c3c40 	call	4c3c4 <__mulsi3>
   4dcd0:	e009883a 	mov	r4,fp
   4dcd4:	b80b883a 	mov	r5,r23
   4dcd8:	1025883a 	mov	r18,r2
   4dcdc:	004c3c40 	call	4c3c4 <__mulsi3>
   4dce0:	e009883a 	mov	r4,fp
   4dce4:	800b883a 	mov	r5,r16
   4dce8:	d8800215 	stw	r2,8(sp)
   4dcec:	004c3c40 	call	4c3c4 <__mulsi3>
   4dcf0:	da800317 	ldw	r10,12(sp)
   4dcf4:	d9400017 	ldw	r5,0(sp)
   4dcf8:	9085883a 	add	r2,r18,r2
   4dcfc:	5008d43a 	srli	r4,r10,16
   4dd00:	a153883a 	add	r9,r20,r5
   4dd04:	d8c00517 	ldw	r3,20(sp)
   4dd08:	1109883a 	add	r4,r2,r4
   4dd0c:	d9800717 	ldw	r6,28(sp)
   4dd10:	da000617 	ldw	r8,24(sp)
   4dd14:	dac00217 	ldw	r11,8(sp)
   4dd18:	2480022e 	bgeu	r4,r18,4dd24 <__muldf3+0x4d8>
   4dd1c:	00800074 	movhi	r2,1
   4dd20:	5897883a 	add	r11,r11,r2
   4dd24:	200e943a 	slli	r7,r4,16
   4dd28:	2038d43a 	srli	fp,r4,16
   4dd2c:	52bfffcc 	andi	r10,r10,65535
   4dd30:	3a8f883a 	add	r7,r7,r10
   4dd34:	8809883a 	mov	r4,r17
   4dd38:	800b883a 	mov	r5,r16
   4dd3c:	d8c00515 	stw	r3,20(sp)
   4dd40:	d9800715 	stw	r6,28(sp)
   4dd44:	d9c00215 	stw	r7,8(sp)
   4dd48:	da000615 	stw	r8,24(sp)
   4dd4c:	da400415 	stw	r9,16(sp)
   4dd50:	5f39883a 	add	fp,r11,fp
   4dd54:	004c3c40 	call	4c3c4 <__mulsi3>
   4dd58:	8809883a 	mov	r4,r17
   4dd5c:	b80b883a 	mov	r5,r23
   4dd60:	1025883a 	mov	r18,r2
   4dd64:	004c3c40 	call	4c3c4 <__mulsi3>
   4dd68:	b009883a 	mov	r4,r22
   4dd6c:	b80b883a 	mov	r5,r23
   4dd70:	d8800315 	stw	r2,12(sp)
   4dd74:	004c3c40 	call	4c3c4 <__mulsi3>
   4dd78:	b009883a 	mov	r4,r22
   4dd7c:	800b883a 	mov	r5,r16
   4dd80:	1023883a 	mov	r17,r2
   4dd84:	004c3c40 	call	4c3c4 <__mulsi3>
   4dd88:	da800317 	ldw	r10,12(sp)
   4dd8c:	9008d43a 	srli	r4,r18,16
   4dd90:	d8c00517 	ldw	r3,20(sp)
   4dd94:	5085883a 	add	r2,r10,r2
   4dd98:	1109883a 	add	r4,r2,r4
   4dd9c:	d9800717 	ldw	r6,28(sp)
   4dda0:	d9c00217 	ldw	r7,8(sp)
   4dda4:	da000617 	ldw	r8,24(sp)
   4dda8:	da400417 	ldw	r9,16(sp)
   4ddac:	2280022e 	bgeu	r4,r10,4ddb8 <__muldf3+0x56c>
   4ddb0:	00800074 	movhi	r2,1
   4ddb4:	88a3883a 	add	r17,r17,r2
   4ddb8:	2004943a 	slli	r2,r4,16
   4ddbc:	94bfffcc 	andi	r18,r18,65535
   4ddc0:	4ce7883a 	add	r19,r9,r19
   4ddc4:	14a5883a 	add	r18,r2,r18
   4ddc8:	9d29803a 	cmpltu	r20,r19,r20
   4ddcc:	9565883a 	add	r18,r18,r21
   4ddd0:	9505883a 	add	r2,r18,r20
   4ddd4:	99e7883a 	add	r19,r19,r7
   4ddd8:	99cf803a 	cmpltu	r7,r19,r7
   4dddc:	e08b883a 	add	r5,fp,r2
   4dde0:	2008d43a 	srli	r4,r4,16
   4dde4:	29ef883a 	add	r23,r5,r7
   4dde8:	1529803a 	cmpltu	r20,r2,r20
   4ddec:	956b803a 	cmpltu	r21,r18,r21
   4ddf0:	b9cf803a 	cmpltu	r7,r23,r7
   4ddf4:	a564b03a 	or	r18,r20,r21
   4ddf8:	2f39803a 	cmpltu	fp,r5,fp
   4ddfc:	9125883a 	add	r18,r18,r4
   4de00:	3f38b03a 	or	fp,r7,fp
   4de04:	9725883a 	add	r18,r18,fp
   4de08:	9804927a 	slli	r2,r19,9
   4de0c:	9463883a 	add	r17,r18,r17
   4de10:	d9000117 	ldw	r4,4(sp)
   4de14:	b820d5fa 	srli	r16,r23,23
   4de18:	8822927a 	slli	r17,r17,9
   4de1c:	9826d5fa 	srli	r19,r19,23
   4de20:	1104b03a 	or	r2,r2,r4
   4de24:	b82e927a 	slli	r23,r23,9
   4de28:	1004c03a 	cmpne	r2,r2,zero
   4de2c:	8c20b03a 	or	r16,r17,r16
   4de30:	14e6b03a 	or	r19,r2,r19
   4de34:	8080402c 	andhi	r2,r16,256
   4de38:	9deeb03a 	or	r23,r19,r23
   4de3c:	10000726 	beq	r2,zero,4de5c <__muldf3+0x610>
   4de40:	b804d07a 	srli	r2,r23,1
   4de44:	800697fa 	slli	r3,r16,31
   4de48:	bdc0004c 	andi	r23,r23,1
   4de4c:	8020d07a 	srli	r16,r16,1
   4de50:	b8aeb03a 	or	r23,r23,r2
   4de54:	b8eeb03a 	or	r23,r23,r3
   4de58:	4007883a 	mov	r3,r8
   4de5c:	1900ffc4 	addi	r4,r3,1023
   4de60:	01004d0e 	bge	zero,r4,4df98 <__muldf3+0x74c>
   4de64:	b88001cc 	andi	r2,r23,7
   4de68:	10000726 	beq	r2,zero,4de88 <__muldf3+0x63c>
   4de6c:	b94003cc 	andi	r5,r23,15
   4de70:	00800104 	movi	r2,4
   4de74:	28800426 	beq	r5,r2,4de88 <__muldf3+0x63c>
   4de78:	b885883a 	add	r2,r23,r2
   4de7c:	15ef803a 	cmpltu	r23,r2,r23
   4de80:	85e1883a 	add	r16,r16,r23
   4de84:	102f883a 	mov	r23,r2
   4de88:	8080402c 	andhi	r2,r16,256
   4de8c:	10000426 	beq	r2,zero,4dea0 <__muldf3+0x654>
   4de90:	00bfc034 	movhi	r2,65280
   4de94:	10bfffc4 	addi	r2,r2,-1
   4de98:	19010004 	addi	r4,r3,1024
   4de9c:	80a0703a 	and	r16,r16,r2
   4dea0:	0081ff84 	movi	r2,2046
   4dea4:	1100340e 	bge	r2,r4,4df78 <__muldf3+0x72c>
   4dea8:	34c0004c 	andi	r19,r6,1
   4deac:	0101ffc4 	movi	r4,2047
   4deb0:	0021883a 	mov	r16,zero
   4deb4:	002f883a 	mov	r23,zero
   4deb8:	003ebe06 	br	4d9b4 <__alt_data_end+0xfffcd9b4>
   4debc:	8080022c 	andhi	r2,r16,8
   4dec0:	10000926 	beq	r2,zero,4dee8 <__muldf3+0x69c>
   4dec4:	8880022c 	andhi	r2,r17,8
   4dec8:	1000071e 	bne	r2,zero,4dee8 <__muldf3+0x69c>
   4decc:	00800434 	movhi	r2,16
   4ded0:	8c000234 	orhi	r16,r17,8
   4ded4:	10bfffc4 	addi	r2,r2,-1
   4ded8:	b027883a 	mov	r19,r22
   4dedc:	80a0703a 	and	r16,r16,r2
   4dee0:	902f883a 	mov	r23,r18
   4dee4:	003f1a06 	br	4db50 <__alt_data_end+0xfffcdb50>
   4dee8:	00800434 	movhi	r2,16
   4deec:	84000234 	orhi	r16,r16,8
   4def0:	10bfffc4 	addi	r2,r2,-1
   4def4:	80a0703a 	and	r16,r16,r2
   4def8:	003f1506 	br	4db50 <__alt_data_end+0xfffcdb50>
   4defc:	3009883a 	mov	r4,r6
   4df00:	d9400215 	stw	r5,8(sp)
   4df04:	d9800715 	stw	r6,28(sp)
   4df08:	da400415 	stw	r9,16(sp)
   4df0c:	da800315 	stw	r10,12(sp)
   4df10:	004eb840 	call	4eb84 <__clzsi2>
   4df14:	10c00804 	addi	r3,r2,32
   4df18:	010009c4 	movi	r4,39
   4df1c:	d9400217 	ldw	r5,8(sp)
   4df20:	d9800717 	ldw	r6,28(sp)
   4df24:	da400417 	ldw	r9,16(sp)
   4df28:	da800317 	ldw	r10,12(sp)
   4df2c:	20fee20e 	bge	r4,r3,4dab8 <__alt_data_end+0xfffcdab8>
   4df30:	147ffe04 	addi	r17,r2,-8
   4df34:	9462983a 	sll	r17,r18,r17
   4df38:	0025883a 	mov	r18,zero
   4df3c:	003ee506 	br	4dad4 <__alt_data_end+0xfffcdad4>
   4df40:	d9800715 	stw	r6,28(sp)
   4df44:	d9c00215 	stw	r7,8(sp)
   4df48:	da400415 	stw	r9,16(sp)
   4df4c:	004eb840 	call	4eb84 <__clzsi2>
   4df50:	10c00804 	addi	r3,r2,32
   4df54:	010009c4 	movi	r4,39
   4df58:	d9800717 	ldw	r6,28(sp)
   4df5c:	d9c00217 	ldw	r7,8(sp)
   4df60:	da400417 	ldw	r9,16(sp)
   4df64:	20feb40e 	bge	r4,r3,4da38 <__alt_data_end+0xfffcda38>
   4df68:	143ffe04 	addi	r16,r2,-8
   4df6c:	9420983a 	sll	r16,r18,r16
   4df70:	002f883a 	mov	r23,zero
   4df74:	003eb706 	br	4da54 <__alt_data_end+0xfffcda54>
   4df78:	8004977a 	slli	r2,r16,29
   4df7c:	b82ed0fa 	srli	r23,r23,3
   4df80:	8020927a 	slli	r16,r16,9
   4df84:	2101ffcc 	andi	r4,r4,2047
   4df88:	15eeb03a 	or	r23,r2,r23
   4df8c:	8020d33a 	srli	r16,r16,12
   4df90:	34c0004c 	andi	r19,r6,1
   4df94:	003e8706 	br	4d9b4 <__alt_data_end+0xfffcd9b4>
   4df98:	00bf0084 	movi	r2,-1022
   4df9c:	10c5c83a 	sub	r2,r2,r3
   4dfa0:	01000e04 	movi	r4,56
   4dfa4:	2080080e 	bge	r4,r2,4dfc8 <__muldf3+0x77c>
   4dfa8:	34c0004c 	andi	r19,r6,1
   4dfac:	0009883a 	mov	r4,zero
   4dfb0:	0021883a 	mov	r16,zero
   4dfb4:	002f883a 	mov	r23,zero
   4dfb8:	003e7e06 	br	4d9b4 <__alt_data_end+0xfffcd9b4>
   4dfbc:	4007883a 	mov	r3,r8
   4dfc0:	480d883a 	mov	r6,r9
   4dfc4:	003fa506 	br	4de5c <__alt_data_end+0xfffcde5c>
   4dfc8:	010007c4 	movi	r4,31
   4dfcc:	20801816 	blt	r4,r2,4e030 <__muldf3+0x7e4>
   4dfd0:	18c10784 	addi	r3,r3,1054
   4dfd4:	80c8983a 	sll	r4,r16,r3
   4dfd8:	b88ad83a 	srl	r5,r23,r2
   4dfdc:	b8c6983a 	sll	r3,r23,r3
   4dfe0:	80a0d83a 	srl	r16,r16,r2
   4dfe4:	2908b03a 	or	r4,r5,r4
   4dfe8:	1804c03a 	cmpne	r2,r3,zero
   4dfec:	2088b03a 	or	r4,r4,r2
   4dff0:	208001cc 	andi	r2,r4,7
   4dff4:	10000726 	beq	r2,zero,4e014 <__muldf3+0x7c8>
   4dff8:	20c003cc 	andi	r3,r4,15
   4dffc:	00800104 	movi	r2,4
   4e000:	18800426 	beq	r3,r2,4e014 <__muldf3+0x7c8>
   4e004:	20c00104 	addi	r3,r4,4
   4e008:	1905803a 	cmpltu	r2,r3,r4
   4e00c:	80a1883a 	add	r16,r16,r2
   4e010:	1809883a 	mov	r4,r3
   4e014:	8080202c 	andhi	r2,r16,128
   4e018:	10001b26 	beq	r2,zero,4e088 <__muldf3+0x83c>
   4e01c:	34c0004c 	andi	r19,r6,1
   4e020:	01000044 	movi	r4,1
   4e024:	0021883a 	mov	r16,zero
   4e028:	002f883a 	mov	r23,zero
   4e02c:	003e6106 	br	4d9b4 <__alt_data_end+0xfffcd9b4>
   4e030:	013ef884 	movi	r4,-1054
   4e034:	20c9c83a 	sub	r4,r4,r3
   4e038:	01400804 	movi	r5,32
   4e03c:	8108d83a 	srl	r4,r16,r4
   4e040:	11401526 	beq	r2,r5,4e098 <__muldf3+0x84c>
   4e044:	18c10f84 	addi	r3,r3,1086
   4e048:	80e0983a 	sll	r16,r16,r3
   4e04c:	85eeb03a 	or	r23,r16,r23
   4e050:	b804c03a 	cmpne	r2,r23,zero
   4e054:	1108b03a 	or	r4,r2,r4
   4e058:	20c001cc 	andi	r3,r4,7
   4e05c:	1800061e 	bne	r3,zero,4e078 <__muldf3+0x82c>
   4e060:	0021883a 	mov	r16,zero
   4e064:	202ed0fa 	srli	r23,r4,3
   4e068:	34c0004c 	andi	r19,r6,1
   4e06c:	0009883a 	mov	r4,zero
   4e070:	b8eeb03a 	or	r23,r23,r3
   4e074:	003e4f06 	br	4d9b4 <__alt_data_end+0xfffcd9b4>
   4e078:	20c003cc 	andi	r3,r4,15
   4e07c:	00800104 	movi	r2,4
   4e080:	0021883a 	mov	r16,zero
   4e084:	18bfdf1e 	bne	r3,r2,4e004 <__alt_data_end+0xfffce004>
   4e088:	8004927a 	slli	r2,r16,9
   4e08c:	8006977a 	slli	r3,r16,29
   4e090:	1020d33a 	srli	r16,r2,12
   4e094:	003ff306 	br	4e064 <__alt_data_end+0xfffce064>
   4e098:	0021883a 	mov	r16,zero
   4e09c:	003feb06 	br	4e04c <__alt_data_end+0xfffce04c>
   4e0a0:	00800434 	movhi	r2,16
   4e0a4:	84000234 	orhi	r16,r16,8
   4e0a8:	10bfffc4 	addi	r2,r2,-1
   4e0ac:	4cc0004c 	andi	r19,r9,1
   4e0b0:	80a0703a 	and	r16,r16,r2
   4e0b4:	003ea606 	br	4db50 <__alt_data_end+0xfffcdb50>

0004e0b8 <__subdf3>:
   4e0b8:	00c00434 	movhi	r3,16
   4e0bc:	18ffffc4 	addi	r3,r3,-1
   4e0c0:	defffb04 	addi	sp,sp,-20
   4e0c4:	28d2703a 	and	r9,r5,r3
   4e0c8:	3814d53a 	srli	r10,r7,20
   4e0cc:	38c6703a 	and	r3,r7,r3
   4e0d0:	3004d77a 	srli	r2,r6,29
   4e0d4:	dc800215 	stw	r18,8(sp)
   4e0d8:	dc000015 	stw	r16,0(sp)
   4e0dc:	2824d7fa 	srli	r18,r5,31
   4e0e0:	2820d53a 	srli	r16,r5,20
   4e0e4:	481290fa 	slli	r9,r9,3
   4e0e8:	200ad77a 	srli	r5,r4,29
   4e0ec:	180690fa 	slli	r3,r3,3
   4e0f0:	dc400115 	stw	r17,4(sp)
   4e0f4:	dfc00415 	stw	ra,16(sp)
   4e0f8:	202290fa 	slli	r17,r4,3
   4e0fc:	dcc00315 	stw	r19,12(sp)
   4e100:	5281ffcc 	andi	r10,r10,2047
   4e104:	0101ffc4 	movi	r4,2047
   4e108:	9011883a 	mov	r8,r18
   4e10c:	8401ffcc 	andi	r16,r16,2047
   4e110:	94803fcc 	andi	r18,r18,255
   4e114:	494ab03a 	or	r5,r9,r5
   4e118:	380ed7fa 	srli	r7,r7,31
   4e11c:	1886b03a 	or	r3,r3,r2
   4e120:	300c90fa 	slli	r6,r6,3
   4e124:	51009026 	beq	r10,r4,4e368 <__subdf3+0x2b0>
   4e128:	39c0005c 	xori	r7,r7,1
   4e12c:	8285c83a 	sub	r2,r16,r10
   4e130:	91c06f26 	beq	r18,r7,4e2f0 <__subdf3+0x238>
   4e134:	0080b10e 	bge	zero,r2,4e3fc <__subdf3+0x344>
   4e138:	50002a1e 	bne	r10,zero,4e1e4 <__subdf3+0x12c>
   4e13c:	1988b03a 	or	r4,r3,r6
   4e140:	2000941e 	bne	r4,zero,4e394 <__subdf3+0x2dc>
   4e144:	888001cc 	andi	r2,r17,7
   4e148:	10005b26 	beq	r2,zero,4e2b8 <__subdf3+0x200>
   4e14c:	88c003cc 	andi	r3,r17,15
   4e150:	00800104 	movi	r2,4
   4e154:	18805826 	beq	r3,r2,4e2b8 <__subdf3+0x200>
   4e158:	88c00104 	addi	r3,r17,4
   4e15c:	1c63803a 	cmpltu	r17,r3,r17
   4e160:	2c4b883a 	add	r5,r5,r17
   4e164:	2880202c 	andhi	r2,r5,128
   4e168:	9200004c 	andi	r8,r18,1
   4e16c:	1823883a 	mov	r17,r3
   4e170:	10005426 	beq	r2,zero,4e2c4 <__subdf3+0x20c>
   4e174:	84000044 	addi	r16,r16,1
   4e178:	0081ffc4 	movi	r2,2047
   4e17c:	8080bf26 	beq	r16,r2,4e47c <__subdf3+0x3c4>
   4e180:	013fe034 	movhi	r4,65408
   4e184:	213fffc4 	addi	r4,r4,-1
   4e188:	290a703a 	and	r5,r5,r4
   4e18c:	2804977a 	slli	r2,r5,29
   4e190:	280a927a 	slli	r5,r5,9
   4e194:	8822d0fa 	srli	r17,r17,3
   4e198:	8401ffcc 	andi	r16,r16,2047
   4e19c:	2808d33a 	srli	r4,r5,12
   4e1a0:	1444b03a 	or	r2,r2,r17
   4e1a4:	8401ffcc 	andi	r16,r16,2047
   4e1a8:	800a953a 	slli	r5,r16,20
   4e1ac:	40c03fcc 	andi	r3,r8,255
   4e1b0:	04000434 	movhi	r16,16
   4e1b4:	180697fa 	slli	r3,r3,31
   4e1b8:	843fffc4 	addi	r16,r16,-1
   4e1bc:	2420703a 	and	r16,r4,r16
   4e1c0:	8160b03a 	or	r16,r16,r5
   4e1c4:	80c6b03a 	or	r3,r16,r3
   4e1c8:	dfc00417 	ldw	ra,16(sp)
   4e1cc:	dcc00317 	ldw	r19,12(sp)
   4e1d0:	dc800217 	ldw	r18,8(sp)
   4e1d4:	dc400117 	ldw	r17,4(sp)
   4e1d8:	dc000017 	ldw	r16,0(sp)
   4e1dc:	dec00504 	addi	sp,sp,20
   4e1e0:	f800283a 	ret
   4e1e4:	0101ffc4 	movi	r4,2047
   4e1e8:	813fd626 	beq	r16,r4,4e144 <__alt_data_end+0xfffce144>
   4e1ec:	18c02034 	orhi	r3,r3,128
   4e1f0:	01000e04 	movi	r4,56
   4e1f4:	2080a416 	blt	r4,r2,4e488 <__subdf3+0x3d0>
   4e1f8:	010007c4 	movi	r4,31
   4e1fc:	2080c716 	blt	r4,r2,4e51c <__subdf3+0x464>
   4e200:	01000804 	movi	r4,32
   4e204:	2089c83a 	sub	r4,r4,r2
   4e208:	1910983a 	sll	r8,r3,r4
   4e20c:	308ed83a 	srl	r7,r6,r2
   4e210:	3108983a 	sll	r4,r6,r4
   4e214:	1884d83a 	srl	r2,r3,r2
   4e218:	41ccb03a 	or	r6,r8,r7
   4e21c:	2008c03a 	cmpne	r4,r4,zero
   4e220:	310cb03a 	or	r6,r6,r4
   4e224:	898dc83a 	sub	r6,r17,r6
   4e228:	89a3803a 	cmpltu	r17,r17,r6
   4e22c:	288bc83a 	sub	r5,r5,r2
   4e230:	2c4bc83a 	sub	r5,r5,r17
   4e234:	3023883a 	mov	r17,r6
   4e238:	2880202c 	andhi	r2,r5,128
   4e23c:	10006b26 	beq	r2,zero,4e3ec <__subdf3+0x334>
   4e240:	04c02034 	movhi	r19,128
   4e244:	9cffffc4 	addi	r19,r19,-1
   4e248:	2ce6703a 	and	r19,r5,r19
   4e24c:	98007c26 	beq	r19,zero,4e440 <__subdf3+0x388>
   4e250:	9809883a 	mov	r4,r19
   4e254:	004eb840 	call	4eb84 <__clzsi2>
   4e258:	10fffe04 	addi	r3,r2,-8
   4e25c:	010007c4 	movi	r4,31
   4e260:	20c07d16 	blt	r4,r3,4e458 <__subdf3+0x3a0>
   4e264:	01400a04 	movi	r5,40
   4e268:	2885c83a 	sub	r2,r5,r2
   4e26c:	888ad83a 	srl	r5,r17,r2
   4e270:	98e6983a 	sll	r19,r19,r3
   4e274:	88e2983a 	sll	r17,r17,r3
   4e278:	2ce6b03a 	or	r19,r5,r19
   4e27c:	1c007a16 	blt	r3,r16,4e468 <__subdf3+0x3b0>
   4e280:	1c21c83a 	sub	r16,r3,r16
   4e284:	81400044 	addi	r5,r16,1
   4e288:	00c007c4 	movi	r3,31
   4e28c:	19409616 	blt	r3,r5,4e4e8 <__subdf3+0x430>
   4e290:	1c21c83a 	sub	r16,r3,r16
   4e294:	8c08983a 	sll	r4,r17,r16
   4e298:	8946d83a 	srl	r3,r17,r5
   4e29c:	9c20983a 	sll	r16,r19,r16
   4e2a0:	2008c03a 	cmpne	r4,r4,zero
   4e2a4:	994ad83a 	srl	r5,r19,r5
   4e2a8:	1c06b03a 	or	r3,r3,r16
   4e2ac:	1922b03a 	or	r17,r3,r4
   4e2b0:	0021883a 	mov	r16,zero
   4e2b4:	003fa306 	br	4e144 <__alt_data_end+0xfffce144>
   4e2b8:	2880202c 	andhi	r2,r5,128
   4e2bc:	9200004c 	andi	r8,r18,1
   4e2c0:	103fac1e 	bne	r2,zero,4e174 <__alt_data_end+0xfffce174>
   4e2c4:	2804977a 	slli	r2,r5,29
   4e2c8:	8822d0fa 	srli	r17,r17,3
   4e2cc:	00c1ffc4 	movi	r3,2047
   4e2d0:	280ad0fa 	srli	r5,r5,3
   4e2d4:	1444b03a 	or	r2,r2,r17
   4e2d8:	80c02726 	beq	r16,r3,4e378 <__subdf3+0x2c0>
   4e2dc:	01000434 	movhi	r4,16
   4e2e0:	213fffc4 	addi	r4,r4,-1
   4e2e4:	80e0703a 	and	r16,r16,r3
   4e2e8:	2908703a 	and	r4,r5,r4
   4e2ec:	003fad06 	br	4e1a4 <__alt_data_end+0xfffce1a4>
   4e2f0:	0080690e 	bge	zero,r2,4e498 <__subdf3+0x3e0>
   4e2f4:	50002f26 	beq	r10,zero,4e3b4 <__subdf3+0x2fc>
   4e2f8:	0101ffc4 	movi	r4,2047
   4e2fc:	813f9126 	beq	r16,r4,4e144 <__alt_data_end+0xfffce144>
   4e300:	18c02034 	orhi	r3,r3,128
   4e304:	01000e04 	movi	r4,56
   4e308:	2080b00e 	bge	r4,r2,4e5cc <__subdf3+0x514>
   4e30c:	198cb03a 	or	r6,r3,r6
   4e310:	300ec03a 	cmpne	r7,r6,zero
   4e314:	0005883a 	mov	r2,zero
   4e318:	3c4f883a 	add	r7,r7,r17
   4e31c:	3c63803a 	cmpltu	r17,r7,r17
   4e320:	114b883a 	add	r5,r2,r5
   4e324:	2c4b883a 	add	r5,r5,r17
   4e328:	3823883a 	mov	r17,r7
   4e32c:	2880202c 	andhi	r2,r5,128
   4e330:	10002e26 	beq	r2,zero,4e3ec <__subdf3+0x334>
   4e334:	84000044 	addi	r16,r16,1
   4e338:	0081ffc4 	movi	r2,2047
   4e33c:	8080de26 	beq	r16,r2,4e6b8 <__subdf3+0x600>
   4e340:	00bfe034 	movhi	r2,65408
   4e344:	10bfffc4 	addi	r2,r2,-1
   4e348:	288a703a 	and	r5,r5,r2
   4e34c:	880cd07a 	srli	r6,r17,1
   4e350:	280897fa 	slli	r4,r5,31
   4e354:	88c0004c 	andi	r3,r17,1
   4e358:	30e2b03a 	or	r17,r6,r3
   4e35c:	280ad07a 	srli	r5,r5,1
   4e360:	8922b03a 	or	r17,r17,r4
   4e364:	003f7706 	br	4e144 <__alt_data_end+0xfffce144>
   4e368:	1984b03a 	or	r2,r3,r6
   4e36c:	103f6e26 	beq	r2,zero,4e128 <__alt_data_end+0xfffce128>
   4e370:	39c03fcc 	andi	r7,r7,255
   4e374:	003f6d06 	br	4e12c <__alt_data_end+0xfffce12c>
   4e378:	1146b03a 	or	r3,r2,r5
   4e37c:	18003f26 	beq	r3,zero,4e47c <__subdf3+0x3c4>
   4e380:	00c00434 	movhi	r3,16
   4e384:	29000234 	orhi	r4,r5,8
   4e388:	18ffffc4 	addi	r3,r3,-1
   4e38c:	20c8703a 	and	r4,r4,r3
   4e390:	003f8406 	br	4e1a4 <__alt_data_end+0xfffce1a4>
   4e394:	10bfffc4 	addi	r2,r2,-1
   4e398:	1000501e 	bne	r2,zero,4e4dc <__subdf3+0x424>
   4e39c:	898fc83a 	sub	r7,r17,r6
   4e3a0:	89e3803a 	cmpltu	r17,r17,r7
   4e3a4:	28cbc83a 	sub	r5,r5,r3
   4e3a8:	2c4bc83a 	sub	r5,r5,r17
   4e3ac:	3823883a 	mov	r17,r7
   4e3b0:	003fa106 	br	4e238 <__alt_data_end+0xfffce238>
   4e3b4:	1988b03a 	or	r4,r3,r6
   4e3b8:	203f6226 	beq	r4,zero,4e144 <__alt_data_end+0xfffce144>
   4e3bc:	10bfffc4 	addi	r2,r2,-1
   4e3c0:	10009b1e 	bne	r2,zero,4e630 <__subdf3+0x578>
   4e3c4:	344d883a 	add	r6,r6,r17
   4e3c8:	3463803a 	cmpltu	r17,r6,r17
   4e3cc:	194b883a 	add	r5,r3,r5
   4e3d0:	2c4b883a 	add	r5,r5,r17
   4e3d4:	3023883a 	mov	r17,r6
   4e3d8:	003fd406 	br	4e32c <__alt_data_end+0xfffce32c>
   4e3dc:	1106b03a 	or	r3,r2,r4
   4e3e0:	1800b426 	beq	r3,zero,4e6b4 <__subdf3+0x5fc>
   4e3e4:	100b883a 	mov	r5,r2
   4e3e8:	2023883a 	mov	r17,r4
   4e3ec:	888001cc 	andi	r2,r17,7
   4e3f0:	103f561e 	bne	r2,zero,4e14c <__alt_data_end+0xfffce14c>
   4e3f4:	9200004c 	andi	r8,r18,1
   4e3f8:	003fb206 	br	4e2c4 <__alt_data_end+0xfffce2c4>
   4e3fc:	1000531e 	bne	r2,zero,4e54c <__subdf3+0x494>
   4e400:	80800044 	addi	r2,r16,1
   4e404:	1081ffcc 	andi	r2,r2,2047
   4e408:	01000044 	movi	r4,1
   4e40c:	2080a00e 	bge	r4,r2,4e690 <__subdf3+0x5d8>
   4e410:	8985c83a 	sub	r2,r17,r6
   4e414:	8889803a 	cmpltu	r4,r17,r2
   4e418:	28e7c83a 	sub	r19,r5,r3
   4e41c:	9927c83a 	sub	r19,r19,r4
   4e420:	9900202c 	andhi	r4,r19,128
   4e424:	20006226 	beq	r4,zero,4e5b0 <__subdf3+0x4f8>
   4e428:	3463c83a 	sub	r17,r6,r17
   4e42c:	194bc83a 	sub	r5,r3,r5
   4e430:	344d803a 	cmpltu	r6,r6,r17
   4e434:	29a7c83a 	sub	r19,r5,r6
   4e438:	3825883a 	mov	r18,r7
   4e43c:	983f841e 	bne	r19,zero,4e250 <__alt_data_end+0xfffce250>
   4e440:	8809883a 	mov	r4,r17
   4e444:	004eb840 	call	4eb84 <__clzsi2>
   4e448:	10800804 	addi	r2,r2,32
   4e44c:	10fffe04 	addi	r3,r2,-8
   4e450:	010007c4 	movi	r4,31
   4e454:	20ff830e 	bge	r4,r3,4e264 <__alt_data_end+0xfffce264>
   4e458:	14fff604 	addi	r19,r2,-40
   4e45c:	8ce6983a 	sll	r19,r17,r19
   4e460:	0023883a 	mov	r17,zero
   4e464:	1c3f860e 	bge	r3,r16,4e280 <__alt_data_end+0xfffce280>
   4e468:	017fe034 	movhi	r5,65408
   4e46c:	297fffc4 	addi	r5,r5,-1
   4e470:	80e1c83a 	sub	r16,r16,r3
   4e474:	994a703a 	and	r5,r19,r5
   4e478:	003f3206 	br	4e144 <__alt_data_end+0xfffce144>
   4e47c:	0009883a 	mov	r4,zero
   4e480:	0005883a 	mov	r2,zero
   4e484:	003f4706 	br	4e1a4 <__alt_data_end+0xfffce1a4>
   4e488:	198cb03a 	or	r6,r3,r6
   4e48c:	300cc03a 	cmpne	r6,r6,zero
   4e490:	0005883a 	mov	r2,zero
   4e494:	003f6306 	br	4e224 <__alt_data_end+0xfffce224>
   4e498:	10009d1e 	bne	r2,zero,4e710 <__subdf3+0x658>
   4e49c:	81c00044 	addi	r7,r16,1
   4e4a0:	3881ffcc 	andi	r2,r7,2047
   4e4a4:	02400044 	movi	r9,1
   4e4a8:	4880680e 	bge	r9,r2,4e64c <__subdf3+0x594>
   4e4ac:	0081ffc4 	movi	r2,2047
   4e4b0:	3880ae26 	beq	r7,r2,4e76c <__subdf3+0x6b4>
   4e4b4:	344d883a 	add	r6,r6,r17
   4e4b8:	3463803a 	cmpltu	r17,r6,r17
   4e4bc:	194b883a 	add	r5,r3,r5
   4e4c0:	2c4b883a 	add	r5,r5,r17
   4e4c4:	282297fa 	slli	r17,r5,31
   4e4c8:	300cd07a 	srli	r6,r6,1
   4e4cc:	280ad07a 	srli	r5,r5,1
   4e4d0:	3821883a 	mov	r16,r7
   4e4d4:	89a2b03a 	or	r17,r17,r6
   4e4d8:	003f1a06 	br	4e144 <__alt_data_end+0xfffce144>
   4e4dc:	0101ffc4 	movi	r4,2047
   4e4e0:	813f431e 	bne	r16,r4,4e1f0 <__alt_data_end+0xfffce1f0>
   4e4e4:	003f1706 	br	4e144 <__alt_data_end+0xfffce144>
   4e4e8:	80bff844 	addi	r2,r16,-31
   4e4ec:	00c00804 	movi	r3,32
   4e4f0:	9884d83a 	srl	r2,r19,r2
   4e4f4:	28c05126 	beq	r5,r3,4e63c <__subdf3+0x584>
   4e4f8:	00c00fc4 	movi	r3,63
   4e4fc:	1c21c83a 	sub	r16,r3,r16
   4e500:	9c26983a 	sll	r19,r19,r16
   4e504:	9c62b03a 	or	r17,r19,r17
   4e508:	8822c03a 	cmpne	r17,r17,zero
   4e50c:	88a2b03a 	or	r17,r17,r2
   4e510:	000b883a 	mov	r5,zero
   4e514:	0021883a 	mov	r16,zero
   4e518:	003fb406 	br	4e3ec <__alt_data_end+0xfffce3ec>
   4e51c:	113ff804 	addi	r4,r2,-32
   4e520:	01c00804 	movi	r7,32
   4e524:	1908d83a 	srl	r4,r3,r4
   4e528:	11c04626 	beq	r2,r7,4e644 <__subdf3+0x58c>
   4e52c:	01c01004 	movi	r7,64
   4e530:	3885c83a 	sub	r2,r7,r2
   4e534:	1884983a 	sll	r2,r3,r2
   4e538:	118cb03a 	or	r6,r2,r6
   4e53c:	300cc03a 	cmpne	r6,r6,zero
   4e540:	310cb03a 	or	r6,r6,r4
   4e544:	0005883a 	mov	r2,zero
   4e548:	003f3606 	br	4e224 <__alt_data_end+0xfffce224>
   4e54c:	80002b26 	beq	r16,zero,4e5fc <__subdf3+0x544>
   4e550:	0101ffc4 	movi	r4,2047
   4e554:	51006926 	beq	r10,r4,4e6fc <__subdf3+0x644>
   4e558:	0085c83a 	sub	r2,zero,r2
   4e55c:	29402034 	orhi	r5,r5,128
   4e560:	01000e04 	movi	r4,56
   4e564:	20807d16 	blt	r4,r2,4e75c <__subdf3+0x6a4>
   4e568:	010007c4 	movi	r4,31
   4e56c:	2080d916 	blt	r4,r2,4e8d4 <__subdf3+0x81c>
   4e570:	01000804 	movi	r4,32
   4e574:	2089c83a 	sub	r4,r4,r2
   4e578:	2912983a 	sll	r9,r5,r4
   4e57c:	8890d83a 	srl	r8,r17,r2
   4e580:	8908983a 	sll	r4,r17,r4
   4e584:	2884d83a 	srl	r2,r5,r2
   4e588:	4a22b03a 	or	r17,r9,r8
   4e58c:	2008c03a 	cmpne	r4,r4,zero
   4e590:	8922b03a 	or	r17,r17,r4
   4e594:	3463c83a 	sub	r17,r6,r17
   4e598:	1885c83a 	sub	r2,r3,r2
   4e59c:	344d803a 	cmpltu	r6,r6,r17
   4e5a0:	118bc83a 	sub	r5,r2,r6
   4e5a4:	5021883a 	mov	r16,r10
   4e5a8:	3825883a 	mov	r18,r7
   4e5ac:	003f2206 	br	4e238 <__alt_data_end+0xfffce238>
   4e5b0:	9886b03a 	or	r3,r19,r2
   4e5b4:	18001c1e 	bne	r3,zero,4e628 <__subdf3+0x570>
   4e5b8:	0011883a 	mov	r8,zero
   4e5bc:	000b883a 	mov	r5,zero
   4e5c0:	0023883a 	mov	r17,zero
   4e5c4:	0021883a 	mov	r16,zero
   4e5c8:	003f3e06 	br	4e2c4 <__alt_data_end+0xfffce2c4>
   4e5cc:	010007c4 	movi	r4,31
   4e5d0:	20803c16 	blt	r4,r2,4e6c4 <__subdf3+0x60c>
   4e5d4:	01000804 	movi	r4,32
   4e5d8:	2089c83a 	sub	r4,r4,r2
   4e5dc:	1912983a 	sll	r9,r3,r4
   4e5e0:	308ed83a 	srl	r7,r6,r2
   4e5e4:	3108983a 	sll	r4,r6,r4
   4e5e8:	1884d83a 	srl	r2,r3,r2
   4e5ec:	49ceb03a 	or	r7,r9,r7
   4e5f0:	2008c03a 	cmpne	r4,r4,zero
   4e5f4:	390eb03a 	or	r7,r7,r4
   4e5f8:	003f4706 	br	4e318 <__alt_data_end+0xfffce318>
   4e5fc:	2c48b03a 	or	r4,r5,r17
   4e600:	20003e26 	beq	r4,zero,4e6fc <__subdf3+0x644>
   4e604:	0084303a 	nor	r2,zero,r2
   4e608:	10003a1e 	bne	r2,zero,4e6f4 <__subdf3+0x63c>
   4e60c:	3463c83a 	sub	r17,r6,r17
   4e610:	194bc83a 	sub	r5,r3,r5
   4e614:	344d803a 	cmpltu	r6,r6,r17
   4e618:	298bc83a 	sub	r5,r5,r6
   4e61c:	5021883a 	mov	r16,r10
   4e620:	3825883a 	mov	r18,r7
   4e624:	003f0406 	br	4e238 <__alt_data_end+0xfffce238>
   4e628:	1023883a 	mov	r17,r2
   4e62c:	003f0706 	br	4e24c <__alt_data_end+0xfffce24c>
   4e630:	0101ffc4 	movi	r4,2047
   4e634:	813f331e 	bne	r16,r4,4e304 <__alt_data_end+0xfffce304>
   4e638:	003ec206 	br	4e144 <__alt_data_end+0xfffce144>
   4e63c:	0027883a 	mov	r19,zero
   4e640:	003fb006 	br	4e504 <__alt_data_end+0xfffce504>
   4e644:	0005883a 	mov	r2,zero
   4e648:	003fbb06 	br	4e538 <__alt_data_end+0xfffce538>
   4e64c:	2c44b03a 	or	r2,r5,r17
   4e650:	80008b1e 	bne	r16,zero,4e880 <__subdf3+0x7c8>
   4e654:	1000b526 	beq	r2,zero,4e92c <__subdf3+0x874>
   4e658:	1984b03a 	or	r2,r3,r6
   4e65c:	103eb926 	beq	r2,zero,4e144 <__alt_data_end+0xfffce144>
   4e660:	3449883a 	add	r4,r6,r17
   4e664:	2463803a 	cmpltu	r17,r4,r17
   4e668:	194b883a 	add	r5,r3,r5
   4e66c:	2c4b883a 	add	r5,r5,r17
   4e670:	2880202c 	andhi	r2,r5,128
   4e674:	2023883a 	mov	r17,r4
   4e678:	103f5c26 	beq	r2,zero,4e3ec <__alt_data_end+0xfffce3ec>
   4e67c:	00bfe034 	movhi	r2,65408
   4e680:	10bfffc4 	addi	r2,r2,-1
   4e684:	4821883a 	mov	r16,r9
   4e688:	288a703a 	and	r5,r5,r2
   4e68c:	003ead06 	br	4e144 <__alt_data_end+0xfffce144>
   4e690:	2c44b03a 	or	r2,r5,r17
   4e694:	8000291e 	bne	r16,zero,4e73c <__subdf3+0x684>
   4e698:	10004f1e 	bne	r2,zero,4e7d8 <__subdf3+0x720>
   4e69c:	1984b03a 	or	r2,r3,r6
   4e6a0:	10000426 	beq	r2,zero,4e6b4 <__subdf3+0x5fc>
   4e6a4:	180b883a 	mov	r5,r3
   4e6a8:	3023883a 	mov	r17,r6
   4e6ac:	3825883a 	mov	r18,r7
   4e6b0:	003ea406 	br	4e144 <__alt_data_end+0xfffce144>
   4e6b4:	0011883a 	mov	r8,zero
   4e6b8:	000b883a 	mov	r5,zero
   4e6bc:	0023883a 	mov	r17,zero
   4e6c0:	003f0006 	br	4e2c4 <__alt_data_end+0xfffce2c4>
   4e6c4:	11fff804 	addi	r7,r2,-32
   4e6c8:	19c8d83a 	srl	r4,r3,r7
   4e6cc:	01c00804 	movi	r7,32
   4e6d0:	11c07e26 	beq	r2,r7,4e8cc <__subdf3+0x814>
   4e6d4:	01c01004 	movi	r7,64
   4e6d8:	3885c83a 	sub	r2,r7,r2
   4e6dc:	1884983a 	sll	r2,r3,r2
   4e6e0:	118cb03a 	or	r6,r2,r6
   4e6e4:	300ec03a 	cmpne	r7,r6,zero
   4e6e8:	390eb03a 	or	r7,r7,r4
   4e6ec:	0005883a 	mov	r2,zero
   4e6f0:	003f0906 	br	4e318 <__alt_data_end+0xfffce318>
   4e6f4:	0101ffc4 	movi	r4,2047
   4e6f8:	513f991e 	bne	r10,r4,4e560 <__alt_data_end+0xfffce560>
   4e6fc:	180b883a 	mov	r5,r3
   4e700:	3023883a 	mov	r17,r6
   4e704:	5021883a 	mov	r16,r10
   4e708:	3825883a 	mov	r18,r7
   4e70c:	003e8d06 	br	4e144 <__alt_data_end+0xfffce144>
   4e710:	80001a1e 	bne	r16,zero,4e77c <__subdf3+0x6c4>
   4e714:	2c48b03a 	or	r4,r5,r17
   4e718:	20005526 	beq	r4,zero,4e870 <__subdf3+0x7b8>
   4e71c:	0084303a 	nor	r2,zero,r2
   4e720:	1000511e 	bne	r2,zero,4e868 <__subdf3+0x7b0>
   4e724:	89a3883a 	add	r17,r17,r6
   4e728:	194b883a 	add	r5,r3,r5
   4e72c:	898d803a 	cmpltu	r6,r17,r6
   4e730:	298b883a 	add	r5,r5,r6
   4e734:	5021883a 	mov	r16,r10
   4e738:	003efc06 	br	4e32c <__alt_data_end+0xfffce32c>
   4e73c:	1000341e 	bne	r2,zero,4e810 <__subdf3+0x758>
   4e740:	1984b03a 	or	r2,r3,r6
   4e744:	10006f26 	beq	r2,zero,4e904 <__subdf3+0x84c>
   4e748:	180b883a 	mov	r5,r3
   4e74c:	3023883a 	mov	r17,r6
   4e750:	3825883a 	mov	r18,r7
   4e754:	0401ffc4 	movi	r16,2047
   4e758:	003e7a06 	br	4e144 <__alt_data_end+0xfffce144>
   4e75c:	2c62b03a 	or	r17,r5,r17
   4e760:	8822c03a 	cmpne	r17,r17,zero
   4e764:	0005883a 	mov	r2,zero
   4e768:	003f8a06 	br	4e594 <__alt_data_end+0xfffce594>
   4e76c:	3821883a 	mov	r16,r7
   4e770:	000b883a 	mov	r5,zero
   4e774:	0023883a 	mov	r17,zero
   4e778:	003ed206 	br	4e2c4 <__alt_data_end+0xfffce2c4>
   4e77c:	0101ffc4 	movi	r4,2047
   4e780:	51003b26 	beq	r10,r4,4e870 <__subdf3+0x7b8>
   4e784:	0085c83a 	sub	r2,zero,r2
   4e788:	29402034 	orhi	r5,r5,128
   4e78c:	01000e04 	movi	r4,56
   4e790:	20806216 	blt	r4,r2,4e91c <__subdf3+0x864>
   4e794:	010007c4 	movi	r4,31
   4e798:	20806b16 	blt	r4,r2,4e948 <__subdf3+0x890>
   4e79c:	01000804 	movi	r4,32
   4e7a0:	2089c83a 	sub	r4,r4,r2
   4e7a4:	2912983a 	sll	r9,r5,r4
   4e7a8:	888ed83a 	srl	r7,r17,r2
   4e7ac:	8908983a 	sll	r4,r17,r4
   4e7b0:	2884d83a 	srl	r2,r5,r2
   4e7b4:	49e2b03a 	or	r17,r9,r7
   4e7b8:	2008c03a 	cmpne	r4,r4,zero
   4e7bc:	8922b03a 	or	r17,r17,r4
   4e7c0:	89a3883a 	add	r17,r17,r6
   4e7c4:	10c5883a 	add	r2,r2,r3
   4e7c8:	898d803a 	cmpltu	r6,r17,r6
   4e7cc:	118b883a 	add	r5,r2,r6
   4e7d0:	5021883a 	mov	r16,r10
   4e7d4:	003ed506 	br	4e32c <__alt_data_end+0xfffce32c>
   4e7d8:	1984b03a 	or	r2,r3,r6
   4e7dc:	103e5926 	beq	r2,zero,4e144 <__alt_data_end+0xfffce144>
   4e7e0:	8989c83a 	sub	r4,r17,r6
   4e7e4:	8911803a 	cmpltu	r8,r17,r4
   4e7e8:	28c5c83a 	sub	r2,r5,r3
   4e7ec:	1205c83a 	sub	r2,r2,r8
   4e7f0:	1200202c 	andhi	r8,r2,128
   4e7f4:	403ef926 	beq	r8,zero,4e3dc <__alt_data_end+0xfffce3dc>
   4e7f8:	3463c83a 	sub	r17,r6,r17
   4e7fc:	194bc83a 	sub	r5,r3,r5
   4e800:	344d803a 	cmpltu	r6,r6,r17
   4e804:	298bc83a 	sub	r5,r5,r6
   4e808:	3825883a 	mov	r18,r7
   4e80c:	003e4d06 	br	4e144 <__alt_data_end+0xfffce144>
   4e810:	1984b03a 	or	r2,r3,r6
   4e814:	10002b26 	beq	r2,zero,4e8c4 <__subdf3+0x80c>
   4e818:	2808d0fa 	srli	r4,r5,3
   4e81c:	8822d0fa 	srli	r17,r17,3
   4e820:	280a977a 	slli	r5,r5,29
   4e824:	2080022c 	andhi	r2,r4,8
   4e828:	2c62b03a 	or	r17,r5,r17
   4e82c:	10000826 	beq	r2,zero,4e850 <__subdf3+0x798>
   4e830:	1810d0fa 	srli	r8,r3,3
   4e834:	4080022c 	andhi	r2,r8,8
   4e838:	1000051e 	bne	r2,zero,4e850 <__subdf3+0x798>
   4e83c:	300cd0fa 	srli	r6,r6,3
   4e840:	1804977a 	slli	r2,r3,29
   4e844:	4009883a 	mov	r4,r8
   4e848:	3825883a 	mov	r18,r7
   4e84c:	11a2b03a 	or	r17,r2,r6
   4e850:	880ad77a 	srli	r5,r17,29
   4e854:	200890fa 	slli	r4,r4,3
   4e858:	882290fa 	slli	r17,r17,3
   4e85c:	0401ffc4 	movi	r16,2047
   4e860:	290ab03a 	or	r5,r5,r4
   4e864:	003e3706 	br	4e144 <__alt_data_end+0xfffce144>
   4e868:	0101ffc4 	movi	r4,2047
   4e86c:	513fc71e 	bne	r10,r4,4e78c <__alt_data_end+0xfffce78c>
   4e870:	180b883a 	mov	r5,r3
   4e874:	3023883a 	mov	r17,r6
   4e878:	5021883a 	mov	r16,r10
   4e87c:	003e3106 	br	4e144 <__alt_data_end+0xfffce144>
   4e880:	10002d26 	beq	r2,zero,4e938 <__subdf3+0x880>
   4e884:	1984b03a 	or	r2,r3,r6
   4e888:	10000e26 	beq	r2,zero,4e8c4 <__subdf3+0x80c>
   4e88c:	2808d0fa 	srli	r4,r5,3
   4e890:	8822d0fa 	srli	r17,r17,3
   4e894:	280a977a 	slli	r5,r5,29
   4e898:	2080022c 	andhi	r2,r4,8
   4e89c:	2c62b03a 	or	r17,r5,r17
   4e8a0:	103feb26 	beq	r2,zero,4e850 <__alt_data_end+0xfffce850>
   4e8a4:	180ed0fa 	srli	r7,r3,3
   4e8a8:	3880022c 	andhi	r2,r7,8
   4e8ac:	103fe81e 	bne	r2,zero,4e850 <__alt_data_end+0xfffce850>
   4e8b0:	300cd0fa 	srli	r6,r6,3
   4e8b4:	1804977a 	slli	r2,r3,29
   4e8b8:	3809883a 	mov	r4,r7
   4e8bc:	11a2b03a 	or	r17,r2,r6
   4e8c0:	003fe306 	br	4e850 <__alt_data_end+0xfffce850>
   4e8c4:	0401ffc4 	movi	r16,2047
   4e8c8:	003e1e06 	br	4e144 <__alt_data_end+0xfffce144>
   4e8cc:	0005883a 	mov	r2,zero
   4e8d0:	003f8306 	br	4e6e0 <__alt_data_end+0xfffce6e0>
   4e8d4:	113ff804 	addi	r4,r2,-32
   4e8d8:	02000804 	movi	r8,32
   4e8dc:	2908d83a 	srl	r4,r5,r4
   4e8e0:	12002526 	beq	r2,r8,4e978 <__subdf3+0x8c0>
   4e8e4:	02001004 	movi	r8,64
   4e8e8:	4085c83a 	sub	r2,r8,r2
   4e8ec:	288a983a 	sll	r5,r5,r2
   4e8f0:	2c62b03a 	or	r17,r5,r17
   4e8f4:	8822c03a 	cmpne	r17,r17,zero
   4e8f8:	8922b03a 	or	r17,r17,r4
   4e8fc:	0005883a 	mov	r2,zero
   4e900:	003f2406 	br	4e594 <__alt_data_end+0xfffce594>
   4e904:	01402034 	movhi	r5,128
   4e908:	0011883a 	mov	r8,zero
   4e90c:	297fffc4 	addi	r5,r5,-1
   4e910:	047ffe04 	movi	r17,-8
   4e914:	0401ffc4 	movi	r16,2047
   4e918:	003e6a06 	br	4e2c4 <__alt_data_end+0xfffce2c4>
   4e91c:	2c62b03a 	or	r17,r5,r17
   4e920:	8822c03a 	cmpne	r17,r17,zero
   4e924:	0005883a 	mov	r2,zero
   4e928:	003fa506 	br	4e7c0 <__alt_data_end+0xfffce7c0>
   4e92c:	180b883a 	mov	r5,r3
   4e930:	3023883a 	mov	r17,r6
   4e934:	003e0306 	br	4e144 <__alt_data_end+0xfffce144>
   4e938:	180b883a 	mov	r5,r3
   4e93c:	3023883a 	mov	r17,r6
   4e940:	0401ffc4 	movi	r16,2047
   4e944:	003dff06 	br	4e144 <__alt_data_end+0xfffce144>
   4e948:	113ff804 	addi	r4,r2,-32
   4e94c:	01c00804 	movi	r7,32
   4e950:	2908d83a 	srl	r4,r5,r4
   4e954:	11c00a26 	beq	r2,r7,4e980 <__subdf3+0x8c8>
   4e958:	01c01004 	movi	r7,64
   4e95c:	3885c83a 	sub	r2,r7,r2
   4e960:	288a983a 	sll	r5,r5,r2
   4e964:	2c62b03a 	or	r17,r5,r17
   4e968:	8822c03a 	cmpne	r17,r17,zero
   4e96c:	8922b03a 	or	r17,r17,r4
   4e970:	0005883a 	mov	r2,zero
   4e974:	003f9206 	br	4e7c0 <__alt_data_end+0xfffce7c0>
   4e978:	000b883a 	mov	r5,zero
   4e97c:	003fdc06 	br	4e8f0 <__alt_data_end+0xfffce8f0>
   4e980:	000b883a 	mov	r5,zero
   4e984:	003ff706 	br	4e964 <__alt_data_end+0xfffce964>

0004e988 <__fixdfsi>:
   4e988:	2806d53a 	srli	r3,r5,20
   4e98c:	00800434 	movhi	r2,16
   4e990:	10bfffc4 	addi	r2,r2,-1
   4e994:	18c1ffcc 	andi	r3,r3,2047
   4e998:	0180ff84 	movi	r6,1022
   4e99c:	2884703a 	and	r2,r5,r2
   4e9a0:	280ad7fa 	srli	r5,r5,31
   4e9a4:	30c0130e 	bge	r6,r3,4e9f4 <__fixdfsi+0x6c>
   4e9a8:	01810744 	movi	r6,1053
   4e9ac:	30c00d16 	blt	r6,r3,4e9e4 <__fixdfsi+0x5c>
   4e9b0:	01810cc4 	movi	r6,1075
   4e9b4:	30cdc83a 	sub	r6,r6,r3
   4e9b8:	01c007c4 	movi	r7,31
   4e9bc:	10800434 	orhi	r2,r2,16
   4e9c0:	39800e0e 	bge	r7,r6,4e9fc <__fixdfsi+0x74>
   4e9c4:	010104c4 	movi	r4,1043
   4e9c8:	20c7c83a 	sub	r3,r4,r3
   4e9cc:	10c6d83a 	srl	r3,r2,r3
   4e9d0:	29403fcc 	andi	r5,r5,255
   4e9d4:	0145c83a 	sub	r2,zero,r5
   4e9d8:	1884f03a 	xor	r2,r3,r2
   4e9dc:	1145883a 	add	r2,r2,r5
   4e9e0:	f800283a 	ret
   4e9e4:	00a00034 	movhi	r2,32768
   4e9e8:	10bfffc4 	addi	r2,r2,-1
   4e9ec:	2885883a 	add	r2,r5,r2
   4e9f0:	f800283a 	ret
   4e9f4:	0005883a 	mov	r2,zero
   4e9f8:	f800283a 	ret
   4e9fc:	18fefb44 	addi	r3,r3,-1043
   4ea00:	2188d83a 	srl	r4,r4,r6
   4ea04:	10c6983a 	sll	r3,r2,r3
   4ea08:	20c6b03a 	or	r3,r4,r3
   4ea0c:	003ff006 	br	4e9d0 <__alt_data_end+0xfffce9d0>

0004ea10 <__floatsidf>:
   4ea10:	defffd04 	addi	sp,sp,-12
   4ea14:	dc400115 	stw	r17,4(sp)
   4ea18:	dfc00215 	stw	ra,8(sp)
   4ea1c:	dc000015 	stw	r16,0(sp)
   4ea20:	2023883a 	mov	r17,r4
   4ea24:	20001426 	beq	r4,zero,4ea78 <__floatsidf+0x68>
   4ea28:	2020d7fa 	srli	r16,r4,31
   4ea2c:	80000126 	beq	r16,zero,4ea34 <__floatsidf+0x24>
   4ea30:	0123c83a 	sub	r17,zero,r4
   4ea34:	8809883a 	mov	r4,r17
   4ea38:	004eb840 	call	4eb84 <__clzsi2>
   4ea3c:	01410784 	movi	r5,1054
   4ea40:	00c00284 	movi	r3,10
   4ea44:	288bc83a 	sub	r5,r5,r2
   4ea48:	18801c16 	blt	r3,r2,4eabc <__floatsidf+0xac>
   4ea4c:	00c002c4 	movi	r3,11
   4ea50:	1887c83a 	sub	r3,r3,r2
   4ea54:	88c8d83a 	srl	r4,r17,r3
   4ea58:	00c00434 	movhi	r3,16
   4ea5c:	18ffffc4 	addi	r3,r3,-1
   4ea60:	10800544 	addi	r2,r2,21
   4ea64:	20c8703a 	and	r4,r4,r3
   4ea68:	8884983a 	sll	r2,r17,r2
   4ea6c:	28c1ffcc 	andi	r3,r5,2047
   4ea70:	800d883a 	mov	r6,r16
   4ea74:	00000406 	br	4ea88 <__floatsidf+0x78>
   4ea78:	000d883a 	mov	r6,zero
   4ea7c:	0007883a 	mov	r3,zero
   4ea80:	0009883a 	mov	r4,zero
   4ea84:	0005883a 	mov	r2,zero
   4ea88:	180a953a 	slli	r5,r3,20
   4ea8c:	31803fcc 	andi	r6,r6,255
   4ea90:	00c00434 	movhi	r3,16
   4ea94:	300c97fa 	slli	r6,r6,31
   4ea98:	18ffffc4 	addi	r3,r3,-1
   4ea9c:	20c6703a 	and	r3,r4,r3
   4eaa0:	1946b03a 	or	r3,r3,r5
   4eaa4:	1986b03a 	or	r3,r3,r6
   4eaa8:	dfc00217 	ldw	ra,8(sp)
   4eaac:	dc400117 	ldw	r17,4(sp)
   4eab0:	dc000017 	ldw	r16,0(sp)
   4eab4:	dec00304 	addi	sp,sp,12
   4eab8:	f800283a 	ret
   4eabc:	10fffd44 	addi	r3,r2,-11
   4eac0:	88c8983a 	sll	r4,r17,r3
   4eac4:	00800434 	movhi	r2,16
   4eac8:	10bfffc4 	addi	r2,r2,-1
   4eacc:	2088703a 	and	r4,r4,r2
   4ead0:	28c1ffcc 	andi	r3,r5,2047
   4ead4:	800d883a 	mov	r6,r16
   4ead8:	0005883a 	mov	r2,zero
   4eadc:	003fea06 	br	4ea88 <__alt_data_end+0xfffcea88>

0004eae0 <__floatunsidf>:
   4eae0:	defffe04 	addi	sp,sp,-8
   4eae4:	dc000015 	stw	r16,0(sp)
   4eae8:	dfc00115 	stw	ra,4(sp)
   4eaec:	2021883a 	mov	r16,r4
   4eaf0:	20001026 	beq	r4,zero,4eb34 <__floatunsidf+0x54>
   4eaf4:	004eb840 	call	4eb84 <__clzsi2>
   4eaf8:	01410784 	movi	r5,1054
   4eafc:	100d883a 	mov	r6,r2
   4eb00:	288bc83a 	sub	r5,r5,r2
   4eb04:	00800284 	movi	r2,10
   4eb08:	11801616 	blt	r2,r6,4eb64 <__floatunsidf+0x84>
   4eb0c:	008002c4 	movi	r2,11
   4eb10:	1185c83a 	sub	r2,r2,r6
   4eb14:	8084d83a 	srl	r2,r16,r2
   4eb18:	00c00434 	movhi	r3,16
   4eb1c:	31c00544 	addi	r7,r6,21
   4eb20:	18ffffc4 	addi	r3,r3,-1
   4eb24:	81e0983a 	sll	r16,r16,r7
   4eb28:	10cc703a 	and	r6,r2,r3
   4eb2c:	2941ffcc 	andi	r5,r5,2047
   4eb30:	00000206 	br	4eb3c <__floatunsidf+0x5c>
   4eb34:	000b883a 	mov	r5,zero
   4eb38:	000d883a 	mov	r6,zero
   4eb3c:	280a953a 	slli	r5,r5,20
   4eb40:	00c00434 	movhi	r3,16
   4eb44:	18ffffc4 	addi	r3,r3,-1
   4eb48:	30c6703a 	and	r3,r6,r3
   4eb4c:	8005883a 	mov	r2,r16
   4eb50:	1946b03a 	or	r3,r3,r5
   4eb54:	dfc00117 	ldw	ra,4(sp)
   4eb58:	dc000017 	ldw	r16,0(sp)
   4eb5c:	dec00204 	addi	sp,sp,8
   4eb60:	f800283a 	ret
   4eb64:	31bffd44 	addi	r6,r6,-11
   4eb68:	818c983a 	sll	r6,r16,r6
   4eb6c:	00800434 	movhi	r2,16
   4eb70:	10bfffc4 	addi	r2,r2,-1
   4eb74:	2941ffcc 	andi	r5,r5,2047
   4eb78:	0021883a 	mov	r16,zero
   4eb7c:	308c703a 	and	r6,r6,r2
   4eb80:	003fee06 	br	4eb3c <__alt_data_end+0xfffceb3c>

0004eb84 <__clzsi2>:
   4eb84:	00bfffd4 	movui	r2,65535
   4eb88:	11000b36 	bltu	r2,r4,4ebb8 <__clzsi2+0x34>
   4eb8c:	00803fc4 	movi	r2,255
   4eb90:	1100122e 	bgeu	r2,r4,4ebdc <__clzsi2+0x58>
   4eb94:	00c00204 	movi	r3,8
   4eb98:	01400604 	movi	r5,24
   4eb9c:	20c8d83a 	srl	r4,r4,r3
   4eba0:	00800174 	movhi	r2,5
   4eba4:	10876404 	addi	r2,r2,7568
   4eba8:	1109883a 	add	r4,r2,r4
   4ebac:	20800003 	ldbu	r2,0(r4)
   4ebb0:	2885c83a 	sub	r2,r5,r2
   4ebb4:	f800283a 	ret
   4ebb8:	00804034 	movhi	r2,256
   4ebbc:	10bfffc4 	addi	r2,r2,-1
   4ebc0:	11000336 	bltu	r2,r4,4ebd0 <__clzsi2+0x4c>
   4ebc4:	00c00404 	movi	r3,16
   4ebc8:	180b883a 	mov	r5,r3
   4ebcc:	003ff306 	br	4eb9c <__alt_data_end+0xfffceb9c>
   4ebd0:	00c00604 	movi	r3,24
   4ebd4:	01400204 	movi	r5,8
   4ebd8:	003ff006 	br	4eb9c <__alt_data_end+0xfffceb9c>
   4ebdc:	0007883a 	mov	r3,zero
   4ebe0:	01400804 	movi	r5,32
   4ebe4:	003fed06 	br	4eb9c <__alt_data_end+0xfffceb9c>

0004ebe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ebe8:	defffe04 	addi	sp,sp,-8
   4ebec:	dfc00115 	stw	ra,4(sp)
   4ebf0:	df000015 	stw	fp,0(sp)
   4ebf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ebf8:	00800174 	movhi	r2,5
   4ebfc:	108e6704 	addi	r2,r2,14748
   4ec00:	10800017 	ldw	r2,0(r2)
   4ec04:	10000526 	beq	r2,zero,4ec1c <alt_get_errno+0x34>
   4ec08:	00800174 	movhi	r2,5
   4ec0c:	108e6704 	addi	r2,r2,14748
   4ec10:	10800017 	ldw	r2,0(r2)
   4ec14:	103ee83a 	callr	r2
   4ec18:	00000206 	br	4ec24 <alt_get_errno+0x3c>
   4ec1c:	00800174 	movhi	r2,5
   4ec20:	10952e04 	addi	r2,r2,21688
}
   4ec24:	e037883a 	mov	sp,fp
   4ec28:	dfc00117 	ldw	ra,4(sp)
   4ec2c:	df000017 	ldw	fp,0(sp)
   4ec30:	dec00204 	addi	sp,sp,8
   4ec34:	f800283a 	ret

0004ec38 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4ec38:	defffb04 	addi	sp,sp,-20
   4ec3c:	dfc00415 	stw	ra,16(sp)
   4ec40:	df000315 	stw	fp,12(sp)
   4ec44:	df000304 	addi	fp,sp,12
   4ec48:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4ec4c:	e0bfff17 	ldw	r2,-4(fp)
   4ec50:	10000816 	blt	r2,zero,4ec74 <close+0x3c>
   4ec54:	e13fff17 	ldw	r4,-4(fp)
   4ec58:	01400304 	movi	r5,12
   4ec5c:	004c3c40 	call	4c3c4 <__mulsi3>
   4ec60:	1007883a 	mov	r3,r2
   4ec64:	00800174 	movhi	r2,5
   4ec68:	1089e404 	addi	r2,r2,10128
   4ec6c:	1885883a 	add	r2,r3,r2
   4ec70:	00000106 	br	4ec78 <close+0x40>
   4ec74:	0005883a 	mov	r2,zero
   4ec78:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   4ec7c:	e0bffd17 	ldw	r2,-12(fp)
   4ec80:	10001926 	beq	r2,zero,4ece8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4ec84:	e0bffd17 	ldw	r2,-12(fp)
   4ec88:	10800017 	ldw	r2,0(r2)
   4ec8c:	10800417 	ldw	r2,16(r2)
   4ec90:	10000626 	beq	r2,zero,4ecac <close+0x74>
   4ec94:	e0bffd17 	ldw	r2,-12(fp)
   4ec98:	10800017 	ldw	r2,0(r2)
   4ec9c:	10800417 	ldw	r2,16(r2)
   4eca0:	e13ffd17 	ldw	r4,-12(fp)
   4eca4:	103ee83a 	callr	r2
   4eca8:	00000106 	br	4ecb0 <close+0x78>
   4ecac:	0005883a 	mov	r2,zero
   4ecb0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4ecb4:	e13fff17 	ldw	r4,-4(fp)
   4ecb8:	004f35c0 	call	4f35c <alt_release_fd>
    if (rval < 0)
   4ecbc:	e0bffe17 	ldw	r2,-8(fp)
   4ecc0:	1000070e 	bge	r2,zero,4ece0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   4ecc4:	004ebe80 	call	4ebe8 <alt_get_errno>
   4ecc8:	1007883a 	mov	r3,r2
   4eccc:	e0bffe17 	ldw	r2,-8(fp)
   4ecd0:	0085c83a 	sub	r2,zero,r2
   4ecd4:	18800015 	stw	r2,0(r3)
      return -1;
   4ecd8:	00bfffc4 	movi	r2,-1
   4ecdc:	00000706 	br	4ecfc <close+0xc4>
    }
    return 0;
   4ece0:	0005883a 	mov	r2,zero
   4ece4:	00000506 	br	4ecfc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4ece8:	004ebe80 	call	4ebe8 <alt_get_errno>
   4ecec:	1007883a 	mov	r3,r2
   4ecf0:	00801444 	movi	r2,81
   4ecf4:	18800015 	stw	r2,0(r3)
    return -1;
   4ecf8:	00bfffc4 	movi	r2,-1
  }
}
   4ecfc:	e037883a 	mov	sp,fp
   4ed00:	dfc00117 	ldw	ra,4(sp)
   4ed04:	df000017 	ldw	fp,0(sp)
   4ed08:	dec00204 	addi	sp,sp,8
   4ed0c:	f800283a 	ret

0004ed10 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   4ed10:	defffc04 	addi	sp,sp,-16
   4ed14:	df000315 	stw	fp,12(sp)
   4ed18:	df000304 	addi	fp,sp,12
   4ed1c:	e13ffd15 	stw	r4,-12(fp)
   4ed20:	e17ffe15 	stw	r5,-8(fp)
   4ed24:	e1bfff15 	stw	r6,-4(fp)
  return len;
   4ed28:	e0bfff17 	ldw	r2,-4(fp)
}
   4ed2c:	e037883a 	mov	sp,fp
   4ed30:	df000017 	ldw	fp,0(sp)
   4ed34:	dec00104 	addi	sp,sp,4
   4ed38:	f800283a 	ret

0004ed3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ed3c:	defffe04 	addi	sp,sp,-8
   4ed40:	dfc00115 	stw	ra,4(sp)
   4ed44:	df000015 	stw	fp,0(sp)
   4ed48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ed4c:	00800174 	movhi	r2,5
   4ed50:	108e6704 	addi	r2,r2,14748
   4ed54:	10800017 	ldw	r2,0(r2)
   4ed58:	10000526 	beq	r2,zero,4ed70 <alt_get_errno+0x34>
   4ed5c:	00800174 	movhi	r2,5
   4ed60:	108e6704 	addi	r2,r2,14748
   4ed64:	10800017 	ldw	r2,0(r2)
   4ed68:	103ee83a 	callr	r2
   4ed6c:	00000206 	br	4ed78 <alt_get_errno+0x3c>
   4ed70:	00800174 	movhi	r2,5
   4ed74:	10952e04 	addi	r2,r2,21688
}
   4ed78:	e037883a 	mov	sp,fp
   4ed7c:	dfc00117 	ldw	ra,4(sp)
   4ed80:	df000017 	ldw	fp,0(sp)
   4ed84:	dec00204 	addi	sp,sp,8
   4ed88:	f800283a 	ret

0004ed8c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4ed8c:	defffb04 	addi	sp,sp,-20
   4ed90:	dfc00415 	stw	ra,16(sp)
   4ed94:	df000315 	stw	fp,12(sp)
   4ed98:	df000304 	addi	fp,sp,12
   4ed9c:	e13ffe15 	stw	r4,-8(fp)
   4eda0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4eda4:	e0bffe17 	ldw	r2,-8(fp)
   4eda8:	10000816 	blt	r2,zero,4edcc <fstat+0x40>
   4edac:	e13ffe17 	ldw	r4,-8(fp)
   4edb0:	01400304 	movi	r5,12
   4edb4:	004c3c40 	call	4c3c4 <__mulsi3>
   4edb8:	1007883a 	mov	r3,r2
   4edbc:	00800174 	movhi	r2,5
   4edc0:	1089e404 	addi	r2,r2,10128
   4edc4:	1885883a 	add	r2,r3,r2
   4edc8:	00000106 	br	4edd0 <fstat+0x44>
   4edcc:	0005883a 	mov	r2,zero
   4edd0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4edd4:	e0bffd17 	ldw	r2,-12(fp)
   4edd8:	10001026 	beq	r2,zero,4ee1c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4eddc:	e0bffd17 	ldw	r2,-12(fp)
   4ede0:	10800017 	ldw	r2,0(r2)
   4ede4:	10800817 	ldw	r2,32(r2)
   4ede8:	10000726 	beq	r2,zero,4ee08 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   4edec:	e0bffd17 	ldw	r2,-12(fp)
   4edf0:	10800017 	ldw	r2,0(r2)
   4edf4:	10800817 	ldw	r2,32(r2)
   4edf8:	e13ffd17 	ldw	r4,-12(fp)
   4edfc:	e17fff17 	ldw	r5,-4(fp)
   4ee00:	103ee83a 	callr	r2
   4ee04:	00000a06 	br	4ee30 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4ee08:	e0bfff17 	ldw	r2,-4(fp)
   4ee0c:	00c80004 	movi	r3,8192
   4ee10:	10c00115 	stw	r3,4(r2)
      return 0;
   4ee14:	0005883a 	mov	r2,zero
   4ee18:	00000506 	br	4ee30 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4ee1c:	004ed3c0 	call	4ed3c <alt_get_errno>
   4ee20:	1007883a 	mov	r3,r2
   4ee24:	00801444 	movi	r2,81
   4ee28:	18800015 	stw	r2,0(r3)
    return -1;
   4ee2c:	00bfffc4 	movi	r2,-1
  }
}
   4ee30:	e037883a 	mov	sp,fp
   4ee34:	dfc00117 	ldw	ra,4(sp)
   4ee38:	df000017 	ldw	fp,0(sp)
   4ee3c:	dec00204 	addi	sp,sp,8
   4ee40:	f800283a 	ret

0004ee44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4ee44:	defffe04 	addi	sp,sp,-8
   4ee48:	dfc00115 	stw	ra,4(sp)
   4ee4c:	df000015 	stw	fp,0(sp)
   4ee50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4ee54:	00800174 	movhi	r2,5
   4ee58:	108e6704 	addi	r2,r2,14748
   4ee5c:	10800017 	ldw	r2,0(r2)
   4ee60:	10000526 	beq	r2,zero,4ee78 <alt_get_errno+0x34>
   4ee64:	00800174 	movhi	r2,5
   4ee68:	108e6704 	addi	r2,r2,14748
   4ee6c:	10800017 	ldw	r2,0(r2)
   4ee70:	103ee83a 	callr	r2
   4ee74:	00000206 	br	4ee80 <alt_get_errno+0x3c>
   4ee78:	00800174 	movhi	r2,5
   4ee7c:	10952e04 	addi	r2,r2,21688
}
   4ee80:	e037883a 	mov	sp,fp
   4ee84:	dfc00117 	ldw	ra,4(sp)
   4ee88:	df000017 	ldw	fp,0(sp)
   4ee8c:	dec00204 	addi	sp,sp,8
   4ee90:	f800283a 	ret

0004ee94 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4ee94:	deffed04 	addi	sp,sp,-76
   4ee98:	dfc01215 	stw	ra,72(sp)
   4ee9c:	df001115 	stw	fp,68(sp)
   4eea0:	df001104 	addi	fp,sp,68
   4eea4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4eea8:	e0bfff17 	ldw	r2,-4(fp)
   4eeac:	10000816 	blt	r2,zero,4eed0 <isatty+0x3c>
   4eeb0:	e13fff17 	ldw	r4,-4(fp)
   4eeb4:	01400304 	movi	r5,12
   4eeb8:	004c3c40 	call	4c3c4 <__mulsi3>
   4eebc:	1007883a 	mov	r3,r2
   4eec0:	00800174 	movhi	r2,5
   4eec4:	1089e404 	addi	r2,r2,10128
   4eec8:	1885883a 	add	r2,r3,r2
   4eecc:	00000106 	br	4eed4 <isatty+0x40>
   4eed0:	0005883a 	mov	r2,zero
   4eed4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4eed8:	e0bfef17 	ldw	r2,-68(fp)
   4eedc:	10000e26 	beq	r2,zero,4ef18 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4eee0:	e0bfef17 	ldw	r2,-68(fp)
   4eee4:	10800017 	ldw	r2,0(r2)
   4eee8:	10800817 	ldw	r2,32(r2)
   4eeec:	1000021e 	bne	r2,zero,4eef8 <isatty+0x64>
    {
      return 1;
   4eef0:	00800044 	movi	r2,1
   4eef4:	00000d06 	br	4ef2c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4eef8:	e0bff004 	addi	r2,fp,-64
   4eefc:	e13fff17 	ldw	r4,-4(fp)
   4ef00:	100b883a 	mov	r5,r2
   4ef04:	004ed8c0 	call	4ed8c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4ef08:	e0bff117 	ldw	r2,-60(fp)
   4ef0c:	10880020 	cmpeqi	r2,r2,8192
   4ef10:	10803fcc 	andi	r2,r2,255
   4ef14:	00000506 	br	4ef2c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4ef18:	004ee440 	call	4ee44 <alt_get_errno>
   4ef1c:	1007883a 	mov	r3,r2
   4ef20:	00801444 	movi	r2,81
   4ef24:	18800015 	stw	r2,0(r3)
    return 0;
   4ef28:	0005883a 	mov	r2,zero
  }
}
   4ef2c:	e037883a 	mov	sp,fp
   4ef30:	dfc00117 	ldw	ra,4(sp)
   4ef34:	df000017 	ldw	fp,0(sp)
   4ef38:	dec00204 	addi	sp,sp,8
   4ef3c:	f800283a 	ret

0004ef40 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   4ef40:	defffc04 	addi	sp,sp,-16
   4ef44:	df000315 	stw	fp,12(sp)
   4ef48:	df000304 	addi	fp,sp,12
   4ef4c:	e13ffd15 	stw	r4,-12(fp)
   4ef50:	e17ffe15 	stw	r5,-8(fp)
   4ef54:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   4ef58:	e0fffe17 	ldw	r3,-8(fp)
   4ef5c:	e0bffd17 	ldw	r2,-12(fp)
   4ef60:	18800c26 	beq	r3,r2,4ef94 <alt_load_section+0x54>
  {
    while( to != end )
   4ef64:	00000806 	br	4ef88 <alt_load_section+0x48>
    {
      *to++ = *from++;
   4ef68:	e0bffe17 	ldw	r2,-8(fp)
   4ef6c:	10c00104 	addi	r3,r2,4
   4ef70:	e0fffe15 	stw	r3,-8(fp)
   4ef74:	e0fffd17 	ldw	r3,-12(fp)
   4ef78:	19000104 	addi	r4,r3,4
   4ef7c:	e13ffd15 	stw	r4,-12(fp)
   4ef80:	18c00017 	ldw	r3,0(r3)
   4ef84:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4ef88:	e0fffe17 	ldw	r3,-8(fp)
   4ef8c:	e0bfff17 	ldw	r2,-4(fp)
   4ef90:	18bff51e 	bne	r3,r2,4ef68 <__alt_data_end+0xfffcef68>
    {
      *to++ = *from++;
    }
  }
}
   4ef94:	e037883a 	mov	sp,fp
   4ef98:	df000017 	ldw	fp,0(sp)
   4ef9c:	dec00104 	addi	sp,sp,4
   4efa0:	f800283a 	ret

0004efa4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4efa4:	defffe04 	addi	sp,sp,-8
   4efa8:	dfc00115 	stw	ra,4(sp)
   4efac:	df000015 	stw	fp,0(sp)
   4efb0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4efb4:	01000174 	movhi	r4,5
   4efb8:	210e6c04 	addi	r4,r4,14768
   4efbc:	01400174 	movhi	r5,5
   4efc0:	2947b104 	addi	r5,r5,7876
   4efc4:	01800174 	movhi	r6,5
   4efc8:	318e6c04 	addi	r6,r6,14768
   4efcc:	004ef400 	call	4ef40 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   4efd0:	01000134 	movhi	r4,4
   4efd4:	21000804 	addi	r4,r4,32
   4efd8:	01400134 	movhi	r5,4
   4efdc:	29400804 	addi	r5,r5,32
   4efe0:	01800134 	movhi	r6,4
   4efe4:	31806f04 	addi	r6,r6,444
   4efe8:	004ef400 	call	4ef40 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   4efec:	01000174 	movhi	r4,5
   4eff0:	21050b04 	addi	r4,r4,5164
   4eff4:	01400174 	movhi	r5,5
   4eff8:	29450b04 	addi	r5,r5,5164
   4effc:	01800174 	movhi	r6,5
   4f000:	3187b104 	addi	r6,r6,7876
   4f004:	004ef400 	call	4ef40 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4f008:	00503a40 	call	503a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   4f00c:	005056c0 	call	5056c <alt_icache_flush_all>
}
   4f010:	e037883a 	mov	sp,fp
   4f014:	dfc00117 	ldw	ra,4(sp)
   4f018:	df000017 	ldw	fp,0(sp)
   4f01c:	dec00204 	addi	sp,sp,8
   4f020:	f800283a 	ret

0004f024 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4f024:	defffe04 	addi	sp,sp,-8
   4f028:	dfc00115 	stw	ra,4(sp)
   4f02c:	df000015 	stw	fp,0(sp)
   4f030:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4f034:	00800174 	movhi	r2,5
   4f038:	108e6704 	addi	r2,r2,14748
   4f03c:	10800017 	ldw	r2,0(r2)
   4f040:	10000526 	beq	r2,zero,4f058 <alt_get_errno+0x34>
   4f044:	00800174 	movhi	r2,5
   4f048:	108e6704 	addi	r2,r2,14748
   4f04c:	10800017 	ldw	r2,0(r2)
   4f050:	103ee83a 	callr	r2
   4f054:	00000206 	br	4f060 <alt_get_errno+0x3c>
   4f058:	00800174 	movhi	r2,5
   4f05c:	10952e04 	addi	r2,r2,21688
}
   4f060:	e037883a 	mov	sp,fp
   4f064:	dfc00117 	ldw	ra,4(sp)
   4f068:	df000017 	ldw	fp,0(sp)
   4f06c:	dec00204 	addi	sp,sp,8
   4f070:	f800283a 	ret

0004f074 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4f074:	defff904 	addi	sp,sp,-28
   4f078:	dfc00615 	stw	ra,24(sp)
   4f07c:	df000515 	stw	fp,20(sp)
   4f080:	df000504 	addi	fp,sp,20
   4f084:	e13ffd15 	stw	r4,-12(fp)
   4f088:	e17ffe15 	stw	r5,-8(fp)
   4f08c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4f090:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4f094:	e0bffd17 	ldw	r2,-12(fp)
   4f098:	10000816 	blt	r2,zero,4f0bc <lseek+0x48>
   4f09c:	e13ffd17 	ldw	r4,-12(fp)
   4f0a0:	01400304 	movi	r5,12
   4f0a4:	004c3c40 	call	4c3c4 <__mulsi3>
   4f0a8:	1007883a 	mov	r3,r2
   4f0ac:	00800174 	movhi	r2,5
   4f0b0:	1089e404 	addi	r2,r2,10128
   4f0b4:	1885883a 	add	r2,r3,r2
   4f0b8:	00000106 	br	4f0c0 <lseek+0x4c>
   4f0bc:	0005883a 	mov	r2,zero
   4f0c0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4f0c4:	e0bffc17 	ldw	r2,-16(fp)
   4f0c8:	10001026 	beq	r2,zero,4f10c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4f0cc:	e0bffc17 	ldw	r2,-16(fp)
   4f0d0:	10800017 	ldw	r2,0(r2)
   4f0d4:	10800717 	ldw	r2,28(r2)
   4f0d8:	10000926 	beq	r2,zero,4f100 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4f0dc:	e0bffc17 	ldw	r2,-16(fp)
   4f0e0:	10800017 	ldw	r2,0(r2)
   4f0e4:	10800717 	ldw	r2,28(r2)
   4f0e8:	e13ffc17 	ldw	r4,-16(fp)
   4f0ec:	e17ffe17 	ldw	r5,-8(fp)
   4f0f0:	e1bfff17 	ldw	r6,-4(fp)
   4f0f4:	103ee83a 	callr	r2
   4f0f8:	e0bffb15 	stw	r2,-20(fp)
   4f0fc:	00000506 	br	4f114 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4f100:	00bfde84 	movi	r2,-134
   4f104:	e0bffb15 	stw	r2,-20(fp)
   4f108:	00000206 	br	4f114 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   4f10c:	00bfebc4 	movi	r2,-81
   4f110:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4f114:	e0bffb17 	ldw	r2,-20(fp)
   4f118:	1000070e 	bge	r2,zero,4f138 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   4f11c:	004f0240 	call	4f024 <alt_get_errno>
   4f120:	1007883a 	mov	r3,r2
   4f124:	e0bffb17 	ldw	r2,-20(fp)
   4f128:	0085c83a 	sub	r2,zero,r2
   4f12c:	18800015 	stw	r2,0(r3)
    rc = -1;
   4f130:	00bfffc4 	movi	r2,-1
   4f134:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4f138:	e0bffb17 	ldw	r2,-20(fp)
}
   4f13c:	e037883a 	mov	sp,fp
   4f140:	dfc00117 	ldw	ra,4(sp)
   4f144:	df000017 	ldw	fp,0(sp)
   4f148:	dec00204 	addi	sp,sp,8
   4f14c:	f800283a 	ret

0004f150 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4f150:	defffd04 	addi	sp,sp,-12
   4f154:	dfc00215 	stw	ra,8(sp)
   4f158:	df000115 	stw	fp,4(sp)
   4f15c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4f160:	0009883a 	mov	r4,zero
   4f164:	004f6440 	call	4f644 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   4f168:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4f16c:	004f6780 	call	4f678 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4f170:	01000174 	movhi	r4,5
   4f174:	2107a704 	addi	r4,r4,7836
   4f178:	01400174 	movhi	r5,5
   4f17c:	2947a704 	addi	r5,r5,7836
   4f180:	01800174 	movhi	r6,5
   4f184:	3187a704 	addi	r6,r6,7836
   4f188:	00509380 	call	50938 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   4f18c:	00504b40 	call	504b4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   4f190:	01000174 	movhi	r4,5
   4f194:	21014404 	addi	r4,r4,1296
   4f198:	00510880 	call	51088 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4f19c:	d126d317 	ldw	r4,-25780(gp)
   4f1a0:	d0e6d417 	ldw	r3,-25776(gp)
   4f1a4:	d0a6d517 	ldw	r2,-25772(gp)
   4f1a8:	180b883a 	mov	r5,r3
   4f1ac:	100d883a 	mov	r6,r2
   4f1b0:	00403880 	call	40388 <main>
   4f1b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   4f1b8:	01000044 	movi	r4,1
   4f1bc:	004ec380 	call	4ec38 <close>
  exit (result);
   4f1c0:	e13fff17 	ldw	r4,-4(fp)
   4f1c4:	005109c0 	call	5109c <exit>

0004f1c8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4f1c8:	defffe04 	addi	sp,sp,-8
   4f1cc:	df000115 	stw	fp,4(sp)
   4f1d0:	df000104 	addi	fp,sp,4
   4f1d4:	e13fff15 	stw	r4,-4(fp)
}
   4f1d8:	e037883a 	mov	sp,fp
   4f1dc:	df000017 	ldw	fp,0(sp)
   4f1e0:	dec00104 	addi	sp,sp,4
   4f1e4:	f800283a 	ret

0004f1e8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4f1e8:	defffe04 	addi	sp,sp,-8
   4f1ec:	df000115 	stw	fp,4(sp)
   4f1f0:	df000104 	addi	fp,sp,4
   4f1f4:	e13fff15 	stw	r4,-4(fp)
}
   4f1f8:	e037883a 	mov	sp,fp
   4f1fc:	df000017 	ldw	fp,0(sp)
   4f200:	dec00104 	addi	sp,sp,4
   4f204:	f800283a 	ret

0004f208 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4f208:	defffe04 	addi	sp,sp,-8
   4f20c:	dfc00115 	stw	ra,4(sp)
   4f210:	df000015 	stw	fp,0(sp)
   4f214:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4f218:	00800174 	movhi	r2,5
   4f21c:	108e6704 	addi	r2,r2,14748
   4f220:	10800017 	ldw	r2,0(r2)
   4f224:	10000526 	beq	r2,zero,4f23c <alt_get_errno+0x34>
   4f228:	00800174 	movhi	r2,5
   4f22c:	108e6704 	addi	r2,r2,14748
   4f230:	10800017 	ldw	r2,0(r2)
   4f234:	103ee83a 	callr	r2
   4f238:	00000206 	br	4f244 <alt_get_errno+0x3c>
   4f23c:	00800174 	movhi	r2,5
   4f240:	10952e04 	addi	r2,r2,21688
}
   4f244:	e037883a 	mov	sp,fp
   4f248:	dfc00117 	ldw	ra,4(sp)
   4f24c:	df000017 	ldw	fp,0(sp)
   4f250:	dec00204 	addi	sp,sp,8
   4f254:	f800283a 	ret

0004f258 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4f258:	defff904 	addi	sp,sp,-28
   4f25c:	dfc00615 	stw	ra,24(sp)
   4f260:	df000515 	stw	fp,20(sp)
   4f264:	df000504 	addi	fp,sp,20
   4f268:	e13ffd15 	stw	r4,-12(fp)
   4f26c:	e17ffe15 	stw	r5,-8(fp)
   4f270:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4f274:	e0bffd17 	ldw	r2,-12(fp)
   4f278:	10000816 	blt	r2,zero,4f29c <read+0x44>
   4f27c:	e13ffd17 	ldw	r4,-12(fp)
   4f280:	01400304 	movi	r5,12
   4f284:	004c3c40 	call	4c3c4 <__mulsi3>
   4f288:	1007883a 	mov	r3,r2
   4f28c:	00800174 	movhi	r2,5
   4f290:	1089e404 	addi	r2,r2,10128
   4f294:	1885883a 	add	r2,r3,r2
   4f298:	00000106 	br	4f2a0 <read+0x48>
   4f29c:	0005883a 	mov	r2,zero
   4f2a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4f2a4:	e0bffb17 	ldw	r2,-20(fp)
   4f2a8:	10002226 	beq	r2,zero,4f334 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4f2ac:	e0bffb17 	ldw	r2,-20(fp)
   4f2b0:	10800217 	ldw	r2,8(r2)
   4f2b4:	108000cc 	andi	r2,r2,3
   4f2b8:	10800060 	cmpeqi	r2,r2,1
   4f2bc:	1000181e 	bne	r2,zero,4f320 <read+0xc8>
        (fd->dev->read))
   4f2c0:	e0bffb17 	ldw	r2,-20(fp)
   4f2c4:	10800017 	ldw	r2,0(r2)
   4f2c8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4f2cc:	10001426 	beq	r2,zero,4f320 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4f2d0:	e0bffb17 	ldw	r2,-20(fp)
   4f2d4:	10800017 	ldw	r2,0(r2)
   4f2d8:	10800517 	ldw	r2,20(r2)
   4f2dc:	e0ffff17 	ldw	r3,-4(fp)
   4f2e0:	e13ffb17 	ldw	r4,-20(fp)
   4f2e4:	e17ffe17 	ldw	r5,-8(fp)
   4f2e8:	180d883a 	mov	r6,r3
   4f2ec:	103ee83a 	callr	r2
   4f2f0:	e0bffc15 	stw	r2,-16(fp)
   4f2f4:	e0bffc17 	ldw	r2,-16(fp)
   4f2f8:	1000070e 	bge	r2,zero,4f318 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   4f2fc:	004f2080 	call	4f208 <alt_get_errno>
   4f300:	1007883a 	mov	r3,r2
   4f304:	e0bffc17 	ldw	r2,-16(fp)
   4f308:	0085c83a 	sub	r2,zero,r2
   4f30c:	18800015 	stw	r2,0(r3)
          return -1;
   4f310:	00bfffc4 	movi	r2,-1
   4f314:	00000c06 	br	4f348 <read+0xf0>
        }
        return rval;
   4f318:	e0bffc17 	ldw	r2,-16(fp)
   4f31c:	00000a06 	br	4f348 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4f320:	004f2080 	call	4f208 <alt_get_errno>
   4f324:	1007883a 	mov	r3,r2
   4f328:	00800344 	movi	r2,13
   4f32c:	18800015 	stw	r2,0(r3)
   4f330:	00000406 	br	4f344 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4f334:	004f2080 	call	4f208 <alt_get_errno>
   4f338:	1007883a 	mov	r3,r2
   4f33c:	00801444 	movi	r2,81
   4f340:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4f344:	00bfffc4 	movi	r2,-1
}
   4f348:	e037883a 	mov	sp,fp
   4f34c:	dfc00117 	ldw	ra,4(sp)
   4f350:	df000017 	ldw	fp,0(sp)
   4f354:	dec00204 	addi	sp,sp,8
   4f358:	f800283a 	ret

0004f35c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4f35c:	defffc04 	addi	sp,sp,-16
   4f360:	dfc00315 	stw	ra,12(sp)
   4f364:	df000215 	stw	fp,8(sp)
   4f368:	dc000115 	stw	r16,4(sp)
   4f36c:	df000204 	addi	fp,sp,8
   4f370:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   4f374:	e0bffe17 	ldw	r2,-8(fp)
   4f378:	108000d0 	cmplti	r2,r2,3
   4f37c:	1000111e 	bne	r2,zero,4f3c4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   4f380:	04000174 	movhi	r16,5
   4f384:	8409e404 	addi	r16,r16,10128
   4f388:	e0bffe17 	ldw	r2,-8(fp)
   4f38c:	1009883a 	mov	r4,r2
   4f390:	01400304 	movi	r5,12
   4f394:	004c3c40 	call	4c3c4 <__mulsi3>
   4f398:	8085883a 	add	r2,r16,r2
   4f39c:	10800204 	addi	r2,r2,8
   4f3a0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   4f3a4:	04000174 	movhi	r16,5
   4f3a8:	8409e404 	addi	r16,r16,10128
   4f3ac:	e0bffe17 	ldw	r2,-8(fp)
   4f3b0:	1009883a 	mov	r4,r2
   4f3b4:	01400304 	movi	r5,12
   4f3b8:	004c3c40 	call	4c3c4 <__mulsi3>
   4f3bc:	8085883a 	add	r2,r16,r2
   4f3c0:	10000015 	stw	zero,0(r2)
  }
}
   4f3c4:	e6ffff04 	addi	sp,fp,-4
   4f3c8:	dfc00217 	ldw	ra,8(sp)
   4f3cc:	df000117 	ldw	fp,4(sp)
   4f3d0:	dc000017 	ldw	r16,0(sp)
   4f3d4:	dec00304 	addi	sp,sp,12
   4f3d8:	f800283a 	ret

0004f3dc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4f3dc:	defff904 	addi	sp,sp,-28
   4f3e0:	df000615 	stw	fp,24(sp)
   4f3e4:	df000604 	addi	fp,sp,24
   4f3e8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4f3ec:	0005303a 	rdctl	r2,status
   4f3f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4f3f4:	e0fffc17 	ldw	r3,-16(fp)
   4f3f8:	00bfff84 	movi	r2,-2
   4f3fc:	1884703a 	and	r2,r3,r2
   4f400:	1001703a 	wrctl	status,r2
  
  return context;
   4f404:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4f408:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4f40c:	d0a00c17 	ldw	r2,-32720(gp)
   4f410:	10c000c4 	addi	r3,r2,3
   4f414:	00bfff04 	movi	r2,-4
   4f418:	1884703a 	and	r2,r3,r2
   4f41c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4f420:	d0e00c17 	ldw	r3,-32720(gp)
   4f424:	e0bfff17 	ldw	r2,-4(fp)
   4f428:	1887883a 	add	r3,r3,r2
   4f42c:	00800234 	movhi	r2,8
   4f430:	10800004 	addi	r2,r2,0
   4f434:	10c0062e 	bgeu	r2,r3,4f450 <sbrk+0x74>
   4f438:	e0bffa17 	ldw	r2,-24(fp)
   4f43c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4f440:	e0bffd17 	ldw	r2,-12(fp)
   4f444:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4f448:	00bfffc4 	movi	r2,-1
   4f44c:	00000b06 	br	4f47c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4f450:	d0a00c17 	ldw	r2,-32720(gp)
   4f454:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   4f458:	d0e00c17 	ldw	r3,-32720(gp)
   4f45c:	e0bfff17 	ldw	r2,-4(fp)
   4f460:	1885883a 	add	r2,r3,r2
   4f464:	d0a00c15 	stw	r2,-32720(gp)
   4f468:	e0bffa17 	ldw	r2,-24(fp)
   4f46c:	e0bffe15 	stw	r2,-8(fp)
   4f470:	e0bffe17 	ldw	r2,-8(fp)
   4f474:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4f478:	e0bffb17 	ldw	r2,-20(fp)
} 
   4f47c:	e037883a 	mov	sp,fp
   4f480:	df000017 	ldw	fp,0(sp)
   4f484:	dec00104 	addi	sp,sp,4
   4f488:	f800283a 	ret

0004f48c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   4f48c:	defffd04 	addi	sp,sp,-12
   4f490:	dfc00215 	stw	ra,8(sp)
   4f494:	df000115 	stw	fp,4(sp)
   4f498:	df000104 	addi	fp,sp,4
   4f49c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   4f4a0:	e13fff17 	ldw	r4,-4(fp)
   4f4a4:	005024c0 	call	5024c <alt_busy_sleep>
}
   4f4a8:	e037883a 	mov	sp,fp
   4f4ac:	dfc00117 	ldw	ra,4(sp)
   4f4b0:	df000017 	ldw	fp,0(sp)
   4f4b4:	dec00204 	addi	sp,sp,8
   4f4b8:	f800283a 	ret

0004f4bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4f4bc:	defffe04 	addi	sp,sp,-8
   4f4c0:	dfc00115 	stw	ra,4(sp)
   4f4c4:	df000015 	stw	fp,0(sp)
   4f4c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4f4cc:	00800174 	movhi	r2,5
   4f4d0:	108e6704 	addi	r2,r2,14748
   4f4d4:	10800017 	ldw	r2,0(r2)
   4f4d8:	10000526 	beq	r2,zero,4f4f0 <alt_get_errno+0x34>
   4f4dc:	00800174 	movhi	r2,5
   4f4e0:	108e6704 	addi	r2,r2,14748
   4f4e4:	10800017 	ldw	r2,0(r2)
   4f4e8:	103ee83a 	callr	r2
   4f4ec:	00000206 	br	4f4f8 <alt_get_errno+0x3c>
   4f4f0:	00800174 	movhi	r2,5
   4f4f4:	10952e04 	addi	r2,r2,21688
}
   4f4f8:	e037883a 	mov	sp,fp
   4f4fc:	dfc00117 	ldw	ra,4(sp)
   4f500:	df000017 	ldw	fp,0(sp)
   4f504:	dec00204 	addi	sp,sp,8
   4f508:	f800283a 	ret

0004f50c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4f50c:	defff904 	addi	sp,sp,-28
   4f510:	dfc00615 	stw	ra,24(sp)
   4f514:	df000515 	stw	fp,20(sp)
   4f518:	df000504 	addi	fp,sp,20
   4f51c:	e13ffd15 	stw	r4,-12(fp)
   4f520:	e17ffe15 	stw	r5,-8(fp)
   4f524:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4f528:	e0bffd17 	ldw	r2,-12(fp)
   4f52c:	10000816 	blt	r2,zero,4f550 <write+0x44>
   4f530:	e13ffd17 	ldw	r4,-12(fp)
   4f534:	01400304 	movi	r5,12
   4f538:	004c3c40 	call	4c3c4 <__mulsi3>
   4f53c:	1007883a 	mov	r3,r2
   4f540:	00800174 	movhi	r2,5
   4f544:	1089e404 	addi	r2,r2,10128
   4f548:	1885883a 	add	r2,r3,r2
   4f54c:	00000106 	br	4f554 <write+0x48>
   4f550:	0005883a 	mov	r2,zero
   4f554:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4f558:	e0bffb17 	ldw	r2,-20(fp)
   4f55c:	10002126 	beq	r2,zero,4f5e4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4f560:	e0bffb17 	ldw	r2,-20(fp)
   4f564:	10800217 	ldw	r2,8(r2)
   4f568:	108000cc 	andi	r2,r2,3
   4f56c:	10001826 	beq	r2,zero,4f5d0 <write+0xc4>
   4f570:	e0bffb17 	ldw	r2,-20(fp)
   4f574:	10800017 	ldw	r2,0(r2)
   4f578:	10800617 	ldw	r2,24(r2)
   4f57c:	10001426 	beq	r2,zero,4f5d0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4f580:	e0bffb17 	ldw	r2,-20(fp)
   4f584:	10800017 	ldw	r2,0(r2)
   4f588:	10800617 	ldw	r2,24(r2)
   4f58c:	e0ffff17 	ldw	r3,-4(fp)
   4f590:	e13ffb17 	ldw	r4,-20(fp)
   4f594:	e17ffe17 	ldw	r5,-8(fp)
   4f598:	180d883a 	mov	r6,r3
   4f59c:	103ee83a 	callr	r2
   4f5a0:	e0bffc15 	stw	r2,-16(fp)
   4f5a4:	e0bffc17 	ldw	r2,-16(fp)
   4f5a8:	1000070e 	bge	r2,zero,4f5c8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   4f5ac:	004f4bc0 	call	4f4bc <alt_get_errno>
   4f5b0:	1007883a 	mov	r3,r2
   4f5b4:	e0bffc17 	ldw	r2,-16(fp)
   4f5b8:	0085c83a 	sub	r2,zero,r2
   4f5bc:	18800015 	stw	r2,0(r3)
        return -1;
   4f5c0:	00bfffc4 	movi	r2,-1
   4f5c4:	00000c06 	br	4f5f8 <write+0xec>
      }
      return rval;
   4f5c8:	e0bffc17 	ldw	r2,-16(fp)
   4f5cc:	00000a06 	br	4f5f8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4f5d0:	004f4bc0 	call	4f4bc <alt_get_errno>
   4f5d4:	1007883a 	mov	r3,r2
   4f5d8:	00800344 	movi	r2,13
   4f5dc:	18800015 	stw	r2,0(r3)
   4f5e0:	00000406 	br	4f5f4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4f5e4:	004f4bc0 	call	4f4bc <alt_get_errno>
   4f5e8:	1007883a 	mov	r3,r2
   4f5ec:	00801444 	movi	r2,81
   4f5f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4f5f4:	00bfffc4 	movi	r2,-1
}
   4f5f8:	e037883a 	mov	sp,fp
   4f5fc:	dfc00117 	ldw	ra,4(sp)
   4f600:	df000017 	ldw	fp,0(sp)
   4f604:	dec00204 	addi	sp,sp,8
   4f608:	f800283a 	ret

0004f60c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   4f60c:	defffd04 	addi	sp,sp,-12
   4f610:	dfc00215 	stw	ra,8(sp)
   4f614:	df000115 	stw	fp,4(sp)
   4f618:	df000104 	addi	fp,sp,4
   4f61c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4f620:	e13fff17 	ldw	r4,-4(fp)
   4f624:	01400174 	movhi	r5,5
   4f628:	294e6404 	addi	r5,r5,14736
   4f62c:	00504100 	call	50410 <alt_dev_llist_insert>
}
   4f630:	e037883a 	mov	sp,fp
   4f634:	dfc00117 	ldw	ra,4(sp)
   4f638:	df000017 	ldw	fp,0(sp)
   4f63c:	dec00204 	addi	sp,sp,8
   4f640:	f800283a 	ret

0004f644 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4f644:	defffd04 	addi	sp,sp,-12
   4f648:	dfc00215 	stw	ra,8(sp)
   4f64c:	df000115 	stw	fp,4(sp)
   4f650:	df000104 	addi	fp,sp,4
   4f654:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   4f658:	0050df00 	call	50df0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4f65c:	00800044 	movi	r2,1
   4f660:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4f664:	e037883a 	mov	sp,fp
   4f668:	dfc00117 	ldw	ra,4(sp)
   4f66c:	df000017 	ldw	fp,0(sp)
   4f670:	dec00204 	addi	sp,sp,8
   4f674:	f800283a 	ret

0004f678 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4f678:	defffe04 	addi	sp,sp,-8
   4f67c:	dfc00115 	stw	ra,4(sp)
   4f680:	df000015 	stw	fp,0(sp)
   4f684:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   4f688:	01000174 	movhi	r4,5
   4f68c:	210a4e04 	addi	r4,r4,10552
   4f690:	000b883a 	mov	r5,zero
   4f694:	000d883a 	mov	r6,zero
   4f698:	004f8240 	call	4f824 <altera_avalon_jtag_uart_init>
   4f69c:	01000174 	movhi	r4,5
   4f6a0:	210a4404 	addi	r4,r4,10512
   4f6a4:	004f60c0 	call	4f60c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   4f6a8:	0001883a 	nop
}
   4f6ac:	e037883a 	mov	sp,fp
   4f6b0:	dfc00117 	ldw	ra,4(sp)
   4f6b4:	df000017 	ldw	fp,0(sp)
   4f6b8:	dec00204 	addi	sp,sp,8
   4f6bc:	f800283a 	ret

0004f6c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   4f6c0:	defffa04 	addi	sp,sp,-24
   4f6c4:	dfc00515 	stw	ra,20(sp)
   4f6c8:	df000415 	stw	fp,16(sp)
   4f6cc:	df000404 	addi	fp,sp,16
   4f6d0:	e13ffd15 	stw	r4,-12(fp)
   4f6d4:	e17ffe15 	stw	r5,-8(fp)
   4f6d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4f6dc:	e0bffd17 	ldw	r2,-12(fp)
   4f6e0:	10800017 	ldw	r2,0(r2)
   4f6e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4f6e8:	e0bffc17 	ldw	r2,-16(fp)
   4f6ec:	10c00a04 	addi	r3,r2,40
   4f6f0:	e0bffd17 	ldw	r2,-12(fp)
   4f6f4:	10800217 	ldw	r2,8(r2)
   4f6f8:	1809883a 	mov	r4,r3
   4f6fc:	e17ffe17 	ldw	r5,-8(fp)
   4f700:	e1bfff17 	ldw	r6,-4(fp)
   4f704:	100f883a 	mov	r7,r2
   4f708:	004fce80 	call	4fce8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   4f70c:	e037883a 	mov	sp,fp
   4f710:	dfc00117 	ldw	ra,4(sp)
   4f714:	df000017 	ldw	fp,0(sp)
   4f718:	dec00204 	addi	sp,sp,8
   4f71c:	f800283a 	ret

0004f720 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   4f720:	defffa04 	addi	sp,sp,-24
   4f724:	dfc00515 	stw	ra,20(sp)
   4f728:	df000415 	stw	fp,16(sp)
   4f72c:	df000404 	addi	fp,sp,16
   4f730:	e13ffd15 	stw	r4,-12(fp)
   4f734:	e17ffe15 	stw	r5,-8(fp)
   4f738:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4f73c:	e0bffd17 	ldw	r2,-12(fp)
   4f740:	10800017 	ldw	r2,0(r2)
   4f744:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4f748:	e0bffc17 	ldw	r2,-16(fp)
   4f74c:	10c00a04 	addi	r3,r2,40
   4f750:	e0bffd17 	ldw	r2,-12(fp)
   4f754:	10800217 	ldw	r2,8(r2)
   4f758:	1809883a 	mov	r4,r3
   4f75c:	e17ffe17 	ldw	r5,-8(fp)
   4f760:	e1bfff17 	ldw	r6,-4(fp)
   4f764:	100f883a 	mov	r7,r2
   4f768:	004fef40 	call	4fef4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   4f76c:	e037883a 	mov	sp,fp
   4f770:	dfc00117 	ldw	ra,4(sp)
   4f774:	df000017 	ldw	fp,0(sp)
   4f778:	dec00204 	addi	sp,sp,8
   4f77c:	f800283a 	ret

0004f780 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   4f780:	defffc04 	addi	sp,sp,-16
   4f784:	dfc00315 	stw	ra,12(sp)
   4f788:	df000215 	stw	fp,8(sp)
   4f78c:	df000204 	addi	fp,sp,8
   4f790:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   4f794:	e0bfff17 	ldw	r2,-4(fp)
   4f798:	10800017 	ldw	r2,0(r2)
   4f79c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   4f7a0:	e0bffe17 	ldw	r2,-8(fp)
   4f7a4:	10c00a04 	addi	r3,r2,40
   4f7a8:	e0bfff17 	ldw	r2,-4(fp)
   4f7ac:	10800217 	ldw	r2,8(r2)
   4f7b0:	1809883a 	mov	r4,r3
   4f7b4:	100b883a 	mov	r5,r2
   4f7b8:	004fb940 	call	4fb94 <altera_avalon_jtag_uart_close>
}
   4f7bc:	e037883a 	mov	sp,fp
   4f7c0:	dfc00117 	ldw	ra,4(sp)
   4f7c4:	df000017 	ldw	fp,0(sp)
   4f7c8:	dec00204 	addi	sp,sp,8
   4f7cc:	f800283a 	ret

0004f7d0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   4f7d0:	defffa04 	addi	sp,sp,-24
   4f7d4:	dfc00515 	stw	ra,20(sp)
   4f7d8:	df000415 	stw	fp,16(sp)
   4f7dc:	df000404 	addi	fp,sp,16
   4f7e0:	e13ffd15 	stw	r4,-12(fp)
   4f7e4:	e17ffe15 	stw	r5,-8(fp)
   4f7e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   4f7ec:	e0bffd17 	ldw	r2,-12(fp)
   4f7f0:	10800017 	ldw	r2,0(r2)
   4f7f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   4f7f8:	e0bffc17 	ldw	r2,-16(fp)
   4f7fc:	10800a04 	addi	r2,r2,40
   4f800:	1009883a 	mov	r4,r2
   4f804:	e17ffe17 	ldw	r5,-8(fp)
   4f808:	e1bfff17 	ldw	r6,-4(fp)
   4f80c:	004fbfc0 	call	4fbfc <altera_avalon_jtag_uart_ioctl>
}
   4f810:	e037883a 	mov	sp,fp
   4f814:	dfc00117 	ldw	ra,4(sp)
   4f818:	df000017 	ldw	fp,0(sp)
   4f81c:	dec00204 	addi	sp,sp,8
   4f820:	f800283a 	ret

0004f824 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   4f824:	defffa04 	addi	sp,sp,-24
   4f828:	dfc00515 	stw	ra,20(sp)
   4f82c:	df000415 	stw	fp,16(sp)
   4f830:	df000404 	addi	fp,sp,16
   4f834:	e13ffd15 	stw	r4,-12(fp)
   4f838:	e17ffe15 	stw	r5,-8(fp)
   4f83c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4f840:	e0bffd17 	ldw	r2,-12(fp)
   4f844:	00c00044 	movi	r3,1
   4f848:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   4f84c:	e0bffd17 	ldw	r2,-12(fp)
   4f850:	10800017 	ldw	r2,0(r2)
   4f854:	10800104 	addi	r2,r2,4
   4f858:	1007883a 	mov	r3,r2
   4f85c:	e0bffd17 	ldw	r2,-12(fp)
   4f860:	10800817 	ldw	r2,32(r2)
   4f864:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4f868:	e0fffe17 	ldw	r3,-8(fp)
   4f86c:	e0bfff17 	ldw	r2,-4(fp)
   4f870:	d8000015 	stw	zero,0(sp)
   4f874:	1809883a 	mov	r4,r3
   4f878:	100b883a 	mov	r5,r2
   4f87c:	01800174 	movhi	r6,5
   4f880:	31be3a04 	addi	r6,r6,-1816
   4f884:	e1fffd17 	ldw	r7,-12(fp)
   4f888:	00505880 	call	50588 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   4f88c:	e0bffd17 	ldw	r2,-12(fp)
   4f890:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   4f894:	e0bffd17 	ldw	r2,-12(fp)
   4f898:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4f89c:	00800174 	movhi	r2,5
   4f8a0:	10953304 	addi	r2,r2,21708
   4f8a4:	10800017 	ldw	r2,0(r2)
   4f8a8:	1809883a 	mov	r4,r3
   4f8ac:	100b883a 	mov	r5,r2
   4f8b0:	01800174 	movhi	r6,5
   4f8b4:	31bebb04 	addi	r6,r6,-1300
   4f8b8:	e1fffd17 	ldw	r7,-12(fp)
   4f8bc:	005010c0 	call	5010c <alt_alarm_start>
   4f8c0:	1000040e 	bge	r2,zero,4f8d4 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   4f8c4:	e0fffd17 	ldw	r3,-12(fp)
   4f8c8:	00a00034 	movhi	r2,32768
   4f8cc:	10bfffc4 	addi	r2,r2,-1
   4f8d0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   4f8d4:	e037883a 	mov	sp,fp
   4f8d8:	dfc00117 	ldw	ra,4(sp)
   4f8dc:	df000017 	ldw	fp,0(sp)
   4f8e0:	dec00204 	addi	sp,sp,8
   4f8e4:	f800283a 	ret

0004f8e8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   4f8e8:	defff804 	addi	sp,sp,-32
   4f8ec:	df000715 	stw	fp,28(sp)
   4f8f0:	df000704 	addi	fp,sp,28
   4f8f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   4f8f8:	e0bfff17 	ldw	r2,-4(fp)
   4f8fc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   4f900:	e0bffb17 	ldw	r2,-20(fp)
   4f904:	10800017 	ldw	r2,0(r2)
   4f908:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4f90c:	e0bffc17 	ldw	r2,-16(fp)
   4f910:	10800104 	addi	r2,r2,4
   4f914:	10800037 	ldwio	r2,0(r2)
   4f918:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   4f91c:	e0bffd17 	ldw	r2,-12(fp)
   4f920:	1080c00c 	andi	r2,r2,768
   4f924:	1000011e 	bne	r2,zero,4f92c <altera_avalon_jtag_uart_irq+0x44>
      break;
   4f928:	00006c06 	br	4fadc <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   4f92c:	e0bffd17 	ldw	r2,-12(fp)
   4f930:	1080400c 	andi	r2,r2,256
   4f934:	10003426 	beq	r2,zero,4fa08 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4f938:	00800074 	movhi	r2,1
   4f93c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4f940:	e0bffb17 	ldw	r2,-20(fp)
   4f944:	10800a17 	ldw	r2,40(r2)
   4f948:	10800044 	addi	r2,r2,1
   4f94c:	1081ffcc 	andi	r2,r2,2047
   4f950:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   4f954:	e0bffb17 	ldw	r2,-20(fp)
   4f958:	10c00b17 	ldw	r3,44(r2)
   4f95c:	e0bffe17 	ldw	r2,-8(fp)
   4f960:	1880011e 	bne	r3,r2,4f968 <altera_avalon_jtag_uart_irq+0x80>
          break;
   4f964:	00001606 	br	4f9c0 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4f968:	e0bffc17 	ldw	r2,-16(fp)
   4f96c:	10800037 	ldwio	r2,0(r2)
   4f970:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   4f974:	e0bff917 	ldw	r2,-28(fp)
   4f978:	10a0000c 	andi	r2,r2,32768
   4f97c:	1000011e 	bne	r2,zero,4f984 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   4f980:	00000f06 	br	4f9c0 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4f984:	e0bffb17 	ldw	r2,-20(fp)
   4f988:	10800a17 	ldw	r2,40(r2)
   4f98c:	e0fff917 	ldw	r3,-28(fp)
   4f990:	1809883a 	mov	r4,r3
   4f994:	e0fffb17 	ldw	r3,-20(fp)
   4f998:	1885883a 	add	r2,r3,r2
   4f99c:	10800e04 	addi	r2,r2,56
   4f9a0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4f9a4:	e0bffb17 	ldw	r2,-20(fp)
   4f9a8:	10800a17 	ldw	r2,40(r2)
   4f9ac:	10800044 	addi	r2,r2,1
   4f9b0:	10c1ffcc 	andi	r3,r2,2047
   4f9b4:	e0bffb17 	ldw	r2,-20(fp)
   4f9b8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   4f9bc:	003fe006 	br	4f940 <__alt_data_end+0xfffcf940>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   4f9c0:	e0bff917 	ldw	r2,-28(fp)
   4f9c4:	10bfffec 	andhi	r2,r2,65535
   4f9c8:	10000f26 	beq	r2,zero,4fa08 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4f9cc:	e0bffb17 	ldw	r2,-20(fp)
   4f9d0:	10c00817 	ldw	r3,32(r2)
   4f9d4:	00bfff84 	movi	r2,-2
   4f9d8:	1886703a 	and	r3,r3,r2
   4f9dc:	e0bffb17 	ldw	r2,-20(fp)
   4f9e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   4f9e4:	e0bffc17 	ldw	r2,-16(fp)
   4f9e8:	10800104 	addi	r2,r2,4
   4f9ec:	1007883a 	mov	r3,r2
   4f9f0:	e0bffb17 	ldw	r2,-20(fp)
   4f9f4:	10800817 	ldw	r2,32(r2)
   4f9f8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4f9fc:	e0bffc17 	ldw	r2,-16(fp)
   4fa00:	10800104 	addi	r2,r2,4
   4fa04:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4fa08:	e0bffd17 	ldw	r2,-12(fp)
   4fa0c:	1080800c 	andi	r2,r2,512
   4fa10:	10003126 	beq	r2,zero,4fad8 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   4fa14:	e0bffd17 	ldw	r2,-12(fp)
   4fa18:	1004d43a 	srli	r2,r2,16
   4fa1c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   4fa20:	00001406 	br	4fa74 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4fa24:	e0bffc17 	ldw	r2,-16(fp)
   4fa28:	e0fffb17 	ldw	r3,-20(fp)
   4fa2c:	18c00d17 	ldw	r3,52(r3)
   4fa30:	e13ffb17 	ldw	r4,-20(fp)
   4fa34:	20c7883a 	add	r3,r4,r3
   4fa38:	18c20e04 	addi	r3,r3,2104
   4fa3c:	18c00003 	ldbu	r3,0(r3)
   4fa40:	18c03fcc 	andi	r3,r3,255
   4fa44:	18c0201c 	xori	r3,r3,128
   4fa48:	18ffe004 	addi	r3,r3,-128
   4fa4c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4fa50:	e0bffb17 	ldw	r2,-20(fp)
   4fa54:	10800d17 	ldw	r2,52(r2)
   4fa58:	10800044 	addi	r2,r2,1
   4fa5c:	10c1ffcc 	andi	r3,r2,2047
   4fa60:	e0bffb17 	ldw	r2,-20(fp)
   4fa64:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   4fa68:	e0bffa17 	ldw	r2,-24(fp)
   4fa6c:	10bfffc4 	addi	r2,r2,-1
   4fa70:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4fa74:	e0bffa17 	ldw	r2,-24(fp)
   4fa78:	10000526 	beq	r2,zero,4fa90 <altera_avalon_jtag_uart_irq+0x1a8>
   4fa7c:	e0bffb17 	ldw	r2,-20(fp)
   4fa80:	10c00d17 	ldw	r3,52(r2)
   4fa84:	e0bffb17 	ldw	r2,-20(fp)
   4fa88:	10800c17 	ldw	r2,48(r2)
   4fa8c:	18bfe51e 	bne	r3,r2,4fa24 <__alt_data_end+0xfffcfa24>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   4fa90:	e0bffa17 	ldw	r2,-24(fp)
   4fa94:	10001026 	beq	r2,zero,4fad8 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4fa98:	e0bffb17 	ldw	r2,-20(fp)
   4fa9c:	10c00817 	ldw	r3,32(r2)
   4faa0:	00bfff44 	movi	r2,-3
   4faa4:	1886703a 	and	r3,r3,r2
   4faa8:	e0bffb17 	ldw	r2,-20(fp)
   4faac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4fab0:	e0bffb17 	ldw	r2,-20(fp)
   4fab4:	10800017 	ldw	r2,0(r2)
   4fab8:	10800104 	addi	r2,r2,4
   4fabc:	1007883a 	mov	r3,r2
   4fac0:	e0bffb17 	ldw	r2,-20(fp)
   4fac4:	10800817 	ldw	r2,32(r2)
   4fac8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   4facc:	e0bffc17 	ldw	r2,-16(fp)
   4fad0:	10800104 	addi	r2,r2,4
   4fad4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4fad8:	003f8c06 	br	4f90c <__alt_data_end+0xfffcf90c>
}
   4fadc:	e037883a 	mov	sp,fp
   4fae0:	df000017 	ldw	fp,0(sp)
   4fae4:	dec00104 	addi	sp,sp,4
   4fae8:	f800283a 	ret

0004faec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   4faec:	defff804 	addi	sp,sp,-32
   4faf0:	df000715 	stw	fp,28(sp)
   4faf4:	df000704 	addi	fp,sp,28
   4faf8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   4fafc:	e0bffb17 	ldw	r2,-20(fp)
   4fb00:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   4fb04:	e0bff917 	ldw	r2,-28(fp)
   4fb08:	10800017 	ldw	r2,0(r2)
   4fb0c:	10800104 	addi	r2,r2,4
   4fb10:	10800037 	ldwio	r2,0(r2)
   4fb14:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   4fb18:	e0bffa17 	ldw	r2,-24(fp)
   4fb1c:	1081000c 	andi	r2,r2,1024
   4fb20:	10000b26 	beq	r2,zero,4fb50 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   4fb24:	e0bff917 	ldw	r2,-28(fp)
   4fb28:	10800017 	ldw	r2,0(r2)
   4fb2c:	10800104 	addi	r2,r2,4
   4fb30:	1007883a 	mov	r3,r2
   4fb34:	e0bff917 	ldw	r2,-28(fp)
   4fb38:	10800817 	ldw	r2,32(r2)
   4fb3c:	10810014 	ori	r2,r2,1024
   4fb40:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   4fb44:	e0bff917 	ldw	r2,-28(fp)
   4fb48:	10000915 	stw	zero,36(r2)
   4fb4c:	00000a06 	br	4fb78 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   4fb50:	e0bff917 	ldw	r2,-28(fp)
   4fb54:	10c00917 	ldw	r3,36(r2)
   4fb58:	00a00034 	movhi	r2,32768
   4fb5c:	10bfff04 	addi	r2,r2,-4
   4fb60:	10c00536 	bltu	r2,r3,4fb78 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   4fb64:	e0bff917 	ldw	r2,-28(fp)
   4fb68:	10800917 	ldw	r2,36(r2)
   4fb6c:	10c00044 	addi	r3,r2,1
   4fb70:	e0bff917 	ldw	r2,-28(fp)
   4fb74:	10c00915 	stw	r3,36(r2)
   4fb78:	00800174 	movhi	r2,5
   4fb7c:	10953304 	addi	r2,r2,21708
   4fb80:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   4fb84:	e037883a 	mov	sp,fp
   4fb88:	df000017 	ldw	fp,0(sp)
   4fb8c:	dec00104 	addi	sp,sp,4
   4fb90:	f800283a 	ret

0004fb94 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   4fb94:	defffd04 	addi	sp,sp,-12
   4fb98:	df000215 	stw	fp,8(sp)
   4fb9c:	df000204 	addi	fp,sp,8
   4fba0:	e13ffe15 	stw	r4,-8(fp)
   4fba4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4fba8:	00000506 	br	4fbc0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4fbac:	e0bfff17 	ldw	r2,-4(fp)
   4fbb0:	1090000c 	andi	r2,r2,16384
   4fbb4:	10000226 	beq	r2,zero,4fbc0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4fbb8:	00bffd44 	movi	r2,-11
   4fbbc:	00000b06 	br	4fbec <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4fbc0:	e0bffe17 	ldw	r2,-8(fp)
   4fbc4:	10c00d17 	ldw	r3,52(r2)
   4fbc8:	e0bffe17 	ldw	r2,-8(fp)
   4fbcc:	10800c17 	ldw	r2,48(r2)
   4fbd0:	18800526 	beq	r3,r2,4fbe8 <altera_avalon_jtag_uart_close+0x54>
   4fbd4:	e0bffe17 	ldw	r2,-8(fp)
   4fbd8:	10c00917 	ldw	r3,36(r2)
   4fbdc:	e0bffe17 	ldw	r2,-8(fp)
   4fbe0:	10800117 	ldw	r2,4(r2)
   4fbe4:	18bff136 	bltu	r3,r2,4fbac <__alt_data_end+0xfffcfbac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4fbe8:	0005883a 	mov	r2,zero
}
   4fbec:	e037883a 	mov	sp,fp
   4fbf0:	df000017 	ldw	fp,0(sp)
   4fbf4:	dec00104 	addi	sp,sp,4
   4fbf8:	f800283a 	ret

0004fbfc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   4fbfc:	defffa04 	addi	sp,sp,-24
   4fc00:	df000515 	stw	fp,20(sp)
   4fc04:	df000504 	addi	fp,sp,20
   4fc08:	e13ffd15 	stw	r4,-12(fp)
   4fc0c:	e17ffe15 	stw	r5,-8(fp)
   4fc10:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   4fc14:	00bff9c4 	movi	r2,-25
   4fc18:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   4fc1c:	e0bffe17 	ldw	r2,-8(fp)
   4fc20:	10da8060 	cmpeqi	r3,r2,27137
   4fc24:	1800031e 	bne	r3,zero,4fc34 <altera_avalon_jtag_uart_ioctl+0x38>
   4fc28:	109a80a0 	cmpeqi	r2,r2,27138
   4fc2c:	1000191e 	bne	r2,zero,4fc94 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   4fc30:	00002806 	br	4fcd4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   4fc34:	e0bffd17 	ldw	r2,-12(fp)
   4fc38:	10c00117 	ldw	r3,4(r2)
   4fc3c:	00a00034 	movhi	r2,32768
   4fc40:	10bfffc4 	addi	r2,r2,-1
   4fc44:	18801226 	beq	r3,r2,4fc90 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   4fc48:	e0bfff17 	ldw	r2,-4(fp)
   4fc4c:	10800017 	ldw	r2,0(r2)
   4fc50:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   4fc54:	e0bffc17 	ldw	r2,-16(fp)
   4fc58:	10800090 	cmplti	r2,r2,2
   4fc5c:	1000061e 	bne	r2,zero,4fc78 <altera_avalon_jtag_uart_ioctl+0x7c>
   4fc60:	e0fffc17 	ldw	r3,-16(fp)
   4fc64:	00a00034 	movhi	r2,32768
   4fc68:	10bfffc4 	addi	r2,r2,-1
   4fc6c:	18800226 	beq	r3,r2,4fc78 <altera_avalon_jtag_uart_ioctl+0x7c>
   4fc70:	e0bffc17 	ldw	r2,-16(fp)
   4fc74:	00000206 	br	4fc80 <altera_avalon_jtag_uart_ioctl+0x84>
   4fc78:	00a00034 	movhi	r2,32768
   4fc7c:	10bfff84 	addi	r2,r2,-2
   4fc80:	e0fffd17 	ldw	r3,-12(fp)
   4fc84:	18800115 	stw	r2,4(r3)
      rc = 0;
   4fc88:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4fc8c:	00001106 	br	4fcd4 <altera_avalon_jtag_uart_ioctl+0xd8>
   4fc90:	00001006 	br	4fcd4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   4fc94:	e0bffd17 	ldw	r2,-12(fp)
   4fc98:	10c00117 	ldw	r3,4(r2)
   4fc9c:	00a00034 	movhi	r2,32768
   4fca0:	10bfffc4 	addi	r2,r2,-1
   4fca4:	18800a26 	beq	r3,r2,4fcd0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   4fca8:	e0bffd17 	ldw	r2,-12(fp)
   4fcac:	10c00917 	ldw	r3,36(r2)
   4fcb0:	e0bffd17 	ldw	r2,-12(fp)
   4fcb4:	10800117 	ldw	r2,4(r2)
   4fcb8:	1885803a 	cmpltu	r2,r3,r2
   4fcbc:	10c03fcc 	andi	r3,r2,255
   4fcc0:	e0bfff17 	ldw	r2,-4(fp)
   4fcc4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   4fcc8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4fccc:	00000006 	br	4fcd0 <altera_avalon_jtag_uart_ioctl+0xd4>
   4fcd0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4fcd4:	e0bffb17 	ldw	r2,-20(fp)
}
   4fcd8:	e037883a 	mov	sp,fp
   4fcdc:	df000017 	ldw	fp,0(sp)
   4fce0:	dec00104 	addi	sp,sp,4
   4fce4:	f800283a 	ret

0004fce8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   4fce8:	defff304 	addi	sp,sp,-52
   4fcec:	dfc00c15 	stw	ra,48(sp)
   4fcf0:	df000b15 	stw	fp,44(sp)
   4fcf4:	df000b04 	addi	fp,sp,44
   4fcf8:	e13ffc15 	stw	r4,-16(fp)
   4fcfc:	e17ffd15 	stw	r5,-12(fp)
   4fd00:	e1bffe15 	stw	r6,-8(fp)
   4fd04:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   4fd08:	e0bffd17 	ldw	r2,-12(fp)
   4fd0c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4fd10:	00004906 	br	4fe38 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   4fd14:	e0bffc17 	ldw	r2,-16(fp)
   4fd18:	10800a17 	ldw	r2,40(r2)
   4fd1c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   4fd20:	e0bffc17 	ldw	r2,-16(fp)
   4fd24:	10800b17 	ldw	r2,44(r2)
   4fd28:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   4fd2c:	e0fff717 	ldw	r3,-36(fp)
   4fd30:	e0bff817 	ldw	r2,-32(fp)
   4fd34:	18800536 	bltu	r3,r2,4fd4c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   4fd38:	e0fff717 	ldw	r3,-36(fp)
   4fd3c:	e0bff817 	ldw	r2,-32(fp)
   4fd40:	1885c83a 	sub	r2,r3,r2
   4fd44:	e0bff615 	stw	r2,-40(fp)
   4fd48:	00000406 	br	4fd5c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   4fd4c:	00c20004 	movi	r3,2048
   4fd50:	e0bff817 	ldw	r2,-32(fp)
   4fd54:	1885c83a 	sub	r2,r3,r2
   4fd58:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4fd5c:	e0bff617 	ldw	r2,-40(fp)
   4fd60:	1000011e 	bne	r2,zero,4fd68 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   4fd64:	00001d06 	br	4fddc <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   4fd68:	e0fffe17 	ldw	r3,-8(fp)
   4fd6c:	e0bff617 	ldw	r2,-40(fp)
   4fd70:	1880022e 	bgeu	r3,r2,4fd7c <altera_avalon_jtag_uart_read+0x94>
        n = space;
   4fd74:	e0bffe17 	ldw	r2,-8(fp)
   4fd78:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   4fd7c:	e0bff817 	ldw	r2,-32(fp)
   4fd80:	10800e04 	addi	r2,r2,56
   4fd84:	e0fffc17 	ldw	r3,-16(fp)
   4fd88:	1885883a 	add	r2,r3,r2
   4fd8c:	e13ff517 	ldw	r4,-44(fp)
   4fd90:	100b883a 	mov	r5,r2
   4fd94:	e1bff617 	ldw	r6,-40(fp)
   4fd98:	0047b4c0 	call	47b4c <memcpy>
      ptr   += n;
   4fd9c:	e0fff517 	ldw	r3,-44(fp)
   4fda0:	e0bff617 	ldw	r2,-40(fp)
   4fda4:	1885883a 	add	r2,r3,r2
   4fda8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   4fdac:	e0fffe17 	ldw	r3,-8(fp)
   4fdb0:	e0bff617 	ldw	r2,-40(fp)
   4fdb4:	1885c83a 	sub	r2,r3,r2
   4fdb8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4fdbc:	e0fff817 	ldw	r3,-32(fp)
   4fdc0:	e0bff617 	ldw	r2,-40(fp)
   4fdc4:	1885883a 	add	r2,r3,r2
   4fdc8:	10c1ffcc 	andi	r3,r2,2047
   4fdcc:	e0bffc17 	ldw	r2,-16(fp)
   4fdd0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   4fdd4:	e0bffe17 	ldw	r2,-8(fp)
   4fdd8:	00bfce16 	blt	zero,r2,4fd14 <__alt_data_end+0xfffcfd14>

    /* If we read any data then return it */
    if (ptr != buffer)
   4fddc:	e0fff517 	ldw	r3,-44(fp)
   4fde0:	e0bffd17 	ldw	r2,-12(fp)
   4fde4:	18800126 	beq	r3,r2,4fdec <altera_avalon_jtag_uart_read+0x104>
      break;
   4fde8:	00001506 	br	4fe40 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   4fdec:	e0bfff17 	ldw	r2,-4(fp)
   4fdf0:	1090000c 	andi	r2,r2,16384
   4fdf4:	10000126 	beq	r2,zero,4fdfc <altera_avalon_jtag_uart_read+0x114>
      break;
   4fdf8:	00001106 	br	4fe40 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   4fdfc:	0001883a 	nop
   4fe00:	e0bffc17 	ldw	r2,-16(fp)
   4fe04:	10c00a17 	ldw	r3,40(r2)
   4fe08:	e0bff717 	ldw	r2,-36(fp)
   4fe0c:	1880051e 	bne	r3,r2,4fe24 <altera_avalon_jtag_uart_read+0x13c>
   4fe10:	e0bffc17 	ldw	r2,-16(fp)
   4fe14:	10c00917 	ldw	r3,36(r2)
   4fe18:	e0bffc17 	ldw	r2,-16(fp)
   4fe1c:	10800117 	ldw	r2,4(r2)
   4fe20:	18bff736 	bltu	r3,r2,4fe00 <__alt_data_end+0xfffcfe00>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   4fe24:	e0bffc17 	ldw	r2,-16(fp)
   4fe28:	10c00a17 	ldw	r3,40(r2)
   4fe2c:	e0bff717 	ldw	r2,-36(fp)
   4fe30:	1880011e 	bne	r3,r2,4fe38 <altera_avalon_jtag_uart_read+0x150>
      break;
   4fe34:	00000206 	br	4fe40 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   4fe38:	e0bffe17 	ldw	r2,-8(fp)
   4fe3c:	00bfb516 	blt	zero,r2,4fd14 <__alt_data_end+0xfffcfd14>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   4fe40:	e0fff517 	ldw	r3,-44(fp)
   4fe44:	e0bffd17 	ldw	r2,-12(fp)
   4fe48:	18801826 	beq	r3,r2,4feac <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4fe4c:	0005303a 	rdctl	r2,status
   4fe50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4fe54:	e0fffa17 	ldw	r3,-24(fp)
   4fe58:	00bfff84 	movi	r2,-2
   4fe5c:	1884703a 	and	r2,r3,r2
   4fe60:	1001703a 	wrctl	status,r2
  
  return context;
   4fe64:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   4fe68:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   4fe6c:	e0bffc17 	ldw	r2,-16(fp)
   4fe70:	10800817 	ldw	r2,32(r2)
   4fe74:	10c00054 	ori	r3,r2,1
   4fe78:	e0bffc17 	ldw	r2,-16(fp)
   4fe7c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   4fe80:	e0bffc17 	ldw	r2,-16(fp)
   4fe84:	10800017 	ldw	r2,0(r2)
   4fe88:	10800104 	addi	r2,r2,4
   4fe8c:	1007883a 	mov	r3,r2
   4fe90:	e0bffc17 	ldw	r2,-16(fp)
   4fe94:	10800817 	ldw	r2,32(r2)
   4fe98:	18800035 	stwio	r2,0(r3)
   4fe9c:	e0bff917 	ldw	r2,-28(fp)
   4fea0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4fea4:	e0bffb17 	ldw	r2,-20(fp)
   4fea8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   4feac:	e0fff517 	ldw	r3,-44(fp)
   4feb0:	e0bffd17 	ldw	r2,-12(fp)
   4feb4:	18800426 	beq	r3,r2,4fec8 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   4feb8:	e0fff517 	ldw	r3,-44(fp)
   4febc:	e0bffd17 	ldw	r2,-12(fp)
   4fec0:	1885c83a 	sub	r2,r3,r2
   4fec4:	00000606 	br	4fee0 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   4fec8:	e0bfff17 	ldw	r2,-4(fp)
   4fecc:	1090000c 	andi	r2,r2,16384
   4fed0:	10000226 	beq	r2,zero,4fedc <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   4fed4:	00bffd44 	movi	r2,-11
   4fed8:	00000106 	br	4fee0 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   4fedc:	00bffec4 	movi	r2,-5
}
   4fee0:	e037883a 	mov	sp,fp
   4fee4:	dfc00117 	ldw	ra,4(sp)
   4fee8:	df000017 	ldw	fp,0(sp)
   4feec:	dec00204 	addi	sp,sp,8
   4fef0:	f800283a 	ret

0004fef4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4fef4:	defff304 	addi	sp,sp,-52
   4fef8:	dfc00c15 	stw	ra,48(sp)
   4fefc:	df000b15 	stw	fp,44(sp)
   4ff00:	df000b04 	addi	fp,sp,44
   4ff04:	e13ffc15 	stw	r4,-16(fp)
   4ff08:	e17ffd15 	stw	r5,-12(fp)
   4ff0c:	e1bffe15 	stw	r6,-8(fp)
   4ff10:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   4ff14:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   4ff18:	e0bffd17 	ldw	r2,-12(fp)
   4ff1c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   4ff20:	00003806 	br	50004 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   4ff24:	e0bffc17 	ldw	r2,-16(fp)
   4ff28:	10800c17 	ldw	r2,48(r2)
   4ff2c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   4ff30:	e0bffc17 	ldw	r2,-16(fp)
   4ff34:	10800d17 	ldw	r2,52(r2)
   4ff38:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   4ff3c:	e0fff817 	ldw	r3,-32(fp)
   4ff40:	e0bff517 	ldw	r2,-44(fp)
   4ff44:	1880062e 	bgeu	r3,r2,4ff60 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   4ff48:	e0fff517 	ldw	r3,-44(fp)
   4ff4c:	e0bff817 	ldw	r2,-32(fp)
   4ff50:	1885c83a 	sub	r2,r3,r2
   4ff54:	10bfffc4 	addi	r2,r2,-1
   4ff58:	e0bff615 	stw	r2,-40(fp)
   4ff5c:	00000b06 	br	4ff8c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   4ff60:	e0bff517 	ldw	r2,-44(fp)
   4ff64:	10000526 	beq	r2,zero,4ff7c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   4ff68:	00c20004 	movi	r3,2048
   4ff6c:	e0bff817 	ldw	r2,-32(fp)
   4ff70:	1885c83a 	sub	r2,r3,r2
   4ff74:	e0bff615 	stw	r2,-40(fp)
   4ff78:	00000406 	br	4ff8c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   4ff7c:	00c1ffc4 	movi	r3,2047
   4ff80:	e0bff817 	ldw	r2,-32(fp)
   4ff84:	1885c83a 	sub	r2,r3,r2
   4ff88:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   4ff8c:	e0bff617 	ldw	r2,-40(fp)
   4ff90:	1000011e 	bne	r2,zero,4ff98 <altera_avalon_jtag_uart_write+0xa4>
        break;
   4ff94:	00001d06 	br	5000c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   4ff98:	e0fffe17 	ldw	r3,-8(fp)
   4ff9c:	e0bff617 	ldw	r2,-40(fp)
   4ffa0:	1880022e 	bgeu	r3,r2,4ffac <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   4ffa4:	e0bffe17 	ldw	r2,-8(fp)
   4ffa8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   4ffac:	e0bff817 	ldw	r2,-32(fp)
   4ffb0:	10820e04 	addi	r2,r2,2104
   4ffb4:	e0fffc17 	ldw	r3,-16(fp)
   4ffb8:	1885883a 	add	r2,r3,r2
   4ffbc:	1009883a 	mov	r4,r2
   4ffc0:	e17ffd17 	ldw	r5,-12(fp)
   4ffc4:	e1bff617 	ldw	r6,-40(fp)
   4ffc8:	0047b4c0 	call	47b4c <memcpy>
      ptr   += n;
   4ffcc:	e0fffd17 	ldw	r3,-12(fp)
   4ffd0:	e0bff617 	ldw	r2,-40(fp)
   4ffd4:	1885883a 	add	r2,r3,r2
   4ffd8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   4ffdc:	e0fffe17 	ldw	r3,-8(fp)
   4ffe0:	e0bff617 	ldw	r2,-40(fp)
   4ffe4:	1885c83a 	sub	r2,r3,r2
   4ffe8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4ffec:	e0fff817 	ldw	r3,-32(fp)
   4fff0:	e0bff617 	ldw	r2,-40(fp)
   4fff4:	1885883a 	add	r2,r3,r2
   4fff8:	10c1ffcc 	andi	r3,r2,2047
   4fffc:	e0bffc17 	ldw	r2,-16(fp)
   50000:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   50004:	e0bffe17 	ldw	r2,-8(fp)
   50008:	00bfc616 	blt	zero,r2,4ff24 <__alt_data_end+0xfffcff24>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5000c:	0005303a 	rdctl	r2,status
   50010:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50014:	e0fffa17 	ldw	r3,-24(fp)
   50018:	00bfff84 	movi	r2,-2
   5001c:	1884703a 	and	r2,r3,r2
   50020:	1001703a 	wrctl	status,r2
  
  return context;
   50024:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   50028:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   5002c:	e0bffc17 	ldw	r2,-16(fp)
   50030:	10800817 	ldw	r2,32(r2)
   50034:	10c00094 	ori	r3,r2,2
   50038:	e0bffc17 	ldw	r2,-16(fp)
   5003c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   50040:	e0bffc17 	ldw	r2,-16(fp)
   50044:	10800017 	ldw	r2,0(r2)
   50048:	10800104 	addi	r2,r2,4
   5004c:	1007883a 	mov	r3,r2
   50050:	e0bffc17 	ldw	r2,-16(fp)
   50054:	10800817 	ldw	r2,32(r2)
   50058:	18800035 	stwio	r2,0(r3)
   5005c:	e0bff917 	ldw	r2,-28(fp)
   50060:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50064:	e0bffb17 	ldw	r2,-20(fp)
   50068:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   5006c:	e0bffe17 	ldw	r2,-8(fp)
   50070:	0080120e 	bge	zero,r2,500bc <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   50074:	e0bfff17 	ldw	r2,-4(fp)
   50078:	1090000c 	andi	r2,r2,16384
   5007c:	10000126 	beq	r2,zero,50084 <altera_avalon_jtag_uart_write+0x190>
        break;
   50080:	00001006 	br	500c4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   50084:	0001883a 	nop
   50088:	e0bffc17 	ldw	r2,-16(fp)
   5008c:	10c00d17 	ldw	r3,52(r2)
   50090:	e0bff517 	ldw	r2,-44(fp)
   50094:	1880051e 	bne	r3,r2,500ac <altera_avalon_jtag_uart_write+0x1b8>
   50098:	e0bffc17 	ldw	r2,-16(fp)
   5009c:	10c00917 	ldw	r3,36(r2)
   500a0:	e0bffc17 	ldw	r2,-16(fp)
   500a4:	10800117 	ldw	r2,4(r2)
   500a8:	18bff736 	bltu	r3,r2,50088 <__alt_data_end+0xfffd0088>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   500ac:	e0bffc17 	ldw	r2,-16(fp)
   500b0:	10800917 	ldw	r2,36(r2)
   500b4:	10000126 	beq	r2,zero,500bc <altera_avalon_jtag_uart_write+0x1c8>
         break;
   500b8:	00000206 	br	500c4 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   500bc:	e0bffe17 	ldw	r2,-8(fp)
   500c0:	00bf9716 	blt	zero,r2,4ff20 <__alt_data_end+0xfffcff20>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   500c4:	e0fffd17 	ldw	r3,-12(fp)
   500c8:	e0bff717 	ldw	r2,-36(fp)
   500cc:	18800426 	beq	r3,r2,500e0 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   500d0:	e0fffd17 	ldw	r3,-12(fp)
   500d4:	e0bff717 	ldw	r2,-36(fp)
   500d8:	1885c83a 	sub	r2,r3,r2
   500dc:	00000606 	br	500f8 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   500e0:	e0bfff17 	ldw	r2,-4(fp)
   500e4:	1090000c 	andi	r2,r2,16384
   500e8:	10000226 	beq	r2,zero,500f4 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   500ec:	00bffd44 	movi	r2,-11
   500f0:	00000106 	br	500f8 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   500f4:	00bffec4 	movi	r2,-5
}
   500f8:	e037883a 	mov	sp,fp
   500fc:	dfc00117 	ldw	ra,4(sp)
   50100:	df000017 	ldw	fp,0(sp)
   50104:	dec00204 	addi	sp,sp,8
   50108:	f800283a 	ret

0005010c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   5010c:	defff504 	addi	sp,sp,-44
   50110:	df000a15 	stw	fp,40(sp)
   50114:	df000a04 	addi	fp,sp,40
   50118:	e13ffc15 	stw	r4,-16(fp)
   5011c:	e17ffd15 	stw	r5,-12(fp)
   50120:	e1bffe15 	stw	r6,-8(fp)
   50124:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   50128:	e03ff615 	stw	zero,-40(fp)
   5012c:	00800174 	movhi	r2,5
   50130:	10953304 	addi	r2,r2,21708
   50134:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   50138:	10003f26 	beq	r2,zero,50238 <alt_alarm_start+0x12c>
  {
    if (alarm)
   5013c:	e0bffc17 	ldw	r2,-16(fp)
   50140:	10003b26 	beq	r2,zero,50230 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   50144:	e0bffc17 	ldw	r2,-16(fp)
   50148:	e0fffe17 	ldw	r3,-8(fp)
   5014c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   50150:	e0bffc17 	ldw	r2,-16(fp)
   50154:	e0ffff17 	ldw	r3,-4(fp)
   50158:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   5015c:	0005303a 	rdctl	r2,status
   50160:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50164:	e0fff817 	ldw	r3,-32(fp)
   50168:	00bfff84 	movi	r2,-2
   5016c:	1884703a 	and	r2,r3,r2
   50170:	1001703a 	wrctl	status,r2
  
  return context;
   50174:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   50178:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   5017c:	00800174 	movhi	r2,5
   50180:	10953404 	addi	r2,r2,21712
   50184:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   50188:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   5018c:	e0fffd17 	ldw	r3,-12(fp)
   50190:	e0bff617 	ldw	r2,-40(fp)
   50194:	1885883a 	add	r2,r3,r2
   50198:	10c00044 	addi	r3,r2,1
   5019c:	e0bffc17 	ldw	r2,-16(fp)
   501a0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   501a4:	e0bffc17 	ldw	r2,-16(fp)
   501a8:	10c00217 	ldw	r3,8(r2)
   501ac:	e0bff617 	ldw	r2,-40(fp)
   501b0:	1880042e 	bgeu	r3,r2,501c4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   501b4:	e0bffc17 	ldw	r2,-16(fp)
   501b8:	00c00044 	movi	r3,1
   501bc:	10c00405 	stb	r3,16(r2)
   501c0:	00000206 	br	501cc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   501c4:	e0bffc17 	ldw	r2,-16(fp)
   501c8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   501cc:	e0fffc17 	ldw	r3,-16(fp)
   501d0:	00800174 	movhi	r2,5
   501d4:	108e6a04 	addi	r2,r2,14760
   501d8:	e0bff915 	stw	r2,-28(fp)
   501dc:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   501e0:	e0bffa17 	ldw	r2,-24(fp)
   501e4:	e0fff917 	ldw	r3,-28(fp)
   501e8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   501ec:	e0bff917 	ldw	r2,-28(fp)
   501f0:	10c00017 	ldw	r3,0(r2)
   501f4:	e0bffa17 	ldw	r2,-24(fp)
   501f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   501fc:	e0bff917 	ldw	r2,-28(fp)
   50200:	10800017 	ldw	r2,0(r2)
   50204:	e0fffa17 	ldw	r3,-24(fp)
   50208:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   5020c:	e0bff917 	ldw	r2,-28(fp)
   50210:	e0fffa17 	ldw	r3,-24(fp)
   50214:	10c00015 	stw	r3,0(r2)
   50218:	e0bff717 	ldw	r2,-36(fp)
   5021c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50220:	e0bffb17 	ldw	r2,-20(fp)
   50224:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   50228:	0005883a 	mov	r2,zero
   5022c:	00000306 	br	5023c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   50230:	00bffa84 	movi	r2,-22
   50234:	00000106 	br	5023c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   50238:	00bfde84 	movi	r2,-134
  }
}
   5023c:	e037883a 	mov	sp,fp
   50240:	df000017 	ldw	fp,0(sp)
   50244:	dec00104 	addi	sp,sp,4
   50248:	f800283a 	ret

0005024c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   5024c:	defffa04 	addi	sp,sp,-24
   50250:	dfc00515 	stw	ra,20(sp)
   50254:	df000415 	stw	fp,16(sp)
   50258:	df000404 	addi	fp,sp,16
   5025c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   50260:	00800244 	movi	r2,9
   50264:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   50268:	e13ffd17 	ldw	r4,-12(fp)
   5026c:	014003f4 	movhi	r5,15
   50270:	29509004 	addi	r5,r5,16960
   50274:	004c3c40 	call	4c3c4 <__mulsi3>
   50278:	0100bef4 	movhi	r4,763
   5027c:	213c2004 	addi	r4,r4,-3968
   50280:	100b883a 	mov	r5,r2
   50284:	004c3b40 	call	4c3b4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   50288:	01200034 	movhi	r4,32768
   5028c:	213fffc4 	addi	r4,r4,-1
   50290:	100b883a 	mov	r5,r2
   50294:	004c3b40 	call	4c3b4 <__udivsi3>
   50298:	e13fff17 	ldw	r4,-4(fp)
   5029c:	100b883a 	mov	r5,r2
   502a0:	004c3b40 	call	4c3b4 <__udivsi3>
   502a4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   502a8:	e0bffe17 	ldw	r2,-8(fp)
   502ac:	10002a26 	beq	r2,zero,50358 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   502b0:	e03ffc15 	stw	zero,-16(fp)
   502b4:	00001706 	br	50314 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   502b8:	00a00034 	movhi	r2,32768
   502bc:	10bfffc4 	addi	r2,r2,-1
   502c0:	10bfffc4 	addi	r2,r2,-1
   502c4:	103ffe1e 	bne	r2,zero,502c0 <__alt_data_end+0xfffd02c0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   502c8:	e13ffd17 	ldw	r4,-12(fp)
   502cc:	014003f4 	movhi	r5,15
   502d0:	29509004 	addi	r5,r5,16960
   502d4:	004c3c40 	call	4c3c4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   502d8:	0100bef4 	movhi	r4,763
   502dc:	213c2004 	addi	r4,r4,-3968
   502e0:	100b883a 	mov	r5,r2
   502e4:	004c3b40 	call	4c3b4 <__udivsi3>
   502e8:	01200034 	movhi	r4,32768
   502ec:	213fffc4 	addi	r4,r4,-1
   502f0:	100b883a 	mov	r5,r2
   502f4:	004c3b40 	call	4c3b4 <__udivsi3>
   502f8:	1007883a 	mov	r3,r2
   502fc:	e0bfff17 	ldw	r2,-4(fp)
   50300:	10c5c83a 	sub	r2,r2,r3
   50304:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   50308:	e0bffc17 	ldw	r2,-16(fp)
   5030c:	10800044 	addi	r2,r2,1
   50310:	e0bffc15 	stw	r2,-16(fp)
   50314:	e0fffc17 	ldw	r3,-16(fp)
   50318:	e0bffe17 	ldw	r2,-8(fp)
   5031c:	18bfe616 	blt	r3,r2,502b8 <__alt_data_end+0xfffd02b8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   50320:	e13ffd17 	ldw	r4,-12(fp)
   50324:	014003f4 	movhi	r5,15
   50328:	29509004 	addi	r5,r5,16960
   5032c:	004c3c40 	call	4c3c4 <__mulsi3>
   50330:	0100bef4 	movhi	r4,763
   50334:	213c2004 	addi	r4,r4,-3968
   50338:	100b883a 	mov	r5,r2
   5033c:	004c3b40 	call	4c3b4 <__udivsi3>
   50340:	1009883a 	mov	r4,r2
   50344:	e17fff17 	ldw	r5,-4(fp)
   50348:	004c3c40 	call	4c3c4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   5034c:	10bfffc4 	addi	r2,r2,-1
   50350:	103ffe1e 	bne	r2,zero,5034c <__alt_data_end+0xfffd034c>
   50354:	00000d06 	br	5038c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   50358:	e13ffd17 	ldw	r4,-12(fp)
   5035c:	014003f4 	movhi	r5,15
   50360:	29509004 	addi	r5,r5,16960
   50364:	004c3c40 	call	4c3c4 <__mulsi3>
   50368:	0100bef4 	movhi	r4,763
   5036c:	213c2004 	addi	r4,r4,-3968
   50370:	100b883a 	mov	r5,r2
   50374:	004c3b40 	call	4c3b4 <__udivsi3>
   50378:	1009883a 	mov	r4,r2
   5037c:	e17fff17 	ldw	r5,-4(fp)
   50380:	004c3c40 	call	4c3c4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   50384:	10bfffc4 	addi	r2,r2,-1
   50388:	00bffe16 	blt	zero,r2,50384 <__alt_data_end+0xfffd0384>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   5038c:	0005883a 	mov	r2,zero
}
   50390:	e037883a 	mov	sp,fp
   50394:	dfc00117 	ldw	ra,4(sp)
   50398:	df000017 	ldw	fp,0(sp)
   5039c:	dec00204 	addi	sp,sp,8
   503a0:	f800283a 	ret

000503a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   503a4:	deffff04 	addi	sp,sp,-4
   503a8:	df000015 	stw	fp,0(sp)
   503ac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   503b0:	e037883a 	mov	sp,fp
   503b4:	df000017 	ldw	fp,0(sp)
   503b8:	dec00104 	addi	sp,sp,4
   503bc:	f800283a 	ret

000503c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   503c0:	defffe04 	addi	sp,sp,-8
   503c4:	dfc00115 	stw	ra,4(sp)
   503c8:	df000015 	stw	fp,0(sp)
   503cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   503d0:	00800174 	movhi	r2,5
   503d4:	108e6704 	addi	r2,r2,14748
   503d8:	10800017 	ldw	r2,0(r2)
   503dc:	10000526 	beq	r2,zero,503f4 <alt_get_errno+0x34>
   503e0:	00800174 	movhi	r2,5
   503e4:	108e6704 	addi	r2,r2,14748
   503e8:	10800017 	ldw	r2,0(r2)
   503ec:	103ee83a 	callr	r2
   503f0:	00000206 	br	503fc <alt_get_errno+0x3c>
   503f4:	00800174 	movhi	r2,5
   503f8:	10952e04 	addi	r2,r2,21688
}
   503fc:	e037883a 	mov	sp,fp
   50400:	dfc00117 	ldw	ra,4(sp)
   50404:	df000017 	ldw	fp,0(sp)
   50408:	dec00204 	addi	sp,sp,8
   5040c:	f800283a 	ret

00050410 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   50410:	defffa04 	addi	sp,sp,-24
   50414:	dfc00515 	stw	ra,20(sp)
   50418:	df000415 	stw	fp,16(sp)
   5041c:	df000404 	addi	fp,sp,16
   50420:	e13ffe15 	stw	r4,-8(fp)
   50424:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   50428:	e0bffe17 	ldw	r2,-8(fp)
   5042c:	10000326 	beq	r2,zero,5043c <alt_dev_llist_insert+0x2c>
   50430:	e0bffe17 	ldw	r2,-8(fp)
   50434:	10800217 	ldw	r2,8(r2)
   50438:	1000061e 	bne	r2,zero,50454 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   5043c:	00503c00 	call	503c0 <alt_get_errno>
   50440:	1007883a 	mov	r3,r2
   50444:	00800584 	movi	r2,22
   50448:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   5044c:	00bffa84 	movi	r2,-22
   50450:	00001306 	br	504a0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   50454:	e0bffe17 	ldw	r2,-8(fp)
   50458:	e0ffff17 	ldw	r3,-4(fp)
   5045c:	e0fffc15 	stw	r3,-16(fp)
   50460:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   50464:	e0bffd17 	ldw	r2,-12(fp)
   50468:	e0fffc17 	ldw	r3,-16(fp)
   5046c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   50470:	e0bffc17 	ldw	r2,-16(fp)
   50474:	10c00017 	ldw	r3,0(r2)
   50478:	e0bffd17 	ldw	r2,-12(fp)
   5047c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   50480:	e0bffc17 	ldw	r2,-16(fp)
   50484:	10800017 	ldw	r2,0(r2)
   50488:	e0fffd17 	ldw	r3,-12(fp)
   5048c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   50490:	e0bffc17 	ldw	r2,-16(fp)
   50494:	e0fffd17 	ldw	r3,-12(fp)
   50498:	10c00015 	stw	r3,0(r2)

  return 0;  
   5049c:	0005883a 	mov	r2,zero
}
   504a0:	e037883a 	mov	sp,fp
   504a4:	dfc00117 	ldw	ra,4(sp)
   504a8:	df000017 	ldw	fp,0(sp)
   504ac:	dec00204 	addi	sp,sp,8
   504b0:	f800283a 	ret

000504b4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   504b4:	defffd04 	addi	sp,sp,-12
   504b8:	dfc00215 	stw	ra,8(sp)
   504bc:	df000115 	stw	fp,4(sp)
   504c0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   504c4:	00800174 	movhi	r2,5
   504c8:	10850a04 	addi	r2,r2,5160
   504cc:	e0bfff15 	stw	r2,-4(fp)
   504d0:	00000606 	br	504ec <_do_ctors+0x38>
        (*ctor) (); 
   504d4:	e0bfff17 	ldw	r2,-4(fp)
   504d8:	10800017 	ldw	r2,0(r2)
   504dc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   504e0:	e0bfff17 	ldw	r2,-4(fp)
   504e4:	10bfff04 	addi	r2,r2,-4
   504e8:	e0bfff15 	stw	r2,-4(fp)
   504ec:	e0ffff17 	ldw	r3,-4(fp)
   504f0:	00800174 	movhi	r2,5
   504f4:	10850b04 	addi	r2,r2,5164
   504f8:	18bff62e 	bgeu	r3,r2,504d4 <__alt_data_end+0xfffd04d4>
        (*ctor) (); 
}
   504fc:	e037883a 	mov	sp,fp
   50500:	dfc00117 	ldw	ra,4(sp)
   50504:	df000017 	ldw	fp,0(sp)
   50508:	dec00204 	addi	sp,sp,8
   5050c:	f800283a 	ret

00050510 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   50510:	defffd04 	addi	sp,sp,-12
   50514:	dfc00215 	stw	ra,8(sp)
   50518:	df000115 	stw	fp,4(sp)
   5051c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   50520:	00800174 	movhi	r2,5
   50524:	10850a04 	addi	r2,r2,5160
   50528:	e0bfff15 	stw	r2,-4(fp)
   5052c:	00000606 	br	50548 <_do_dtors+0x38>
        (*dtor) (); 
   50530:	e0bfff17 	ldw	r2,-4(fp)
   50534:	10800017 	ldw	r2,0(r2)
   50538:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   5053c:	e0bfff17 	ldw	r2,-4(fp)
   50540:	10bfff04 	addi	r2,r2,-4
   50544:	e0bfff15 	stw	r2,-4(fp)
   50548:	e0ffff17 	ldw	r3,-4(fp)
   5054c:	00800174 	movhi	r2,5
   50550:	10850b04 	addi	r2,r2,5164
   50554:	18bff62e 	bgeu	r3,r2,50530 <__alt_data_end+0xfffd0530>
        (*dtor) (); 
}
   50558:	e037883a 	mov	sp,fp
   5055c:	dfc00117 	ldw	ra,4(sp)
   50560:	df000017 	ldw	fp,0(sp)
   50564:	dec00204 	addi	sp,sp,8
   50568:	f800283a 	ret

0005056c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   5056c:	deffff04 	addi	sp,sp,-4
   50570:	df000015 	stw	fp,0(sp)
   50574:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   50578:	e037883a 	mov	sp,fp
   5057c:	df000017 	ldw	fp,0(sp)
   50580:	dec00104 	addi	sp,sp,4
   50584:	f800283a 	ret

00050588 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   50588:	defff904 	addi	sp,sp,-28
   5058c:	dfc00615 	stw	ra,24(sp)
   50590:	df000515 	stw	fp,20(sp)
   50594:	df000504 	addi	fp,sp,20
   50598:	e13ffc15 	stw	r4,-16(fp)
   5059c:	e17ffd15 	stw	r5,-12(fp)
   505a0:	e1bffe15 	stw	r6,-8(fp)
   505a4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   505a8:	e0800217 	ldw	r2,8(fp)
   505ac:	d8800015 	stw	r2,0(sp)
   505b0:	e13ffc17 	ldw	r4,-16(fp)
   505b4:	e17ffd17 	ldw	r5,-12(fp)
   505b8:	e1bffe17 	ldw	r6,-8(fp)
   505bc:	e1ffff17 	ldw	r7,-4(fp)
   505c0:	00507680 	call	50768 <alt_iic_isr_register>
}  
   505c4:	e037883a 	mov	sp,fp
   505c8:	dfc00117 	ldw	ra,4(sp)
   505cc:	df000017 	ldw	fp,0(sp)
   505d0:	dec00204 	addi	sp,sp,8
   505d4:	f800283a 	ret

000505d8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   505d8:	defff904 	addi	sp,sp,-28
   505dc:	df000615 	stw	fp,24(sp)
   505e0:	df000604 	addi	fp,sp,24
   505e4:	e13ffe15 	stw	r4,-8(fp)
   505e8:	e17fff15 	stw	r5,-4(fp)
   505ec:	e0bfff17 	ldw	r2,-4(fp)
   505f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   505f4:	0005303a 	rdctl	r2,status
   505f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   505fc:	e0fffb17 	ldw	r3,-20(fp)
   50600:	00bfff84 	movi	r2,-2
   50604:	1884703a 	and	r2,r3,r2
   50608:	1001703a 	wrctl	status,r2
  
  return context;
   5060c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   50610:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   50614:	e0bffa17 	ldw	r2,-24(fp)
   50618:	00c00044 	movi	r3,1
   5061c:	1884983a 	sll	r2,r3,r2
   50620:	1007883a 	mov	r3,r2
   50624:	00800174 	movhi	r2,5
   50628:	10953204 	addi	r2,r2,21704
   5062c:	10800017 	ldw	r2,0(r2)
   50630:	1886b03a 	or	r3,r3,r2
   50634:	00800174 	movhi	r2,5
   50638:	10953204 	addi	r2,r2,21704
   5063c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   50640:	00800174 	movhi	r2,5
   50644:	10953204 	addi	r2,r2,21704
   50648:	10800017 	ldw	r2,0(r2)
   5064c:	100170fa 	wrctl	ienable,r2
   50650:	e0bffc17 	ldw	r2,-16(fp)
   50654:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50658:	e0bffd17 	ldw	r2,-12(fp)
   5065c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   50660:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   50664:	0001883a 	nop
}
   50668:	e037883a 	mov	sp,fp
   5066c:	df000017 	ldw	fp,0(sp)
   50670:	dec00104 	addi	sp,sp,4
   50674:	f800283a 	ret

00050678 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   50678:	defff904 	addi	sp,sp,-28
   5067c:	df000615 	stw	fp,24(sp)
   50680:	df000604 	addi	fp,sp,24
   50684:	e13ffe15 	stw	r4,-8(fp)
   50688:	e17fff15 	stw	r5,-4(fp)
   5068c:	e0bfff17 	ldw	r2,-4(fp)
   50690:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50694:	0005303a 	rdctl	r2,status
   50698:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   5069c:	e0fffb17 	ldw	r3,-20(fp)
   506a0:	00bfff84 	movi	r2,-2
   506a4:	1884703a 	and	r2,r3,r2
   506a8:	1001703a 	wrctl	status,r2
  
  return context;
   506ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   506b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   506b4:	e0bffa17 	ldw	r2,-24(fp)
   506b8:	00c00044 	movi	r3,1
   506bc:	1884983a 	sll	r2,r3,r2
   506c0:	0084303a 	nor	r2,zero,r2
   506c4:	1007883a 	mov	r3,r2
   506c8:	00800174 	movhi	r2,5
   506cc:	10953204 	addi	r2,r2,21704
   506d0:	10800017 	ldw	r2,0(r2)
   506d4:	1886703a 	and	r3,r3,r2
   506d8:	00800174 	movhi	r2,5
   506dc:	10953204 	addi	r2,r2,21704
   506e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   506e4:	00800174 	movhi	r2,5
   506e8:	10953204 	addi	r2,r2,21704
   506ec:	10800017 	ldw	r2,0(r2)
   506f0:	100170fa 	wrctl	ienable,r2
   506f4:	e0bffc17 	ldw	r2,-16(fp)
   506f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   506fc:	e0bffd17 	ldw	r2,-12(fp)
   50700:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   50704:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   50708:	0001883a 	nop
}
   5070c:	e037883a 	mov	sp,fp
   50710:	df000017 	ldw	fp,0(sp)
   50714:	dec00104 	addi	sp,sp,4
   50718:	f800283a 	ret

0005071c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   5071c:	defffc04 	addi	sp,sp,-16
   50720:	df000315 	stw	fp,12(sp)
   50724:	df000304 	addi	fp,sp,12
   50728:	e13ffe15 	stw	r4,-8(fp)
   5072c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   50730:	000530fa 	rdctl	r2,ienable
   50734:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   50738:	e0bfff17 	ldw	r2,-4(fp)
   5073c:	00c00044 	movi	r3,1
   50740:	1884983a 	sll	r2,r3,r2
   50744:	1007883a 	mov	r3,r2
   50748:	e0bffd17 	ldw	r2,-12(fp)
   5074c:	1884703a 	and	r2,r3,r2
   50750:	1004c03a 	cmpne	r2,r2,zero
   50754:	10803fcc 	andi	r2,r2,255
}
   50758:	e037883a 	mov	sp,fp
   5075c:	df000017 	ldw	fp,0(sp)
   50760:	dec00104 	addi	sp,sp,4
   50764:	f800283a 	ret

00050768 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   50768:	defff504 	addi	sp,sp,-44
   5076c:	dfc00a15 	stw	ra,40(sp)
   50770:	df000915 	stw	fp,36(sp)
   50774:	df000904 	addi	fp,sp,36
   50778:	e13ffc15 	stw	r4,-16(fp)
   5077c:	e17ffd15 	stw	r5,-12(fp)
   50780:	e1bffe15 	stw	r6,-8(fp)
   50784:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   50788:	00bffa84 	movi	r2,-22
   5078c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   50790:	e0bffd17 	ldw	r2,-12(fp)
   50794:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   50798:	e0bff817 	ldw	r2,-32(fp)
   5079c:	10800808 	cmpgei	r2,r2,32
   507a0:	1000271e 	bne	r2,zero,50840 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   507a4:	0005303a 	rdctl	r2,status
   507a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   507ac:	e0fffa17 	ldw	r3,-24(fp)
   507b0:	00bfff84 	movi	r2,-2
   507b4:	1884703a 	and	r2,r3,r2
   507b8:	1001703a 	wrctl	status,r2
  
  return context;
   507bc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   507c0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   507c4:	00800174 	movhi	r2,5
   507c8:	10953f04 	addi	r2,r2,21756
   507cc:	e0fff817 	ldw	r3,-32(fp)
   507d0:	180690fa 	slli	r3,r3,3
   507d4:	10c5883a 	add	r2,r2,r3
   507d8:	e0fffe17 	ldw	r3,-8(fp)
   507dc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   507e0:	00800174 	movhi	r2,5
   507e4:	10953f04 	addi	r2,r2,21756
   507e8:	e0fff817 	ldw	r3,-32(fp)
   507ec:	180690fa 	slli	r3,r3,3
   507f0:	10c5883a 	add	r2,r2,r3
   507f4:	10800104 	addi	r2,r2,4
   507f8:	e0ffff17 	ldw	r3,-4(fp)
   507fc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   50800:	e0bffe17 	ldw	r2,-8(fp)
   50804:	10000526 	beq	r2,zero,5081c <alt_iic_isr_register+0xb4>
   50808:	e0bff817 	ldw	r2,-32(fp)
   5080c:	e13ffc17 	ldw	r4,-16(fp)
   50810:	100b883a 	mov	r5,r2
   50814:	00505d80 	call	505d8 <alt_ic_irq_enable>
   50818:	00000406 	br	5082c <alt_iic_isr_register+0xc4>
   5081c:	e0bff817 	ldw	r2,-32(fp)
   50820:	e13ffc17 	ldw	r4,-16(fp)
   50824:	100b883a 	mov	r5,r2
   50828:	00506780 	call	50678 <alt_ic_irq_disable>
   5082c:	e0bff715 	stw	r2,-36(fp)
   50830:	e0bff917 	ldw	r2,-28(fp)
   50834:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50838:	e0bffb17 	ldw	r2,-20(fp)
   5083c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   50840:	e0bff717 	ldw	r2,-36(fp)
}
   50844:	e037883a 	mov	sp,fp
   50848:	dfc00117 	ldw	ra,4(sp)
   5084c:	df000017 	ldw	fp,0(sp)
   50850:	dec00204 	addi	sp,sp,8
   50854:	f800283a 	ret

00050858 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   50858:	defff804 	addi	sp,sp,-32
   5085c:	dfc00715 	stw	ra,28(sp)
   50860:	df000615 	stw	fp,24(sp)
   50864:	dc000515 	stw	r16,20(sp)
   50868:	df000604 	addi	fp,sp,24
   5086c:	e13ffb15 	stw	r4,-20(fp)
   50870:	e17ffc15 	stw	r5,-16(fp)
   50874:	e1bffd15 	stw	r6,-12(fp)
   50878:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   5087c:	e13ffc17 	ldw	r4,-16(fp)
   50880:	e17ffd17 	ldw	r5,-12(fp)
   50884:	e1bffe17 	ldw	r6,-8(fp)
   50888:	0050af40 	call	50af4 <open>
   5088c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   50890:	e0bffa17 	ldw	r2,-24(fp)
   50894:	10002216 	blt	r2,zero,50920 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   50898:	04000174 	movhi	r16,5
   5089c:	8409e404 	addi	r16,r16,10128
   508a0:	e0bffa17 	ldw	r2,-24(fp)
   508a4:	1009883a 	mov	r4,r2
   508a8:	01400304 	movi	r5,12
   508ac:	004c3c40 	call	4c3c4 <__mulsi3>
   508b0:	8085883a 	add	r2,r16,r2
   508b4:	10c00017 	ldw	r3,0(r2)
   508b8:	e0bffb17 	ldw	r2,-20(fp)
   508bc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   508c0:	04000174 	movhi	r16,5
   508c4:	8409e404 	addi	r16,r16,10128
   508c8:	e0bffa17 	ldw	r2,-24(fp)
   508cc:	1009883a 	mov	r4,r2
   508d0:	01400304 	movi	r5,12
   508d4:	004c3c40 	call	4c3c4 <__mulsi3>
   508d8:	8085883a 	add	r2,r16,r2
   508dc:	10800104 	addi	r2,r2,4
   508e0:	10c00017 	ldw	r3,0(r2)
   508e4:	e0bffb17 	ldw	r2,-20(fp)
   508e8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   508ec:	04000174 	movhi	r16,5
   508f0:	8409e404 	addi	r16,r16,10128
   508f4:	e0bffa17 	ldw	r2,-24(fp)
   508f8:	1009883a 	mov	r4,r2
   508fc:	01400304 	movi	r5,12
   50900:	004c3c40 	call	4c3c4 <__mulsi3>
   50904:	8085883a 	add	r2,r16,r2
   50908:	10800204 	addi	r2,r2,8
   5090c:	10c00017 	ldw	r3,0(r2)
   50910:	e0bffb17 	ldw	r2,-20(fp)
   50914:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   50918:	e13ffa17 	ldw	r4,-24(fp)
   5091c:	004f35c0 	call	4f35c <alt_release_fd>
  }
} 
   50920:	e6ffff04 	addi	sp,fp,-4
   50924:	dfc00217 	ldw	ra,8(sp)
   50928:	df000117 	ldw	fp,4(sp)
   5092c:	dc000017 	ldw	r16,0(sp)
   50930:	dec00304 	addi	sp,sp,12
   50934:	f800283a 	ret

00050938 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   50938:	defffb04 	addi	sp,sp,-20
   5093c:	dfc00415 	stw	ra,16(sp)
   50940:	df000315 	stw	fp,12(sp)
   50944:	df000304 	addi	fp,sp,12
   50948:	e13ffd15 	stw	r4,-12(fp)
   5094c:	e17ffe15 	stw	r5,-8(fp)
   50950:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   50954:	01000174 	movhi	r4,5
   50958:	2109e704 	addi	r4,r4,10140
   5095c:	e17ffd17 	ldw	r5,-12(fp)
   50960:	01800044 	movi	r6,1
   50964:	01c07fc4 	movi	r7,511
   50968:	00508580 	call	50858 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   5096c:	01000174 	movhi	r4,5
   50970:	2109e404 	addi	r4,r4,10128
   50974:	e17ffe17 	ldw	r5,-8(fp)
   50978:	000d883a 	mov	r6,zero
   5097c:	01c07fc4 	movi	r7,511
   50980:	00508580 	call	50858 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   50984:	01000174 	movhi	r4,5
   50988:	2109ea04 	addi	r4,r4,10152
   5098c:	e17fff17 	ldw	r5,-4(fp)
   50990:	01800044 	movi	r6,1
   50994:	01c07fc4 	movi	r7,511
   50998:	00508580 	call	50858 <alt_open_fd>
}  
   5099c:	e037883a 	mov	sp,fp
   509a0:	dfc00117 	ldw	ra,4(sp)
   509a4:	df000017 	ldw	fp,0(sp)
   509a8:	dec00204 	addi	sp,sp,8
   509ac:	f800283a 	ret

000509b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   509b0:	defffe04 	addi	sp,sp,-8
   509b4:	dfc00115 	stw	ra,4(sp)
   509b8:	df000015 	stw	fp,0(sp)
   509bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   509c0:	00800174 	movhi	r2,5
   509c4:	108e6704 	addi	r2,r2,14748
   509c8:	10800017 	ldw	r2,0(r2)
   509cc:	10000526 	beq	r2,zero,509e4 <alt_get_errno+0x34>
   509d0:	00800174 	movhi	r2,5
   509d4:	108e6704 	addi	r2,r2,14748
   509d8:	10800017 	ldw	r2,0(r2)
   509dc:	103ee83a 	callr	r2
   509e0:	00000206 	br	509ec <alt_get_errno+0x3c>
   509e4:	00800174 	movhi	r2,5
   509e8:	10952e04 	addi	r2,r2,21688
}
   509ec:	e037883a 	mov	sp,fp
   509f0:	dfc00117 	ldw	ra,4(sp)
   509f4:	df000017 	ldw	fp,0(sp)
   509f8:	dec00204 	addi	sp,sp,8
   509fc:	f800283a 	ret

00050a00 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   50a00:	defffb04 	addi	sp,sp,-20
   50a04:	dfc00415 	stw	ra,16(sp)
   50a08:	df000315 	stw	fp,12(sp)
   50a0c:	dc000215 	stw	r16,8(sp)
   50a10:	df000304 	addi	fp,sp,12
   50a14:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   50a18:	e0bffe17 	ldw	r2,-8(fp)
   50a1c:	10800217 	ldw	r2,8(r2)
   50a20:	10d00034 	orhi	r3,r2,16384
   50a24:	e0bffe17 	ldw	r2,-8(fp)
   50a28:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   50a2c:	e03ffd15 	stw	zero,-12(fp)
   50a30:	00002306 	br	50ac0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   50a34:	04000174 	movhi	r16,5
   50a38:	8409e404 	addi	r16,r16,10128
   50a3c:	e0bffd17 	ldw	r2,-12(fp)
   50a40:	1009883a 	mov	r4,r2
   50a44:	01400304 	movi	r5,12
   50a48:	004c3c40 	call	4c3c4 <__mulsi3>
   50a4c:	8085883a 	add	r2,r16,r2
   50a50:	10c00017 	ldw	r3,0(r2)
   50a54:	e0bffe17 	ldw	r2,-8(fp)
   50a58:	10800017 	ldw	r2,0(r2)
   50a5c:	1880151e 	bne	r3,r2,50ab4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   50a60:	04000174 	movhi	r16,5
   50a64:	8409e404 	addi	r16,r16,10128
   50a68:	e0bffd17 	ldw	r2,-12(fp)
   50a6c:	1009883a 	mov	r4,r2
   50a70:	01400304 	movi	r5,12
   50a74:	004c3c40 	call	4c3c4 <__mulsi3>
   50a78:	8085883a 	add	r2,r16,r2
   50a7c:	10800204 	addi	r2,r2,8
   50a80:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   50a84:	10000b0e 	bge	r2,zero,50ab4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   50a88:	e13ffd17 	ldw	r4,-12(fp)
   50a8c:	01400304 	movi	r5,12
   50a90:	004c3c40 	call	4c3c4 <__mulsi3>
   50a94:	1007883a 	mov	r3,r2
   50a98:	00800174 	movhi	r2,5
   50a9c:	1089e404 	addi	r2,r2,10128
   50aa0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   50aa4:	e0bffe17 	ldw	r2,-8(fp)
   50aa8:	18800226 	beq	r3,r2,50ab4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   50aac:	00bffcc4 	movi	r2,-13
   50ab0:	00000a06 	br	50adc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   50ab4:	e0bffd17 	ldw	r2,-12(fp)
   50ab8:	10800044 	addi	r2,r2,1
   50abc:	e0bffd15 	stw	r2,-12(fp)
   50ac0:	00800174 	movhi	r2,5
   50ac4:	108e6604 	addi	r2,r2,14744
   50ac8:	10800017 	ldw	r2,0(r2)
   50acc:	1007883a 	mov	r3,r2
   50ad0:	e0bffd17 	ldw	r2,-12(fp)
   50ad4:	18bfd72e 	bgeu	r3,r2,50a34 <__alt_data_end+0xfffd0a34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   50ad8:	0005883a 	mov	r2,zero
}
   50adc:	e6ffff04 	addi	sp,fp,-4
   50ae0:	dfc00217 	ldw	ra,8(sp)
   50ae4:	df000117 	ldw	fp,4(sp)
   50ae8:	dc000017 	ldw	r16,0(sp)
   50aec:	dec00304 	addi	sp,sp,12
   50af0:	f800283a 	ret

00050af4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   50af4:	defff604 	addi	sp,sp,-40
   50af8:	dfc00915 	stw	ra,36(sp)
   50afc:	df000815 	stw	fp,32(sp)
   50b00:	df000804 	addi	fp,sp,32
   50b04:	e13ffd15 	stw	r4,-12(fp)
   50b08:	e17ffe15 	stw	r5,-8(fp)
   50b0c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   50b10:	00bfffc4 	movi	r2,-1
   50b14:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   50b18:	00bffb44 	movi	r2,-19
   50b1c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   50b20:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   50b24:	e13ffd17 	ldw	r4,-12(fp)
   50b28:	01400174 	movhi	r5,5
   50b2c:	294e6404 	addi	r5,r5,14736
   50b30:	0050e100 	call	50e10 <alt_find_dev>
   50b34:	e0bff815 	stw	r2,-32(fp)
   50b38:	e0bff817 	ldw	r2,-32(fp)
   50b3c:	1000051e 	bne	r2,zero,50b54 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   50b40:	e13ffd17 	ldw	r4,-12(fp)
   50b44:	0050ea00 	call	50ea0 <alt_find_file>
   50b48:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   50b4c:	00800044 	movi	r2,1
   50b50:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   50b54:	e0bff817 	ldw	r2,-32(fp)
   50b58:	10002b26 	beq	r2,zero,50c08 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   50b5c:	e13ff817 	ldw	r4,-32(fp)
   50b60:	0050fb40 	call	50fb4 <alt_get_fd>
   50b64:	e0bff915 	stw	r2,-28(fp)
   50b68:	e0bff917 	ldw	r2,-28(fp)
   50b6c:	1000030e 	bge	r2,zero,50b7c <open+0x88>
    {
      status = index;
   50b70:	e0bff917 	ldw	r2,-28(fp)
   50b74:	e0bffa15 	stw	r2,-24(fp)
   50b78:	00002506 	br	50c10 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   50b7c:	e13ff917 	ldw	r4,-28(fp)
   50b80:	01400304 	movi	r5,12
   50b84:	004c3c40 	call	4c3c4 <__mulsi3>
   50b88:	1007883a 	mov	r3,r2
   50b8c:	00800174 	movhi	r2,5
   50b90:	1089e404 	addi	r2,r2,10128
   50b94:	1885883a 	add	r2,r3,r2
   50b98:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   50b9c:	e0fffe17 	ldw	r3,-8(fp)
   50ba0:	00900034 	movhi	r2,16384
   50ba4:	10bfffc4 	addi	r2,r2,-1
   50ba8:	1886703a 	and	r3,r3,r2
   50bac:	e0bffc17 	ldw	r2,-16(fp)
   50bb0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   50bb4:	e0bffb17 	ldw	r2,-20(fp)
   50bb8:	1000051e 	bne	r2,zero,50bd0 <open+0xdc>
   50bbc:	e13ffc17 	ldw	r4,-16(fp)
   50bc0:	0050a000 	call	50a00 <alt_file_locked>
   50bc4:	e0bffa15 	stw	r2,-24(fp)
   50bc8:	e0bffa17 	ldw	r2,-24(fp)
   50bcc:	10001016 	blt	r2,zero,50c10 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   50bd0:	e0bff817 	ldw	r2,-32(fp)
   50bd4:	10800317 	ldw	r2,12(r2)
   50bd8:	10000826 	beq	r2,zero,50bfc <open+0x108>
   50bdc:	e0bff817 	ldw	r2,-32(fp)
   50be0:	10800317 	ldw	r2,12(r2)
   50be4:	e13ffc17 	ldw	r4,-16(fp)
   50be8:	e17ffd17 	ldw	r5,-12(fp)
   50bec:	e1bffe17 	ldw	r6,-8(fp)
   50bf0:	e1ffff17 	ldw	r7,-4(fp)
   50bf4:	103ee83a 	callr	r2
   50bf8:	00000106 	br	50c00 <open+0x10c>
   50bfc:	0005883a 	mov	r2,zero
   50c00:	e0bffa15 	stw	r2,-24(fp)
   50c04:	00000206 	br	50c10 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   50c08:	00bffb44 	movi	r2,-19
   50c0c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   50c10:	e0bffa17 	ldw	r2,-24(fp)
   50c14:	1000090e 	bge	r2,zero,50c3c <open+0x148>
  {
    alt_release_fd (index);  
   50c18:	e13ff917 	ldw	r4,-28(fp)
   50c1c:	004f35c0 	call	4f35c <alt_release_fd>
    ALT_ERRNO = -status;
   50c20:	00509b00 	call	509b0 <alt_get_errno>
   50c24:	1007883a 	mov	r3,r2
   50c28:	e0bffa17 	ldw	r2,-24(fp)
   50c2c:	0085c83a 	sub	r2,zero,r2
   50c30:	18800015 	stw	r2,0(r3)
    return -1;
   50c34:	00bfffc4 	movi	r2,-1
   50c38:	00000106 	br	50c40 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   50c3c:	e0bff917 	ldw	r2,-28(fp)
}
   50c40:	e037883a 	mov	sp,fp
   50c44:	dfc00117 	ldw	ra,4(sp)
   50c48:	df000017 	ldw	fp,0(sp)
   50c4c:	dec00204 	addi	sp,sp,8
   50c50:	f800283a 	ret

00050c54 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   50c54:	defffa04 	addi	sp,sp,-24
   50c58:	df000515 	stw	fp,20(sp)
   50c5c:	df000504 	addi	fp,sp,20
   50c60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   50c64:	0005303a 	rdctl	r2,status
   50c68:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   50c6c:	e0fffc17 	ldw	r3,-16(fp)
   50c70:	00bfff84 	movi	r2,-2
   50c74:	1884703a 	and	r2,r3,r2
   50c78:	1001703a 	wrctl	status,r2
  
  return context;
   50c7c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   50c80:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   50c84:	e0bfff17 	ldw	r2,-4(fp)
   50c88:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   50c8c:	e0bffd17 	ldw	r2,-12(fp)
   50c90:	10800017 	ldw	r2,0(r2)
   50c94:	e0fffd17 	ldw	r3,-12(fp)
   50c98:	18c00117 	ldw	r3,4(r3)
   50c9c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   50ca0:	e0bffd17 	ldw	r2,-12(fp)
   50ca4:	10800117 	ldw	r2,4(r2)
   50ca8:	e0fffd17 	ldw	r3,-12(fp)
   50cac:	18c00017 	ldw	r3,0(r3)
   50cb0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   50cb4:	e0bffd17 	ldw	r2,-12(fp)
   50cb8:	e0fffd17 	ldw	r3,-12(fp)
   50cbc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   50cc0:	e0bffd17 	ldw	r2,-12(fp)
   50cc4:	e0fffd17 	ldw	r3,-12(fp)
   50cc8:	10c00015 	stw	r3,0(r2)
   50ccc:	e0bffb17 	ldw	r2,-20(fp)
   50cd0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   50cd4:	e0bffe17 	ldw	r2,-8(fp)
   50cd8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   50cdc:	e037883a 	mov	sp,fp
   50ce0:	df000017 	ldw	fp,0(sp)
   50ce4:	dec00104 	addi	sp,sp,4
   50ce8:	f800283a 	ret

00050cec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   50cec:	defffb04 	addi	sp,sp,-20
   50cf0:	dfc00415 	stw	ra,16(sp)
   50cf4:	df000315 	stw	fp,12(sp)
   50cf8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   50cfc:	d0a00e17 	ldw	r2,-32712(gp)
   50d00:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   50d04:	d0a6d817 	ldw	r2,-25760(gp)
   50d08:	10800044 	addi	r2,r2,1
   50d0c:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   50d10:	00002e06 	br	50dcc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   50d14:	e0bffd17 	ldw	r2,-12(fp)
   50d18:	10800017 	ldw	r2,0(r2)
   50d1c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   50d20:	e0bffd17 	ldw	r2,-12(fp)
   50d24:	10800403 	ldbu	r2,16(r2)
   50d28:	10803fcc 	andi	r2,r2,255
   50d2c:	10000426 	beq	r2,zero,50d40 <alt_tick+0x54>
   50d30:	d0a6d817 	ldw	r2,-25760(gp)
   50d34:	1000021e 	bne	r2,zero,50d40 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   50d38:	e0bffd17 	ldw	r2,-12(fp)
   50d3c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   50d40:	e0bffd17 	ldw	r2,-12(fp)
   50d44:	10800217 	ldw	r2,8(r2)
   50d48:	d0e6d817 	ldw	r3,-25760(gp)
   50d4c:	18801d36 	bltu	r3,r2,50dc4 <alt_tick+0xd8>
   50d50:	e0bffd17 	ldw	r2,-12(fp)
   50d54:	10800403 	ldbu	r2,16(r2)
   50d58:	10803fcc 	andi	r2,r2,255
   50d5c:	1000191e 	bne	r2,zero,50dc4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   50d60:	e0bffd17 	ldw	r2,-12(fp)
   50d64:	10800317 	ldw	r2,12(r2)
   50d68:	e0fffd17 	ldw	r3,-12(fp)
   50d6c:	18c00517 	ldw	r3,20(r3)
   50d70:	1809883a 	mov	r4,r3
   50d74:	103ee83a 	callr	r2
   50d78:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   50d7c:	e0bfff17 	ldw	r2,-4(fp)
   50d80:	1000031e 	bne	r2,zero,50d90 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   50d84:	e13ffd17 	ldw	r4,-12(fp)
   50d88:	0050c540 	call	50c54 <alt_alarm_stop>
   50d8c:	00000d06 	br	50dc4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   50d90:	e0bffd17 	ldw	r2,-12(fp)
   50d94:	10c00217 	ldw	r3,8(r2)
   50d98:	e0bfff17 	ldw	r2,-4(fp)
   50d9c:	1887883a 	add	r3,r3,r2
   50da0:	e0bffd17 	ldw	r2,-12(fp)
   50da4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   50da8:	e0bffd17 	ldw	r2,-12(fp)
   50dac:	10c00217 	ldw	r3,8(r2)
   50db0:	d0a6d817 	ldw	r2,-25760(gp)
   50db4:	1880032e 	bgeu	r3,r2,50dc4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   50db8:	e0bffd17 	ldw	r2,-12(fp)
   50dbc:	00c00044 	movi	r3,1
   50dc0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   50dc4:	e0bffe17 	ldw	r2,-8(fp)
   50dc8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   50dcc:	e0fffd17 	ldw	r3,-12(fp)
   50dd0:	d0a00e04 	addi	r2,gp,-32712
   50dd4:	18bfcf1e 	bne	r3,r2,50d14 <__alt_data_end+0xfffd0d14>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   50dd8:	0001883a 	nop
}
   50ddc:	e037883a 	mov	sp,fp
   50de0:	dfc00117 	ldw	ra,4(sp)
   50de4:	df000017 	ldw	fp,0(sp)
   50de8:	dec00204 	addi	sp,sp,8
   50dec:	f800283a 	ret

00050df0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   50df0:	deffff04 	addi	sp,sp,-4
   50df4:	df000015 	stw	fp,0(sp)
   50df8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   50dfc:	000170fa 	wrctl	ienable,zero
}
   50e00:	e037883a 	mov	sp,fp
   50e04:	df000017 	ldw	fp,0(sp)
   50e08:	dec00104 	addi	sp,sp,4
   50e0c:	f800283a 	ret

00050e10 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   50e10:	defffa04 	addi	sp,sp,-24
   50e14:	dfc00515 	stw	ra,20(sp)
   50e18:	df000415 	stw	fp,16(sp)
   50e1c:	df000404 	addi	fp,sp,16
   50e20:	e13ffe15 	stw	r4,-8(fp)
   50e24:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   50e28:	e0bfff17 	ldw	r2,-4(fp)
   50e2c:	10800017 	ldw	r2,0(r2)
   50e30:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   50e34:	e13ffe17 	ldw	r4,-8(fp)
   50e38:	00423b80 	call	423b8 <strlen>
   50e3c:	10800044 	addi	r2,r2,1
   50e40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   50e44:	00000d06 	br	50e7c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   50e48:	e0bffc17 	ldw	r2,-16(fp)
   50e4c:	10c00217 	ldw	r3,8(r2)
   50e50:	e0bffd17 	ldw	r2,-12(fp)
   50e54:	1809883a 	mov	r4,r3
   50e58:	e17ffe17 	ldw	r5,-8(fp)
   50e5c:	100d883a 	mov	r6,r2
   50e60:	00510d40 	call	510d4 <memcmp>
   50e64:	1000021e 	bne	r2,zero,50e70 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   50e68:	e0bffc17 	ldw	r2,-16(fp)
   50e6c:	00000706 	br	50e8c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   50e70:	e0bffc17 	ldw	r2,-16(fp)
   50e74:	10800017 	ldw	r2,0(r2)
   50e78:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   50e7c:	e0fffc17 	ldw	r3,-16(fp)
   50e80:	e0bfff17 	ldw	r2,-4(fp)
   50e84:	18bff01e 	bne	r3,r2,50e48 <__alt_data_end+0xfffd0e48>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   50e88:	0005883a 	mov	r2,zero
}
   50e8c:	e037883a 	mov	sp,fp
   50e90:	dfc00117 	ldw	ra,4(sp)
   50e94:	df000017 	ldw	fp,0(sp)
   50e98:	dec00204 	addi	sp,sp,8
   50e9c:	f800283a 	ret

00050ea0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   50ea0:	defffb04 	addi	sp,sp,-20
   50ea4:	dfc00415 	stw	ra,16(sp)
   50ea8:	df000315 	stw	fp,12(sp)
   50eac:	df000304 	addi	fp,sp,12
   50eb0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   50eb4:	00800174 	movhi	r2,5
   50eb8:	108e6204 	addi	r2,r2,14728
   50ebc:	10800017 	ldw	r2,0(r2)
   50ec0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   50ec4:	00003106 	br	50f8c <alt_find_file+0xec>
  {
    len = strlen(next->name);
   50ec8:	e0bffd17 	ldw	r2,-12(fp)
   50ecc:	10800217 	ldw	r2,8(r2)
   50ed0:	1009883a 	mov	r4,r2
   50ed4:	00423b80 	call	423b8 <strlen>
   50ed8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   50edc:	e0bffd17 	ldw	r2,-12(fp)
   50ee0:	10c00217 	ldw	r3,8(r2)
   50ee4:	e0bffe17 	ldw	r2,-8(fp)
   50ee8:	10bfffc4 	addi	r2,r2,-1
   50eec:	1885883a 	add	r2,r3,r2
   50ef0:	10800003 	ldbu	r2,0(r2)
   50ef4:	10803fcc 	andi	r2,r2,255
   50ef8:	1080201c 	xori	r2,r2,128
   50efc:	10bfe004 	addi	r2,r2,-128
   50f00:	10800bd8 	cmpnei	r2,r2,47
   50f04:	1000031e 	bne	r2,zero,50f14 <alt_find_file+0x74>
    {
      len -= 1;
   50f08:	e0bffe17 	ldw	r2,-8(fp)
   50f0c:	10bfffc4 	addi	r2,r2,-1
   50f10:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   50f14:	e0bffe17 	ldw	r2,-8(fp)
   50f18:	e0ffff17 	ldw	r3,-4(fp)
   50f1c:	1885883a 	add	r2,r3,r2
   50f20:	10800003 	ldbu	r2,0(r2)
   50f24:	10803fcc 	andi	r2,r2,255
   50f28:	1080201c 	xori	r2,r2,128
   50f2c:	10bfe004 	addi	r2,r2,-128
   50f30:	10800be0 	cmpeqi	r2,r2,47
   50f34:	1000081e 	bne	r2,zero,50f58 <alt_find_file+0xb8>
   50f38:	e0bffe17 	ldw	r2,-8(fp)
   50f3c:	e0ffff17 	ldw	r3,-4(fp)
   50f40:	1885883a 	add	r2,r3,r2
   50f44:	10800003 	ldbu	r2,0(r2)
   50f48:	10803fcc 	andi	r2,r2,255
   50f4c:	1080201c 	xori	r2,r2,128
   50f50:	10bfe004 	addi	r2,r2,-128
   50f54:	10000a1e 	bne	r2,zero,50f80 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   50f58:	e0bffd17 	ldw	r2,-12(fp)
   50f5c:	10c00217 	ldw	r3,8(r2)
   50f60:	e0bffe17 	ldw	r2,-8(fp)
   50f64:	1809883a 	mov	r4,r3
   50f68:	e17fff17 	ldw	r5,-4(fp)
   50f6c:	100d883a 	mov	r6,r2
   50f70:	00510d40 	call	510d4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   50f74:	1000021e 	bne	r2,zero,50f80 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   50f78:	e0bffd17 	ldw	r2,-12(fp)
   50f7c:	00000806 	br	50fa0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   50f80:	e0bffd17 	ldw	r2,-12(fp)
   50f84:	10800017 	ldw	r2,0(r2)
   50f88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   50f8c:	e0fffd17 	ldw	r3,-12(fp)
   50f90:	00800174 	movhi	r2,5
   50f94:	108e6204 	addi	r2,r2,14728
   50f98:	18bfcb1e 	bne	r3,r2,50ec8 <__alt_data_end+0xfffd0ec8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   50f9c:	0005883a 	mov	r2,zero
}
   50fa0:	e037883a 	mov	sp,fp
   50fa4:	dfc00117 	ldw	ra,4(sp)
   50fa8:	df000017 	ldw	fp,0(sp)
   50fac:	dec00204 	addi	sp,sp,8
   50fb0:	f800283a 	ret

00050fb4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   50fb4:	defffa04 	addi	sp,sp,-24
   50fb8:	dfc00515 	stw	ra,20(sp)
   50fbc:	df000415 	stw	fp,16(sp)
   50fc0:	dc000315 	stw	r16,12(sp)
   50fc4:	df000404 	addi	fp,sp,16
   50fc8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   50fcc:	00bffa04 	movi	r2,-24
   50fd0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   50fd4:	e03ffc15 	stw	zero,-16(fp)
   50fd8:	00002106 	br	51060 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   50fdc:	04000174 	movhi	r16,5
   50fe0:	8409e404 	addi	r16,r16,10128
   50fe4:	e0bffc17 	ldw	r2,-16(fp)
   50fe8:	1009883a 	mov	r4,r2
   50fec:	01400304 	movi	r5,12
   50ff0:	004c3c40 	call	4c3c4 <__mulsi3>
   50ff4:	8085883a 	add	r2,r16,r2
   50ff8:	10800017 	ldw	r2,0(r2)
   50ffc:	1000151e 	bne	r2,zero,51054 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   51000:	04000174 	movhi	r16,5
   51004:	8409e404 	addi	r16,r16,10128
   51008:	e0bffc17 	ldw	r2,-16(fp)
   5100c:	1009883a 	mov	r4,r2
   51010:	01400304 	movi	r5,12
   51014:	004c3c40 	call	4c3c4 <__mulsi3>
   51018:	8085883a 	add	r2,r16,r2
   5101c:	e0fffe17 	ldw	r3,-8(fp)
   51020:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   51024:	00800174 	movhi	r2,5
   51028:	108e6604 	addi	r2,r2,14744
   5102c:	10c00017 	ldw	r3,0(r2)
   51030:	e0bffc17 	ldw	r2,-16(fp)
   51034:	1880040e 	bge	r3,r2,51048 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   51038:	00800174 	movhi	r2,5
   5103c:	108e6604 	addi	r2,r2,14744
   51040:	e0fffc17 	ldw	r3,-16(fp)
   51044:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   51048:	e0bffc17 	ldw	r2,-16(fp)
   5104c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   51050:	00000606 	br	5106c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   51054:	e0bffc17 	ldw	r2,-16(fp)
   51058:	10800044 	addi	r2,r2,1
   5105c:	e0bffc15 	stw	r2,-16(fp)
   51060:	e0bffc17 	ldw	r2,-16(fp)
   51064:	10800810 	cmplti	r2,r2,32
   51068:	103fdc1e 	bne	r2,zero,50fdc <__alt_data_end+0xfffd0fdc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   5106c:	e0bffd17 	ldw	r2,-12(fp)
}
   51070:	e6ffff04 	addi	sp,fp,-4
   51074:	dfc00217 	ldw	ra,8(sp)
   51078:	df000117 	ldw	fp,4(sp)
   5107c:	dc000017 	ldw	r16,0(sp)
   51080:	dec00304 	addi	sp,sp,12
   51084:	f800283a 	ret

00051088 <atexit>:
   51088:	200b883a 	mov	r5,r4
   5108c:	000d883a 	mov	r6,zero
   51090:	0009883a 	mov	r4,zero
   51094:	000f883a 	mov	r7,zero
   51098:	00511501 	jmpi	51150 <__register_exitproc>

0005109c <exit>:
   5109c:	defffe04 	addi	sp,sp,-8
   510a0:	000b883a 	mov	r5,zero
   510a4:	dc000015 	stw	r16,0(sp)
   510a8:	dfc00115 	stw	ra,4(sp)
   510ac:	2021883a 	mov	r16,r4
   510b0:	00512640 	call	51264 <__call_exitprocs>
   510b4:	00800174 	movhi	r2,5
   510b8:	108e5c04 	addi	r2,r2,14704
   510bc:	11000017 	ldw	r4,0(r2)
   510c0:	20800f17 	ldw	r2,60(r4)
   510c4:	10000126 	beq	r2,zero,510cc <exit+0x30>
   510c8:	103ee83a 	callr	r2
   510cc:	8009883a 	mov	r4,r16
   510d0:	00513f80 	call	513f8 <_exit>

000510d4 <memcmp>:
   510d4:	01c000c4 	movi	r7,3
   510d8:	3980192e 	bgeu	r7,r6,51140 <memcmp+0x6c>
   510dc:	2144b03a 	or	r2,r4,r5
   510e0:	11c4703a 	and	r2,r2,r7
   510e4:	10000f26 	beq	r2,zero,51124 <memcmp+0x50>
   510e8:	20800003 	ldbu	r2,0(r4)
   510ec:	28c00003 	ldbu	r3,0(r5)
   510f0:	10c0151e 	bne	r2,r3,51148 <memcmp+0x74>
   510f4:	31bfff84 	addi	r6,r6,-2
   510f8:	01ffffc4 	movi	r7,-1
   510fc:	00000406 	br	51110 <memcmp+0x3c>
   51100:	20800003 	ldbu	r2,0(r4)
   51104:	28c00003 	ldbu	r3,0(r5)
   51108:	31bfffc4 	addi	r6,r6,-1
   5110c:	10c00e1e 	bne	r2,r3,51148 <memcmp+0x74>
   51110:	21000044 	addi	r4,r4,1
   51114:	29400044 	addi	r5,r5,1
   51118:	31fff91e 	bne	r6,r7,51100 <__alt_data_end+0xfffd1100>
   5111c:	0005883a 	mov	r2,zero
   51120:	f800283a 	ret
   51124:	20c00017 	ldw	r3,0(r4)
   51128:	28800017 	ldw	r2,0(r5)
   5112c:	1880041e 	bne	r3,r2,51140 <memcmp+0x6c>
   51130:	31bfff04 	addi	r6,r6,-4
   51134:	21000104 	addi	r4,r4,4
   51138:	29400104 	addi	r5,r5,4
   5113c:	39bff936 	bltu	r7,r6,51124 <__alt_data_end+0xfffd1124>
   51140:	303fe91e 	bne	r6,zero,510e8 <__alt_data_end+0xfffd10e8>
   51144:	003ff506 	br	5111c <__alt_data_end+0xfffd111c>
   51148:	10c5c83a 	sub	r2,r2,r3
   5114c:	f800283a 	ret

00051150 <__register_exitproc>:
   51150:	00800174 	movhi	r2,5
   51154:	defffa04 	addi	sp,sp,-24
   51158:	108e5c04 	addi	r2,r2,14704
   5115c:	dc000315 	stw	r16,12(sp)
   51160:	14000017 	ldw	r16,0(r2)
   51164:	dc400415 	stw	r17,16(sp)
   51168:	dfc00515 	stw	ra,20(sp)
   5116c:	80805217 	ldw	r2,328(r16)
   51170:	2023883a 	mov	r17,r4
   51174:	10003626 	beq	r2,zero,51250 <__register_exitproc+0x100>
   51178:	10c00117 	ldw	r3,4(r2)
   5117c:	010007c4 	movi	r4,31
   51180:	20c00e16 	blt	r4,r3,511bc <__register_exitproc+0x6c>
   51184:	1a400044 	addi	r9,r3,1
   51188:	8800211e 	bne	r17,zero,51210 <__register_exitproc+0xc0>
   5118c:	18c00084 	addi	r3,r3,2
   51190:	18c7883a 	add	r3,r3,r3
   51194:	18c7883a 	add	r3,r3,r3
   51198:	12400115 	stw	r9,4(r2)
   5119c:	10c7883a 	add	r3,r2,r3
   511a0:	19400015 	stw	r5,0(r3)
   511a4:	0005883a 	mov	r2,zero
   511a8:	dfc00517 	ldw	ra,20(sp)
   511ac:	dc400417 	ldw	r17,16(sp)
   511b0:	dc000317 	ldw	r16,12(sp)
   511b4:	dec00604 	addi	sp,sp,24
   511b8:	f800283a 	ret
   511bc:	00800034 	movhi	r2,0
   511c0:	10800004 	addi	r2,r2,0
   511c4:	10002526 	beq	r2,zero,5125c <__register_exitproc+0x10c>
   511c8:	01006404 	movi	r4,400
   511cc:	d9400015 	stw	r5,0(sp)
   511d0:	d9800115 	stw	r6,4(sp)
   511d4:	d9c00215 	stw	r7,8(sp)
   511d8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   511dc:	d9400017 	ldw	r5,0(sp)
   511e0:	d9800117 	ldw	r6,4(sp)
   511e4:	d9c00217 	ldw	r7,8(sp)
   511e8:	10001c26 	beq	r2,zero,5125c <__register_exitproc+0x10c>
   511ec:	80c05217 	ldw	r3,328(r16)
   511f0:	10000115 	stw	zero,4(r2)
   511f4:	02400044 	movi	r9,1
   511f8:	10c00015 	stw	r3,0(r2)
   511fc:	80805215 	stw	r2,328(r16)
   51200:	10006215 	stw	zero,392(r2)
   51204:	10006315 	stw	zero,396(r2)
   51208:	0007883a 	mov	r3,zero
   5120c:	883fdf26 	beq	r17,zero,5118c <__alt_data_end+0xfffd118c>
   51210:	18d1883a 	add	r8,r3,r3
   51214:	4211883a 	add	r8,r8,r8
   51218:	1211883a 	add	r8,r2,r8
   5121c:	41802215 	stw	r6,136(r8)
   51220:	01000044 	movi	r4,1
   51224:	11806217 	ldw	r6,392(r2)
   51228:	20c8983a 	sll	r4,r4,r3
   5122c:	310cb03a 	or	r6,r6,r4
   51230:	11806215 	stw	r6,392(r2)
   51234:	41c04215 	stw	r7,264(r8)
   51238:	01800084 	movi	r6,2
   5123c:	89bfd31e 	bne	r17,r6,5118c <__alt_data_end+0xfffd118c>
   51240:	11806317 	ldw	r6,396(r2)
   51244:	3108b03a 	or	r4,r6,r4
   51248:	11006315 	stw	r4,396(r2)
   5124c:	003fcf06 	br	5118c <__alt_data_end+0xfffd118c>
   51250:	80805304 	addi	r2,r16,332
   51254:	80805215 	stw	r2,328(r16)
   51258:	003fc706 	br	51178 <__alt_data_end+0xfffd1178>
   5125c:	00bfffc4 	movi	r2,-1
   51260:	003fd106 	br	511a8 <__alt_data_end+0xfffd11a8>

00051264 <__call_exitprocs>:
   51264:	00800174 	movhi	r2,5
   51268:	108e5c04 	addi	r2,r2,14704
   5126c:	10800017 	ldw	r2,0(r2)
   51270:	defff404 	addi	sp,sp,-48
   51274:	dd800815 	stw	r22,32(sp)
   51278:	d8800015 	stw	r2,0(sp)
   5127c:	10805204 	addi	r2,r2,328
   51280:	dd000615 	stw	r20,24(sp)
   51284:	dc800415 	stw	r18,16(sp)
   51288:	dfc00b15 	stw	ra,44(sp)
   5128c:	df000a15 	stw	fp,40(sp)
   51290:	ddc00915 	stw	r23,36(sp)
   51294:	dd400715 	stw	r21,28(sp)
   51298:	dcc00515 	stw	r19,20(sp)
   5129c:	dc400315 	stw	r17,12(sp)
   512a0:	dc000215 	stw	r16,8(sp)
   512a4:	2025883a 	mov	r18,r4
   512a8:	2829883a 	mov	r20,r5
   512ac:	d8800115 	stw	r2,4(sp)
   512b0:	05bfffc4 	movi	r22,-1
   512b4:	d8800017 	ldw	r2,0(sp)
   512b8:	14c05217 	ldw	r19,328(r2)
   512bc:	98001d26 	beq	r19,zero,51334 <__call_exitprocs+0xd0>
   512c0:	dd400117 	ldw	r21,4(sp)
   512c4:	98800117 	ldw	r2,4(r19)
   512c8:	173fffc4 	addi	fp,r2,-1
   512cc:	e0000d16 	blt	fp,zero,51304 <__call_exitprocs+0xa0>
   512d0:	14000044 	addi	r16,r2,1
   512d4:	8421883a 	add	r16,r16,r16
   512d8:	8421883a 	add	r16,r16,r16
   512dc:	84402004 	addi	r17,r16,128
   512e0:	9c63883a 	add	r17,r19,r17
   512e4:	9c21883a 	add	r16,r19,r16
   512e8:	a0001e26 	beq	r20,zero,51364 <__call_exitprocs+0x100>
   512ec:	80804017 	ldw	r2,256(r16)
   512f0:	15001c26 	beq	r2,r20,51364 <__call_exitprocs+0x100>
   512f4:	e73fffc4 	addi	fp,fp,-1
   512f8:	843fff04 	addi	r16,r16,-4
   512fc:	8c7fff04 	addi	r17,r17,-4
   51300:	e5bff91e 	bne	fp,r22,512e8 <__alt_data_end+0xfffd12e8>
   51304:	00800034 	movhi	r2,0
   51308:	10800004 	addi	r2,r2,0
   5130c:	10000926 	beq	r2,zero,51334 <__call_exitprocs+0xd0>
   51310:	98800117 	ldw	r2,4(r19)
   51314:	1000311e 	bne	r2,zero,513dc <__call_exitprocs+0x178>
   51318:	98800017 	ldw	r2,0(r19)
   5131c:	10003426 	beq	r2,zero,513f0 <__call_exitprocs+0x18c>
   51320:	9809883a 	mov	r4,r19
   51324:	a8800015 	stw	r2,0(r21)
   51328:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   5132c:	acc00017 	ldw	r19,0(r21)
   51330:	983fe41e 	bne	r19,zero,512c4 <__alt_data_end+0xfffd12c4>
   51334:	dfc00b17 	ldw	ra,44(sp)
   51338:	df000a17 	ldw	fp,40(sp)
   5133c:	ddc00917 	ldw	r23,36(sp)
   51340:	dd800817 	ldw	r22,32(sp)
   51344:	dd400717 	ldw	r21,28(sp)
   51348:	dd000617 	ldw	r20,24(sp)
   5134c:	dcc00517 	ldw	r19,20(sp)
   51350:	dc800417 	ldw	r18,16(sp)
   51354:	dc400317 	ldw	r17,12(sp)
   51358:	dc000217 	ldw	r16,8(sp)
   5135c:	dec00c04 	addi	sp,sp,48
   51360:	f800283a 	ret
   51364:	98800117 	ldw	r2,4(r19)
   51368:	80c00017 	ldw	r3,0(r16)
   5136c:	10bfffc4 	addi	r2,r2,-1
   51370:	17001526 	beq	r2,fp,513c8 <__call_exitprocs+0x164>
   51374:	80000015 	stw	zero,0(r16)
   51378:	183fde26 	beq	r3,zero,512f4 <__alt_data_end+0xfffd12f4>
   5137c:	00800044 	movi	r2,1
   51380:	1708983a 	sll	r4,r2,fp
   51384:	98806217 	ldw	r2,392(r19)
   51388:	9dc00117 	ldw	r23,4(r19)
   5138c:	2084703a 	and	r2,r4,r2
   51390:	1000061e 	bne	r2,zero,513ac <__call_exitprocs+0x148>
   51394:	183ee83a 	callr	r3
   51398:	98800117 	ldw	r2,4(r19)
   5139c:	15ffc51e 	bne	r2,r23,512b4 <__alt_data_end+0xfffd12b4>
   513a0:	a8800017 	ldw	r2,0(r21)
   513a4:	14ffd326 	beq	r2,r19,512f4 <__alt_data_end+0xfffd12f4>
   513a8:	003fc206 	br	512b4 <__alt_data_end+0xfffd12b4>
   513ac:	98806317 	ldw	r2,396(r19)
   513b0:	2084703a 	and	r2,r4,r2
   513b4:	1000061e 	bne	r2,zero,513d0 <__call_exitprocs+0x16c>
   513b8:	89400017 	ldw	r5,0(r17)
   513bc:	9009883a 	mov	r4,r18
   513c0:	183ee83a 	callr	r3
   513c4:	003ff406 	br	51398 <__alt_data_end+0xfffd1398>
   513c8:	9f000115 	stw	fp,4(r19)
   513cc:	003fea06 	br	51378 <__alt_data_end+0xfffd1378>
   513d0:	89000017 	ldw	r4,0(r17)
   513d4:	183ee83a 	callr	r3
   513d8:	003fef06 	br	51398 <__alt_data_end+0xfffd1398>
   513dc:	98800017 	ldw	r2,0(r19)
   513e0:	982b883a 	mov	r21,r19
   513e4:	1027883a 	mov	r19,r2
   513e8:	983fb61e 	bne	r19,zero,512c4 <__alt_data_end+0xfffd12c4>
   513ec:	003fd106 	br	51334 <__alt_data_end+0xfffd1334>
   513f0:	0005883a 	mov	r2,zero
   513f4:	003ffa06 	br	513e0 <__alt_data_end+0xfffd13e0>

000513f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   513f8:	defffd04 	addi	sp,sp,-12
   513fc:	df000215 	stw	fp,8(sp)
   51400:	df000204 	addi	fp,sp,8
   51404:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   51408:	0001883a 	nop
   5140c:	e0bfff17 	ldw	r2,-4(fp)
   51410:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   51414:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   51418:	10000226 	beq	r2,zero,51424 <_exit+0x2c>
    ALT_SIM_FAIL();
   5141c:	002af070 	cmpltui	zero,zero,43969
   51420:	00000106 	br	51428 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   51424:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   51428:	003fff06 	br	51428 <__alt_data_end+0xfffd1428>
